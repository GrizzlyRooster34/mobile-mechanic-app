// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?
  name      String
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer specific fields
  customer Customer?

  // Mechanic specific fields
  mechanic Mechanic?

  // Admin specific fields
  admin Admin?

  // AI Sessions
  aiSessions AISession[]

  // Reviews given by this user
  reviewsGiven Review[] @relation("ReviewGiver")

  // Reviews received by this user (for mechanics)
  reviewsReceived Review[] @relation("ReviewReceiver")

  // User indexes for performance
  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Customer {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Customer specific information
  address          String?
  city             String?
  state            String?
  zipCode          String?
  emergencyContact String?
  preferredPayment PaymentMethod @default(CARD)

  // Relationships
  vehicles            Vehicle[]
  serviceRequests     ServiceRequest[]
  appointments        Appointment[]
  payments            Payment[]
  maintenanceSchedule MaintenanceSchedule[]
  notifications       Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Mechanic {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Mechanic specific information
  licenseNumber    String    @unique
  certifications   String[]
  specializations  String[]
  experienceYears  Int
  hourlyRate       Decimal   @db.Decimal(10, 2)
  isAvailable      Boolean   @default(true)
  serviceRadius    Int       @default(25) // miles
  latitude         Decimal?  @db.Decimal(10, 8)
  longitude        Decimal?  @db.Decimal(11, 8)
  address          String?
  city             String?
  state            String?
  zipCode          String?
  tools            String[]
  vehicleTypes     String[] // Types of vehicles they can service
  emergencyService Boolean   @default(false)

  // Relationships
  serviceRequests ServiceRequest[]
  appointments    Appointment[]
  quotes          Quote[]
  aiSessions      AISession[]
  notifications   Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mechanics")
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Admin specific information
  permissions String[]
  department  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// Vehicle Information Models
model Vehicle {
  id         String  @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Vehicle identification
  vin         String  @unique
  make        String
  model       String
  year        Int
  color       String?
  licensePlate String?

  // Technical specifications
  engine       String?
  transmission String?
  fuelType     String?
  bodyStyle    String?

  // Current status
  mileage     Int?
  lastService DateTime?
  nextService DateTime?

  // Relationships
  serviceRequests     ServiceRequest[]
  maintenanceSchedule MaintenanceSchedule[]
  vinDecodeHistory    VINDecodeHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Vehicle indexes for performance
  @@index([vin])
  @@index([customerId])
  @@index([make, model, year])
  @@map("vehicles")
}

model VINDecodeHistory {
  id        String   @id @default(cuid())
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vin       String
  decodedData Json
  source    String   // API source used for decoding
  createdAt DateTime @default(now())

  @@map("vin_decode_history")
}

// Service and Job Models
model ServiceRequest {
  id         String            @id @default(cuid())
  customerId String
  customer   Customer          @relation(fields: [customerId], references: [id])
  vehicleId  String
  vehicle    Vehicle           @relation(fields: [vehicleId], references: [id])
  mechanicId String?
  mechanic   Mechanic?         @relation(fields: [mechanicId], references: [id])

  // Request details
  title           String
  description     String
  symptoms        String[]
  urgency         UrgencyLevel      @default(MEDIUM)
  serviceType     ServiceType
  status          ServiceStatus     @default(PENDING)
  estimatedCost   Decimal?          @db.Decimal(10, 2)
  actualCost      Decimal?          @db.Decimal(10, 2)
  
  // Location information
  serviceLocation String
  latitude        Decimal?          @db.Decimal(10, 8)
  longitude       Decimal?          @db.Decimal(11, 8)
  
  // Scheduling
  preferredDate   DateTime?
  scheduledDate   DateTime?
  completedDate   DateTime?
  
  // AI Integration
  aiDiagnosis     String?
  diagnosticCodes String[]
  
  // Relationships
  quotes        Quote[]
  appointments  Appointment[]
  payments      Payment[]
  reviews       Review[]
  aiSessions    AISession[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Service Request indexes for performance
  @@index([customerId])
  @@index([mechanicId])
  @@index([status])
  @@index([serviceType])
  @@index([createdAt])
  @@index([scheduledDate])
  @@map("service_requests")
}

model Quote {
  id               String         @id @default(cuid())
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  mechanicId       String
  mechanic         Mechanic       @relation(fields: [mechanicId], references: [id])

  // Quote details
  laborCost       Decimal   @db.Decimal(10, 2)
  partsCost       Decimal   @db.Decimal(10, 2)
  totalCost       Decimal   @db.Decimal(10, 2)
  estimatedHours  Decimal   @db.Decimal(4, 2)
  validUntil      DateTime
  status          QuoteStatus @default(PENDING)
  notes           String?

  // Parts breakdown
  partsNeeded PartsNeeded[]

  // Procedure details
  procedureSteps ProcedureStep[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quotes")
}

model PartsNeeded {
  id          String  @id @default(cuid())
  quoteId     String
  quote       Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  partNumber    String
  description   String
  quantity      Int
  unitCost      Decimal @db.Decimal(10, 2)
  totalCost     Decimal @db.Decimal(10, 2)
  supplier      String?
  availability  String? // in_stock, order_required, unknown

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("parts_needed")
}

model ProcedureStep {
  id      String @id @default(cuid())
  quoteId String
  quote   Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  stepNumber      Int
  description     String
  estimatedTime   Int      // in minutes
  tools           String[]
  safetyNotes     String[]
  difficulty      String?  // easy, medium, hard

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("procedure_steps")
}

// Appointment and Scheduling Models
model Appointment {
  id               String         @id @default(cuid())
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  customerId       String
  customer         Customer       @relation(fields: [customerId], references: [id])
  mechanicId       String
  mechanic         Mechanic       @relation(fields: [mechanicId], references: [id])

  // Appointment details
  scheduledDate   DateTime
  estimatedDuration Int // in minutes
  status          AppointmentStatus @default(SCHEDULED)
  serviceLocation String
  latitude        Decimal?          @db.Decimal(10, 8)
  longitude       Decimal?          @db.Decimal(11, 8)
  
  // Special instructions
  notes           String?
  specialRequests String[]
  
  // Completion details
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Relationships
  notifications   Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Appointment indexes for performance
  @@index([customerId])
  @@index([mechanicId])
  @@index([scheduledDate])
  @@index([status])
  @@map("appointments")
}

// Payment and Billing Models
model Payment {
  id               String         @id @default(cuid())
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  customerId       String
  customer         Customer       @relation(fields: [customerId], references: [id])

  // Payment details
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  
  // Stripe integration
  stripePaymentId String?       @unique
  stripeCustomerId String?
  
  // Payment breakdown
  laborAmount     Decimal?      @db.Decimal(10, 2)
  partsAmount     Decimal?      @db.Decimal(10, 2)
  taxAmount       Decimal?      @db.Decimal(10, 2)
  tipAmount       Decimal?      @db.Decimal(10, 2)
  
  // Transaction details
  transactionId   String?
  receiptUrl      String?
  refundAmount    Decimal?      @db.Decimal(10, 2)
  refundReason    String?
  
  // Timestamps
  paidAt          DateTime?
  refundedAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Payment indexes for performance
  @@index([customerId])
  @@index([status])
  @@index([stripePaymentId])
  @@index([createdAt])
  @@map("payments")
}

// AI Integration Models
model AISession {
  id       String    @id @default(cuid())
  userId   String?
  user     User?     @relation(fields: [userId], references: [id])
  mechanicId String?
  mechanic Mechanic? @relation(fields: [mechanicId], references: [id])
  serviceRequestId String?
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])

  // Session details
  sessionId String    @unique
  agentId   String    // customer support or mechanic assistant
  agentType AgentType
  
  // Context and metadata
  context   Json?
  metadata  Json?
  
  // Session status
  isActive  Boolean   @default(true)
  endedAt   DateTime?

  // Relationships
  messages  AIMessage[]
  feedback  AIFeedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // AI Session indexes for performance
  @@index([sessionId])
  @@index([userId])
  @@index([agentType])
  @@index([isActive])
  @@map("ai_sessions")
}

model AIMessage {
  id          String    @id @default(cuid())
  sessionId   String
  session     AISession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Message details
  role        MessageRole // user, assistant, system
  content     String
  messageType MessageType @default(TEXT)
  
  // AI response metadata
  confidence  Decimal?    @db.Decimal(3, 2) // 0.00 to 1.00
  suggestions String[]
  
  // Action tracking
  actionRequired Json?
  actionTaken    Json?
  
  // Attachments
  attachments    Json?

  createdAt DateTime @default(now())

  @@map("ai_messages")
}

model AIFeedback {
  id        String    @id @default(cuid())
  sessionId String
  session   AISession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Feedback details
  rating      Int       // 1-5 scale
  feedback    String?
  category    String?   // helpful, accurate, fast, etc.
  
  // Improvement suggestions
  suggestions String?

  createdAt DateTime @default(now())

  @@map("ai_feedback")
}

// Maintenance and Scheduling Models
model MaintenanceSchedule {
  id         String   @id @default(cuid())
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  // Maintenance details
  serviceType     String
  description     String
  recommendedMileage Int?
  recommendedMonths  Int?
  priority        MaintenancePriority @default(MEDIUM)
  estimatedCost   Decimal?            @db.Decimal(10, 2)
  
  // Scheduling
  dueDate         DateTime?
  lastCompleted   DateTime?
  isCompleted     Boolean             @default(false)
  completedAt     DateTime?
  
  // Reminders
  reminderSent    Boolean             @default(false)
  reminderDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Maintenance Schedule indexes for performance
  @@index([vehicleId])
  @@index([customerId])
  @@index([dueDate])
  @@index([isCompleted])
  @@map("maintenance_schedules")
}

// Reviews and Ratings Models
model Review {
  id               String         @id @default(cuid())
  serviceRequestId String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  giverId          String         // Customer giving the review
  giver            User           @relation("ReviewGiver", fields: [giverId], references: [id])
  receiverId       String         // Mechanic receiving the review
  receiver         User           @relation("ReviewReceiver", fields: [receiverId], references: [id])

  // Review details
  rating          Int     // 1-5 scale
  title           String?
  comment         String?
  
  // Review categories
  qualityRating   Int?    // 1-5 scale
  timelinessRating Int?   // 1-5 scale
  communicationRating Int? // 1-5 scale
  valueRating     Int?    // 1-5 scale
  
  // Verification
  isVerified      Boolean @default(false)
  
  // Response from mechanic
  response        String?
  responseDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// Notification Models
model Notification {
  id         String  @id @default(cuid())
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  mechanicId String?
  mechanic   Mechanic? @relation(fields: [mechanicId], references: [id])
  serviceRequestId String?
  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  appointmentId    String?
  appointment      Appointment? @relation(fields: [appointmentId], references: [id])

  // Notification details
  type        NotificationType
  title       String
  message     String
  priority    NotificationPriority @default(MEDIUM)
  
  // Delivery channels
  sendEmail   Boolean              @default(true)
  sendSMS     Boolean              @default(false)
  sendPush    Boolean              @default(true)
  
  // Status tracking
  isRead      Boolean              @default(false)
  isSent      Boolean              @default(false)
  sentAt      DateTime?
  readAt      DateTime?
  
  // Scheduling
  scheduledFor DateTime?
  
  // Metadata
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Notification indexes for performance
  @@index([customerId])
  @@index([mechanicId])
  @@index([type])
  @@index([isRead])
  @@index([scheduledFor])
  @@map("notifications")
}

// Enums
enum UserRole {
  CUSTOMER
  MECHANIC
  ADMIN
}

enum ServiceType {
  OIL_CHANGE
  BRAKE_SERVICE
  TIRE_SERVICE
  ENGINE_DIAGNOSTIC
  TRANSMISSION_SERVICE
  ELECTRICAL_REPAIR
  AC_REPAIR
  BATTERY_SERVICE
  TUNE_UP
  INSPECTION
  EMERGENCY_REPAIR
  PREVENTIVE_MAINTENANCE
  OTHER
}

enum ServiceStatus {
  PENDING
  ASSIGNED
  QUOTED
  APPROVED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum QuoteStatus {
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum PaymentMethod {
  CARD
  CASH
  CHECK
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
}

enum AgentType {
  CUSTOMER_SUPPORT
  MECHANIC_ASSISTANT
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  SERVICE_UPDATE
  PAYMENT_REMINDER
  PAYMENT_CONFIRMATION
  QUOTE_RECEIVED
  MAINTENANCE_DUE
  EMERGENCY_ALERT
  SYSTEM_NOTIFICATION
  PROMOTIONAL
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}


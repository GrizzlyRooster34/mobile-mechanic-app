name: 🚀 Continuous Integration & Build Monitor

on:
  push:
    branches: [ main, develop, expo-full-feature-integration ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for maintenance checks
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - preview
          - production
      platform:
        description: 'Target platforms'
        required: true
        default: 'all'
        type: choice
        options:
          - android
          - ios
          - all
      skip_tests:
        description: 'Skip tests'
        type: boolean
        default: false
      enable_monitoring:
        description: 'Enable build monitoring'
        type: boolean
        default: true

env:
  NODE_VERSION: '18'
  EXPO_CLI_VERSION: 'latest'
  JAVA_VERSION: '11'
  MONITORING_ENABLED: ${{ github.event.inputs.enable_monitoring || 'true' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Setup and Validation
  setup-validation:
    name: 🔍 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-keys.outputs.node-modules }}
      should-build: ${{ steps.changes.outputs.should-build }}
      build-type: ${{ steps.build-config.outputs.build-type }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            app:
              - 'app/**'
              - 'assets/**'
              - 'scripts/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'babel.config.js'
              - 'metro.config.js'
              - 'eas.json'
            android:
              - 'android/**'
              - 'app.json'
            ios:
              - 'ios/**'
              - 'app.json'
            ci:
              - '.github/workflows/**'
              - 'scripts/build/**'

      - name: 🏗️ Determine build configuration
        id: build-config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "build-type=${{ github.event.inputs.build_type }}" >> $GITHUB_OUTPUT
            echo "platform=${{ github.event.inputs.platform }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "build-type=production" >> $GITHUB_OUTPUT
            echo "platform=all" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "build-type=preview" >> $GITHUB_OUTPUT
            echo "platform=all" >> $GITHUB_OUTPUT
          else
            echo "build-type=development" >> $GITHUB_OUTPUT
            echo "platform=all" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ steps.changes.outputs.app }}" == "true" || "${{ steps.changes.outputs.android }}" == "true" || "${{ steps.changes.outputs.ios }}" == "true" || "${{ steps.changes.outputs.ci }}" == "true" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Set build matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.platform || 'all' }}" == "all" ]]; then
            matrix='{"platform": ["android", "ios"], "include": [{"platform": "android", "os": "ubuntu-latest"}, {"platform": "ios", "os": "macos-latest"}]}'
          elif [[ "${{ github.event.inputs.platform }}" == "android" ]]; then
            matrix='{"platform": ["android"], "include": [{"platform": "android", "os": "ubuntu-latest"}]}'
          else
            matrix='{"platform": ["ios"], "include": [{"platform": "ios", "os": "macos-latest"}]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: 🔑 Generate cache keys
        id: cache-keys
        run: |
          echo "node-modules=node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 📚 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
          npx expo install --fix

      - name: 🧪 Run pre-build validation
        run: |
          # Create validation script if it doesn't exist
          if [[ ! -f "scripts/build/pre-build-validation.sh" ]]; then
            mkdir -p scripts/build
            cat > scripts/build/pre-build-validation.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "🔍 Running pre-build validation..."
          
          # Check required files
          echo "✅ Checking required files..."
          [[ -f package.json ]] || { echo "❌ package.json not found"; exit 1; }
          [[ -f tsconfig.json ]] || { echo "❌ tsconfig.json not found"; exit 1; }
          [[ -f app.json ]] || { echo "❌ app.json not found"; exit 1; }
          
          # Validate TypeScript
          echo "✅ Validating TypeScript..."
          npx tsc --noEmit
          
          # Check dependencies for vulnerabilities
          echo "✅ Checking security vulnerabilities..."
          npm audit --audit-level=high || echo "⚠️ Security vulnerabilities found"
          
          echo "✅ Pre-build validation completed successfully!"
          EOF
            chmod +x scripts/build/pre-build-validation.sh
          fi
          
          bash scripts/build/pre-build-validation.sh

      - name: 📤 Cache validation results
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.expo
          key: ${{ steps.cache-keys.outputs.node-modules }}

  # Job 2: Automated Testing
  automated-testing:
    name: 🧪 Automated Testing
    runs-on: ubuntu-latest
    needs: setup-validation
    if: needs.setup-validation.outputs.should-build == 'true' && github.event.inputs.skip_tests != 'true'
    timeout-minutes: 20
    
    strategy:
      matrix:
        test-suite: [unit, integration, e2e-prep]
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.expo
          key: ${{ needs.setup-validation.outputs.cache-key }}

      - name: 🏗️ Setup test environment
        run: |
          # Install testing dependencies if not present
          if ! npm list jest > /dev/null 2>&1; then
            npm install --save-dev jest @testing-library/react-native @testing-library/jest-native
          fi
          
          # Create basic test configuration
          if [[ ! -f jest.config.js ]]; then
            cat > jest.config.js << 'EOF'
          module.exports = {
            preset: 'jest-expo',
            setupFilesAfterEnv: ['<rootDir>/jest-setup.js'],
            testMatch: [
              '**/__tests__/**/*.(test|spec).(js|jsx|ts|tsx)',
              '**/*.(test|spec).(js|jsx|ts|tsx)'
            ],
            moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx'],
            transform: {
              '^.+\\.(js|jsx|ts|tsx)$': 'babel-jest',
            },
            collectCoverageFrom: [
              'app/**/*.{js,jsx,ts,tsx}',
              '!app/**/*.d.ts',
              '!app/**/index.{js,jsx,ts,tsx}',
            ],
            coverageThreshold: {
              global: {
                branches: 50,
                functions: 50,
                lines: 50,
                statements: 50,
              },
            },
          };
          EOF
          fi
          
          # Create jest setup file
          if [[ ! -f jest-setup.js ]]; then
            cat > jest-setup.js << 'EOF'
          import '@testing-library/jest-native/extend-expect';
          
          // Mock Expo modules
          jest.mock('expo-constants', () => ({
            expoConfig: {
              name: 'Test App',
              version: '1.0.0',
            },
          }));
          
          jest.mock('expo-router', () => ({
            useRouter: () => ({
              push: jest.fn(),
              back: jest.fn(),
            }),
            useLocalSearchParams: () => ({}),
          }));
          EOF
          fi

      - name: 🧪 Run test suite - ${{ matrix.test-suite }}
        run: |
          case "${{ matrix.test-suite }}" in
            "unit")
              echo "🔬 Running unit tests..."
              # Create sample unit test if none exist
              mkdir -p __tests__
              if [[ ! -f __tests__/sample.test.js ]]; then
                cat > __tests__/sample.test.js << 'EOF'
          describe('Sample Test Suite', () => {
            test('should pass basic test', () => {
              expect(1 + 1).toBe(2);
            });
            
            test('should validate app structure', () => {
              // Basic structure validation
              expect(true).toBeTruthy();
            });
          });
          EOF
              fi
              npx jest --testPathPattern="__tests__" --coverage --maxWorkers=2
              ;;
            "integration")
              echo "🔗 Running integration tests..."
              # Create sample integration test
              mkdir -p __tests__/integration
              if [[ ! -f __tests__/integration/app.test.js ]]; then
                cat > __tests__/integration/app.test.js << 'EOF'
          describe('App Integration Tests', () => {
            test('should handle navigation', () => {
              // Mock navigation test
              expect(true).toBeTruthy();
            });
            
            test('should handle state management', () => {
              // Mock state test
              expect(true).toBeTruthy();
            });
          });
          EOF
              fi
              npx jest --testPathPattern="integration" --maxWorkers=2
              ;;
            "e2e-prep")
              echo "🎭 Preparing E2E test environment..."
              # Install and setup Detox or similar
              echo "E2E tests would be configured here"
              ;;
          esac

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            __tests__/
            jest-results.xml
          retention-days: 7

  # Job 3: Build Quality Analysis
  quality-analysis:
    name: 🔍 Quality Analysis
    runs-on: ubuntu-latest
    needs: setup-validation
    if: needs.setup-validation.outputs.should-build == 'true'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📚 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.expo
          key: ${{ needs.setup-validation.outputs.cache-key }}

      - name: 🎯 ESLint Analysis
        run: |
          # Install ESLint if not present
          if ! npm list eslint > /dev/null 2>&1; then
            npm install --save-dev eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser
          fi
          
          # Create ESLint config if not present
          if [[ ! -f .eslintrc.js ]]; then
            cat > .eslintrc.js << 'EOF'
          module.exports = {
            extends: ['expo', '@react-native-community'],
            parser: '@typescript-eslint/parser',
            plugins: ['@typescript-eslint'],
            rules: {
              '@typescript-eslint/no-unused-vars': 'warn',
              'react-native/no-inline-styles': 'warn',
            },
          };
          EOF
          fi
          
          npx eslint app/ --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
          npx eslint app/ --ext .js,.jsx,.ts,.tsx

      - name: 🔧 TypeScript Analysis
        run: |
          echo "🔍 Running TypeScript analysis..."
          npx tsc --noEmit --pretty
          
          # Generate TypeScript report
          npx tsc --noEmit --listFiles > typescript-files.txt 2>&1 || true

      - name: 📏 Bundle Size Analysis
        run: |
          echo "📦 Analyzing bundle size..."
          # Create a production build for analysis
          npx expo export --platform web --output-dir dist-web || true
          
          if [[ -d dist-web ]]; then
            du -sh dist-web/
            find dist-web -name "*.js" -exec wc -c {} + | sort -n > bundle-sizes.txt
          fi

      - name: 🔒 Security Analysis
        run: |
          echo "🔐 Running security analysis..."
          npm audit --json > security-audit.json || true
          npm audit

      - name: 📤 Upload analysis results
        uses: actions/upload-artifact@v3
        with:
          name: quality-analysis
          path: |
            eslint-results.json
            typescript-files.txt
            bundle-sizes.txt
            security-audit.json
          retention-days: 30

  # Job 4: Multi-Platform Builds
  multi-platform-builds:
    name: 🏗️ Build - ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: [setup-validation, automated-testing]
    if: needs.setup-validation.outputs.should-build == 'true' && (success() || github.event.inputs.skip_tests == 'true')
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-validation.outputs.matrix) }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: ☕ Setup Java (Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🍎 Setup Xcode (iOS)
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: 📚 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.expo
          key: ${{ needs.setup-validation.outputs.cache-key }}

      - name: 🏗️ Setup EAS CLI
        run: |
          npm install -g @expo/eas-cli@${{ env.EXPO_CLI_VERSION }}
          eas --version

      - name: 🔧 Configure build environment
        run: |
          echo "📱 Configuring ${{ matrix.platform }} build environment..."
          
          # Create build monitoring script
          mkdir -p scripts/build/monitor
          cat > scripts/build/monitor/build-tracker.sh << 'EOF'
          #!/bin/bash
          set -e
          
          PLATFORM=$1
          BUILD_TYPE=$2
          START_TIME=$(date +%s)
          
          echo "🚀 Starting $PLATFORM build ($BUILD_TYPE) at $(date)"
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "BUILD_START_TIME=$START_TIME" >> $GITHUB_ENV
          
          # Monitor system resources
          if command -v top >/dev/null 2>&1; then
            echo "📊 System resources:"
            top -l 1 -s 0 | grep "CPU usage" || true
            top -l 1 -s 0 | grep "PhysMem" || true
          fi
          
          echo "✅ Build environment configured"
          EOF
          chmod +x scripts/build/monitor/build-tracker.sh
          
          bash scripts/build/monitor/build-tracker.sh ${{ matrix.platform }} ${{ needs.setup-validation.outputs.build-type }}

      - name: 🔄 Start build monitoring
        if: env.MONITORING_ENABLED == 'true'
        run: |
          echo "📡 Starting build monitoring..."
          # Start the real-time monitor in background
          if [[ -f "scripts/build/monitor/real-time-monitor.js" ]]; then
            node scripts/build/monitor/real-time-monitor.js &
            MONITOR_PID=$!
            echo "MONITOR_PID=$MONITOR_PID" >> $GITHUB_ENV
            echo "Build monitor started with PID: $MONITOR_PID"
          fi

      - name: 🏗️ Run platform build
        id: build
        run: |
          echo "🚀 Building for ${{ matrix.platform }} (${{ needs.setup-validation.outputs.build-type }})"
          
          # Create comprehensive build script
          cat > build-runner.sh << 'EOF'
          #!/bin/bash
          set -e
          
          PLATFORM=$1
          BUILD_TYPE=$2
          
          echo "📋 Build Configuration:"
          echo "  Platform: $PLATFORM"
          echo "  Build Type: $BUILD_TYPE"
          echo "  Node Version: $(node --version)"
          echo "  NPM Version: $(npm --version)"
          echo "  Expo CLI Version: $(npx expo --version)"
          
          # Pre-build checks
          echo "🔍 Pre-build validation..."
          npx tsc --noEmit
          
          case $PLATFORM in
            "android")
              echo "🤖 Building Android app..."
              if [[ "$BUILD_TYPE" == "production" ]]; then
                eas build --platform android --profile production --non-interactive --wait
              elif [[ "$BUILD_TYPE" == "preview" ]]; then
                eas build --platform android --profile preview --non-interactive --wait
              else
                eas build --platform android --profile development --non-interactive --wait
              fi
              ;;
            "ios")
              echo "🍎 Building iOS app..."
              if [[ "$BUILD_TYPE" == "production" ]]; then
                eas build --platform ios --profile production --non-interactive --wait
              elif [[ "$BUILD_TYPE" == "preview" ]]; then
                eas build --platform ios --profile preview --non-interactive --wait
              else
                eas build --platform ios --profile development --non-interactive --wait
              fi
              ;;
          esac
          
          echo "✅ Build completed successfully!"
          EOF
          
          chmod +x build-runner.sh
          bash build-runner.sh ${{ matrix.platform }} ${{ needs.setup-validation.outputs.build-type }}

      - name: 📊 Build metrics collection
        if: always()
        run: |
          END_TIME=$(date +%s)
          BUILD_DURATION=$((END_TIME - BUILD_START_TIME))
          
          echo "📈 Build Metrics:"
          echo "  Duration: ${BUILD_DURATION}s"
          echo "  Platform: ${{ matrix.platform }}"
          echo "  Status: ${{ job.status }}"
          echo "  Build Type: ${{ needs.setup-validation.outputs.build-type }}"
          
          # Create metrics file
          cat > build-metrics.json << EOF
          {
            "platform": "${{ matrix.platform }}",
            "buildType": "${{ needs.setup-validation.outputs.build-type }}",
            "duration": $BUILD_DURATION,
            "status": "${{ job.status }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "nodeVersion": "$(node --version)",
            "runner": "${{ runner.os }}"
          }
          EOF

      - name: 🛑 Stop build monitoring
        if: always() && env.MONITORING_ENABLED == 'true' && env.MONITOR_PID
        run: |
          echo "🛑 Stopping build monitor..."
          kill $MONITOR_PID || true

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: build-${{ matrix.platform }}-${{ needs.setup-validation.outputs.build-type }}
          path: |
            build-metrics.json
            logs/
            *.log
          retention-days: 30

  # Job 5: Build Verification & Performance Testing
  build-verification:
    name: ✅ Build Verification
    runs-on: ubuntu-latest
    needs: [setup-validation, multi-platform-builds]
    if: always() && needs.setup-validation.outputs.should-build == 'true'
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download all build artifacts
        uses: actions/download-artifact@v3

      - name: 🔍 Verify build artifacts
        run: |
          echo "🔍 Verifying build artifacts..."
          
          # Check if builds completed successfully
          BUILD_SUCCESS=true
          
          for platform in android ios; do
            if [[ -f "build-${platform}-${{ needs.setup-validation.outputs.build-type }}/build-metrics.json" ]]; then
              echo "✅ Found $platform build metrics"
              cat "build-${platform}-${{ needs.setup-validation.outputs.build-type }}/build-metrics.json" | jq '.'
            else
              echo "❌ Missing $platform build metrics"
              BUILD_SUCCESS=false
            fi
          done
          
          if [[ "$BUILD_SUCCESS" == "false" ]]; then
            echo "❌ Build verification failed"
            exit 1
          fi
          
          echo "✅ All builds verified successfully"

      - name: 📊 Generate build report
        run: |
          echo "📊 Generating comprehensive build report..."
          
          cat > build-report.md << 'EOF'
          # 🏗️ Build Report
          
          **Build Configuration:**
          - Build Type: ${{ needs.setup-validation.outputs.build-type }}
          - Trigger: ${{ github.event_name }}
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          **Platform Status:**
          EOF
          
          # Add platform-specific results
          for platform in android ios; do
            if [[ -f "build-${platform}-${{ needs.setup-validation.outputs.build-type }}/build-metrics.json" ]]; then
              duration=$(cat "build-${platform}-${{ needs.setup-validation.outputs.build-type }}/build-metrics.json" | jq -r '.duration')
              status=$(cat "build-${platform}-${{ needs.setup-validation.outputs.build-type }}/build-metrics.json" | jq -r '.status')
              echo "- **${platform^}**: $status (${duration}s)" >> build-report.md
            else
              echo "- **${platform^}**: ❌ Failed" >> build-report.md
            fi
          done
          
          echo "" >> build-report.md
          echo "**Quality Metrics:**" >> build-report.md
          
          if [[ -f "quality-analysis/eslint-results.json" ]]; then
            echo "- ESLint: $(cat quality-analysis/eslint-results.json | jq '. | length') issues found" >> build-report.md
          fi
          
          if [[ -f "test-results-unit/coverage/coverage-summary.json" ]]; then
            echo "- Test Coverage: $(cat test-results-unit/coverage/coverage-summary.json | jq -r '.total.lines.pct')%" >> build-report.md
          fi

      - name: 📤 Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: build-report
          path: build-report.md
          retention-days: 90

  # Job 6: Deployment & Notifications
  deployment-notifications:
    name: 🚀 Deploy & Notify
    runs-on: ubuntu-latest
    needs: [setup-validation, multi-platform-builds, build-verification]
    if: always() && needs.setup-validation.outputs.build-type == 'production' && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🎯 Determine deployment status
        id: deployment-status
        run: |
          if [[ "${{ needs.build-verification.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Production build completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Production build failed" >> $GITHUB_OUTPUT
          fi

      - name: 📧 Send notification (Success)
        if: steps.deployment-status.outputs.status == 'success'
        run: |
          echo "✅ Build succeeded - notifications would be sent here"
          echo "This is where you'd integrate with:"
          echo "- Slack webhooks"
          echo "- Email notifications" 
          echo "- Microsoft Teams"
          echo "- Discord webhooks"
          echo "- Custom notification services"

      - name: 🚨 Send notification (Failure)
        if: steps.deployment-status.outputs.status == 'failure'
        run: |
          echo "❌ Build failed - failure notifications would be sent here"
          echo "This is where you'd send alerts to the development team"

      - name: 📊 Update build dashboard
        run: |
          echo "📊 Updating build dashboard..."
          echo "This is where you'd update your build status dashboard"
          echo "Integration points:"
          echo "- Internal dashboards"
          echo "- Metrics collection (DataDog, New Relic, etc.)"
          echo "- Build status badges"
          echo "- Project management tools"

# Workflow-level error handling
on_failure:
  if: failure()
  runs-on: ubuntu-latest
  steps:
    - name: 🚨 Workflow failure notification
      run: |
        echo "🚨 CI/CD workflow failed"
        echo "Failed job: ${{ github.job }}"
        echo "This would trigger emergency notifications"
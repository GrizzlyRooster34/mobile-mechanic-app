# Podfile for Heinicus Mobile Mechanic - Optimized for performance and reliability

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# ==============================================================================
# ENVIRONMENT CONFIGURATION
# ==============================================================================

# Enable New Architecture (Fabric + TurboModules) for better performance
ENV['RCT_NEW_ARCH_ENABLED'] = '1'
ENV['USE_HERMES'] = '1'
ENV['USE_FRAMEWORKS'] = 'static'

# Development tools
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

# Performance optimizations
ENV['CCACHE_ENABLED'] = '1'
ENV['USE_FLIPPER'] = '0'  # Disable Flipper for better performance in production

# ==============================================================================
# AUTOLINKING CONFIGURATION
# ==============================================================================

use_autolinking_method_symbol = ('use' + '_native' + '_modules!').to_sym
origin_autolinking_method = self.method(use_autolinking_method_symbol)
self.define_singleton_method(use_autolinking_method_symbol) do |*args|
  if ENV['EXPO_UNSTABLE_CORE_AUTOLINKING'] == '1'
    Pod::UI.puts('Using expo-modules-autolinking as core autolinking source'.green)
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
    origin_autolinking_method.call(config_command)
  else
    origin_autolinking_method.call()
  end
end

# ==============================================================================
# PLATFORM AND INSTALLATION SETTINGS
# ==============================================================================

# Minimum iOS version for modern features and performance
platform :ios, '13.4'

# Optimized CocoaPods installation settings
install! 'cocoapods',
  :deterministic_uuids => false,
  :generate_multiple_pod_projects => false,
  :incremental_installation => true,
  :skip_pods_project_generation => false,
  :clean_install => false

# Prepare React Native with optimizations
prepare_react_native_project!

# ==============================================================================
# TARGET CONFIGURATION
# ==============================================================================

target 'HeinicusMobileMechanic' do
  # Use Expo modules
  use_expo_modules!
  
  # Configure React Native modules
  config = use_native_modules!

  # Use static frameworks for better performance and smaller binary size
  use_frameworks! :linkage => :static

  # React Native configuration with optimizations
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :fabric_enabled => true,
    :new_arch_enabled => true,
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => true,
    :mac_catalyst_enabled => false,
    :ccache_enabled => true,
    :flipper_configuration => FlipperConfiguration.disabled  # Disable for production
  )

  # ==============================================================================
  # PERFORMANCE OPTIMIZATIONS
  # ==============================================================================

  # Optimize build settings for all pods
  post_install do |installer|
    # React Native post install optimizations
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => true,
    )

    # Apply optimizations to all targets
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # ==============================================================================
        # COMPILER OPTIMIZATIONS
        # ==============================================================================
        
        # Enable aggressive optimizations for release builds
        if config.name == 'Release'
          config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '3'
          config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-O'
          config.build_settings['SWIFT_COMPILATION_MODE'] = 'wholemodule'
          config.build_settings['VALIDATE_PRODUCT'] = 'YES'
          config.build_settings['ENABLE_NS_ASSERTIONS'] = 'NO'
          config.build_settings['ENABLE_TESTABILITY'] = 'NO'
          config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'NO'
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
        else
          # Debug optimizations
          config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
          config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
          config.build_settings['SWIFT_ACTIVE_COMPILATION_CONDITIONS'] = 'DEBUG'
          config.build_settings['ENABLE_TESTABILITY'] = 'YES'
          config.build_settings['GCC_GENERATE_DEBUGGING_SYMBOLS'] = 'YES'
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf-with-dsym'
        end

        # ==============================================================================
        # ARCHITECTURE AND DEPLOYMENT
        # ==============================================================================
        
        # Support modern architectures only
        config.build_settings['ARCHS'] = 'arm64'
        config.build_settings['VALID_ARCHS'] = 'arm64'
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        
        # Deployment target
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        
        # ==============================================================================
        # LINKING AND FRAMEWORKS
        # ==============================================================================
        
        # Use static libraries for better performance
        config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        config.build_settings['CLANG_MODULES_AUTOLINK'] = 'YES'
        
        # Dead code stripping
        config.build_settings['DEAD_CODE_STRIPPING'] = 'YES'
        config.build_settings['PRESERVE_DEAD_CODE_INITS_AND_TERMS'] = 'NO'
        
        # ==============================================================================
        # SWIFT OPTIMIZATIONS
        # ==============================================================================
        
        # Swift compiler optimizations
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['SWIFT_DISABLE_SAFETY_CHECKS'] = config.name == 'Release' ? 'YES' : 'NO'
        config.build_settings['SWIFT_ENFORCE_EXCLUSIVE_ACCESS'] = config.name == 'Release' ? 'compile-time' : 'on'
        
        # ==============================================================================
        # BITCODE AND STRIP SETTINGS
        # ==============================================================================
        
        # Disable bitcode (deprecated)
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        
        # Strip settings for smaller binaries
        config.build_settings['STRIP_INSTALLED_PRODUCT'] = config.name == 'Release' ? 'YES' : 'NO'
        config.build_settings['STRIP_STYLE'] = 'all'
        config.build_settings['STRIP_SWIFT_SYMBOLS'] = config.name == 'Release' ? 'YES' : 'NO'
        
        # ==============================================================================
        # OTHER PERFORMANCE SETTINGS
        # ==============================================================================
        
        # Enable module maps
        config.build_settings['CLANG_ENABLE_MODULE_DEBUGGING'] = config.name == 'Release' ? 'NO' : 'YES'
        
        # Precompiled headers
        config.build_settings['GCC_PRECOMPILE_PREFIX_HEADER'] = 'YES'
        
        # Link-time optimizations
        config.build_settings['LLVM_LTO'] = config.name == 'Release' ? 'YES' : 'NO'
        
        # Build performance
        config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
        
        # ==============================================================================
        # SIGNING CONFIGURATION
        # ==============================================================================
        
        # Disable code signing for resource bundles
        if target.respond_to?(:product_type) && target.product_type == "com.apple.product-type.bundle"
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
          config.build_settings['CODE_SIGNING_IDENTITY'] = ''
          config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ''
        end
      end
    end

    # Additional resource bundle signing fix for Xcode 14+
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
          config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
        end
      end
    end

    # Fix deployment targets for all pods
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings.delete('IPHONEOS_DEPLOYMENT_TARGET')
      end
    end
    
    # Set deployment target for the project
    installer.pods_project.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
    end
  end

  # ==============================================================================
  # POST INTEGRATION HOOKS
  # ==============================================================================

  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
end

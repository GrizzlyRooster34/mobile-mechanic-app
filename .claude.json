{
  "numStartups": 2,
  "installMethod": "unknown",
  "autoUpdates": true,
  "theme": "dark-daltonized",
  "tipsHistory": {
    "new-user-warmup": 2
  },
  "firstStartTime": "2025-06-24T14:03:02.622Z",
  "userID": "33a2f6eef7d3ceee00d23044f84f8e3509ee45a0f0903e953f48c4479f5a9951",
  "projects": {
    "/home/big_d": {
      "allowedTools": [],
      "history": [
        {
          "display": "push to github",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +247 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\n\ninterface AvailabilityCalendarProps {\n  onDateSelect: (date: Date, timeSlot: string) => void;\n  selectedDate?: Date;\n  selectedTime?: string;\n}\n\nexport function AvailabilityCalendar({ onDateSelect, selectedDate, selectedTime }: AvailabilityCalendarProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const timeSlots = [\n    '8:00 AM', '9:00 AM', '10:00 AM', '11:00 AM',\n    '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM',\n    '4:00 PM', '5:00 PM', '6:00 PM'\n  ];\n\n  const getDaysInMonth = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add all days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(new Date(year, month, day));\n    }\n    \n    return days;\n  };\n\n  const isDateAvailable = (date: Date) => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return date >= today;\n  };\n\n  const isDateSelected = (date: Date) => {\n    if (!selectedDate) return false;\n    return date.toDateString() === selectedDate.toDateString();\n  };\n\n  const formatMonth = (date: Date) => {\n    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newMonth = new Date(currentMonth);\n    if (direction === 'prev') {\n      newMonth.setMonth(newMonth.getMonth() - 1);\n    } else {\n      newMonth.setMonth(newMonth.getMonth() + 1);\n    }\n    setCurrentMonth(newMonth);\n  };\n\n  const days = getDaysInMonth(currentMonth);\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  return (\n    <View style={styles.container}>\n      {/* Calendar Header */}\n      <View style={styles.calendarHeader}>\n        <TouchableOpacity onPress={() => navigateMonth('prev')}>\n          <Icons.ChevronLeft size={24} color={Colors.text} />\n        </TouchableOpacity>\n        <Text style={styles.monthTitle}>{formatMonth(currentMonth)}</Text>\n        <TouchableOpacity onPress={() => navigateMonth('next')}>\n          <Icons.ChevronRight size={24} color={Colors.text} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Week Days */}\n      <View style={styles.weekDaysRow}>\n        {weekDays.map((day) => (\n          <Text key={day} style={styles.weekDayText}>{day}</Text>\n        ))}\n      </View>\n\n      {/* Calendar Grid */}\n      <View style={styles.calendarGrid}>\n        {days.map((date, index) => (\n          <TouchableOpacity\n            key={index}\n            style={[\n              styles.dayCell,\n              !date && styles.emptyCell,\n              date && !isDateAvailable(date) && styles.unavailableCell,\n              date && isDateSelected(date) && styles.selectedCell,\n            ]}\n            onPress={() => date && isDateAvailable(date) && onDateSelect(date, selectedTime || '')}\n            disabled={!date || !isDateAvailable(date)}\n          >\n            {date && (\n              <Text style={[\n                styles.dayText,\n                !isDateAvailable(date) && styles.unavailableText,\n                isDateSelected(date) && styles.selectedText,\n              ]}>\n                {date.getDate()}\n              </Text>\n            )}\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Time Slots */}\n      {selectedDate && (\n        <View style={styles.timeSlotsSection}>\n          <Text style={styles.timeSlotsTitle}>Available Times</Text>\n          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.timeSlotsList}>\n            {timeSlots.map((time) => (\n              <TouchableOpacity\n                key={time}\n                style={[\n                  styles.timeSlot,\n                  selectedTime === time && styles.selectedTimeSlot\n                ]}\n                onPress={() => onDateSelect(selectedDate, time)}\n              >\n                <Text style={[\n                  styles.timeSlotText,\n                  selectedTime === time && styles.selectedTimeSlotText\n                ]}>\n                  {time}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </ScrollView>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  calendarHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  monthTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  weekDaysRow: {\n    flexDirection: 'row',\n    marginBottom: 8,\n  },\n  weekDayText: {\n    flex: 1,\n    textAlign: 'center',\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontWeight: '500',\n  },\n  calendarGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginBottom: 16,\n  },\n  dayCell: {\n    width: '14.28%',\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 8,\n    marginBottom: 4,\n  },\n  emptyCell: {\n    // Empty cells for padding\n  },\n  unavailableCell: {\n    backgroundColor: Colors.surface,\n  },\n  selectedCell: {\n    backgroundColor: Colors.primary,\n  },\n  dayText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  unavailableText: {\n    color: Colors.textMuted,\n  },\n  selectedText: {\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  timeSlotsSection: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 16,\n  },\n  timeSlotsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  timeSlotsList: {\n    flexDirection: 'row',\n  },\n  timeSlot: {\n    backgroundColor: Colors.surface,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  selectedTimeSlot: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  timeSlotText: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  selectedTimeSlotText: {\n    color: Colors.white,\n    fontWeight: '600',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +561 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TextInput, ScrollView, Alert, TouchableOpacity } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { trpc } from '@/lib/trpc';\nimport { Vehicle, DiagnosticResult, ServiceType } from '@/types/service';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\nimport { router } from 'expo-router';\n\ninterface AIAssistantProps {\n  vehicle?: Vehicle;\n  onDiagnosisComplete?: (diagnosis: DiagnosticResult) => void;\n  initialSymptoms?: string;\n}\n\nexport function AIAssistant({ vehicle, onDiagnosisComplete, initialSymptoms = '' }: AIAssistantProps) {\n  const [symptoms, setSymptoms] = useState(initialSymptoms);\n  const [additionalContext, setAdditionalContext] = useState('');\n  const [diagnosis, setDiagnosis] = useState<DiagnosticResult | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const diagnosisMutation = trpc.diagnosis.diagnose.useMutation({\n    onSuccess: (result: DiagnosticResult) => {\n      setDiagnosis(result);\n      onDiagnosisComplete?.(result);\n      setIsAnalyzing(false);\n    },\n    onError: (error: any) => {\n      Alert.alert(\n        'Analysis Failed', \n        error.message || 'Unable to analyze symptoms. Please try again or contact support.',\n        [{ text: 'OK' }]\n      );\n      setIsAnalyzing(false);\n    },\n  });\n\n  const handleAnalyze = async () => {\n    if (!vehicle) {\n      Alert.alert('Vehicle Required', 'Please select or add a vehicle first.');\n      return;\n    }\n\n    if (!symptoms.trim()) {\n      Alert.alert('Symptoms Required', 'Please describe the issue you are experiencing.');\n      return;\n    }\n\n    setIsAnalyzing(true);\n    setDiagnosis(null);\n\n    diagnosisMutation.mutate({\n      vehicleInfo: {\n        make: vehicle.make,\n        model: vehicle.model,\n        year: vehicle.year,\n        mileage: vehicle.mileage,\n        engine: vehicle.engine,\n        vin: vehicle.vin,\n      },\n      symptoms: symptoms.trim(),\n      additionalContext: additionalContext.trim() || undefined,\n    });\n  };\n\n  const handleRequestService = (serviceType: string) => {\n    if (!vehicle) return;\n    \n    router.push({\n      pathname: '/request',\n      params: {\n        serviceType,\n        vehicleId: vehicle.id,\n        symptoms: symptoms.trim(),\n        aiDiagnosis: JSON.stringify(diagnosis),\n        urgent: diagnosis?.urgencyLevel === 'emergency' ? 'true' : 'false',\n      }\n    });\n  };\n\n  const handleCreateQuote = () => {\n    if (!diagnosis || !vehicle) return;\n    \n    // Navigate to request with pre-filled AI diagnosis data\n    router.push({\n      pathname: '/request',\n      params: {\n        serviceType: diagnosis.recommendedServiceTypes?.[0] || 'general_repair',\n        vehicleId: vehicle.id,\n        symptoms: symptoms.trim(),\n        aiDiagnosis: JSON.stringify(diagnosis),\n        urgent: diagnosis.urgencyLevel === 'emergency' ? 'true' : 'false',\n        autoQuote: 'true', // Flag to auto-generate quote\n      }\n    });\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency': return Colors.error;\n      case 'high': return Colors.warning;\n      case 'medium': return Colors.primary;\n      default: return Colors.success;\n    }\n  };\n\n  const getConfidenceIcon = (confidence: string) => {\n    switch (confidence) {\n      case 'high': return <Icons.CheckCircle size={16} color={Colors.success} />;\n      case 'medium': return <Icons.AlertCircle size={16} color={Colors.warning} />;\n      default: return <Icons.HelpCircle size={16} color={Colors.textMuted} />;\n    }\n  };\n\n  const getServiceTitle = (serviceType: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === serviceType)?.title || serviceType;\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Icons.Brain size={24} color={Colors.primary} />\n        <Text style={styles.title}>AI Diagnostic Assistant</Text>\n      </View>\n\n      <Text style={styles.subtitle}>\n        Describe your vehicle's symptoms and get AI-powered diagnostic suggestions\n      </Text>\n\n      {/* Vehicle Info Display */}\n      {vehicle && (\n        <View style={styles.vehicleInfo}>\n          <Text style={styles.vehicleText}>\n            {vehicle.year} {vehicle.make} {vehicle.model}\n            {vehicle.mileage && ` • ${vehicle.mileage.toLocaleString()} miles`}\n          </Text>\n        </View>\n      )}\n\n      {/* Symptoms Input */}\n      <View style={styles.inputSection}>\n        <Text style={styles.inputLabel}>Describe the Problem *</Text>\n        <TextInput\n          style={styles.textArea}\n          value={symptoms}\n          onChangeText={setSymptoms}\n          placeholder=\"Example: Engine makes a grinding noise when starting, especially in cold weather. The noise lasts about 5 seconds then stops...\"\n          placeholderTextColor={Colors.textMuted}\n          multiline\n          numberOfLines={4}\n          textAlignVertical=\"top\"\n        />\n      </View>\n\n      {/* Additional Context */}\n      <View style={styles.inputSection}>\n        <Text style={styles.inputLabel}>Additional Context (Optional)</Text>\n        <TextInput\n          style={styles.textInput}\n          value={additionalContext}\n          onChangeText={setAdditionalContext}\n          placeholder=\"When did it start? Any recent repairs? Driving conditions?\"\n          placeholderTextColor={Colors.textMuted}\n          multiline\n        />\n      </View>\n\n      {/* Analyze Button */}\n      <Button\n        title={isAnalyzing ? 'Analyzing...' : 'Analyze Issue'}\n        onPress={handleAnalyze}\n        disabled={isAnalyzing || !symptoms.trim() || !vehicle}\n        style={styles.analyzeButton}\n      />\n\n      {/* Loading State */}\n      {isAnalyzing && (\n        <View style={styles.loadingContainer}>\n          <LoadingSpinner />\n          <Text style={styles.loadingText}>AI is analyzing your vehicle's symptoms...</Text>\n          <Text style={styles.loadingSubtext}>This may take a few moments</Text>\n        </View>\n      )}\n\n      {/* Diagnosis Results */}\n      {diagnosis && (\n        <ScrollView style={styles.resultsContainer} showsVerticalScrollIndicator={false}>\n          <View style={styles.resultsHeader}>\n            <Text style={styles.resultsTitle}>Diagnostic Analysis Complete</Text>\n            <View style={styles.confidenceRow}>\n              {getConfidenceIcon(diagnosis.confidence)}\n              <Text style={styles.confidenceText}>\n                {diagnosis.confidence.charAt(0).toUpperCase() + diagnosis.confidence.slice(1)} Confidence\n              </Text>\n            </View>\n          </View>\n\n          {/* Urgency Level */}\n          <View style={[styles.urgencyBadge, { borderColor: getUrgencyColor(diagnosis.urgencyLevel) }]}>\n            <Icons.AlertTriangle size={16} color={getUrgencyColor(diagnosis.urgencyLevel)} />\n            <Text style={[styles.urgencyText, { color: getUrgencyColor(diagnosis.urgencyLevel) }]}>\n              {diagnosis.urgencyLevel.toUpperCase()} PRIORITY\n            </Text>\n          </View>\n\n          {/* Quick Actions */}\n          <View style={styles.quickActionsHeader}>\n            <Text style={styles.sectionTitle}>Quick Actions</Text>\n          </View>\n          <View style={styles.quickActions}>\n            <Button\n              title=\"Get Quote Now\"\n              onPress={handleCreateQuote}\n              style={styles.primaryAction}\n            />\n            <Button\n              title=\"Request Service\"\n              variant=\"outline\"\n              onPress={() => handleRequestService(diagnosis.recommendedServiceTypes?.[0] || 'general_repair')}\n              style={styles.secondaryAction}\n            />\n          </View>\n\n          {/* Likely Causes */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Most Likely Causes</Text>\n            {diagnosis.likelyCauses.map((cause, index) => (\n              <View key={index} style={styles.listItem}>\n                <View style={styles.causeNumber}>\n                  <Text style={styles.causeNumberText}>{index + 1}</Text>\n                </View>\n                <Text style={styles.listText}>{cause}</Text>\n              </View>\n            ))}\n          </View>\n\n          {/* Diagnostic Steps */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Recommended Diagnostic Steps</Text>\n            {diagnosis.diagnosticSteps.map((step, index) => (\n              <View key={index} style={styles.listItem}>\n                <Icons.CheckSquare size={16} color={Colors.primary} />\n                <Text style={styles.listText}>{step}</Text>\n              </View>\n            ))}\n          </View>\n\n          {/* Recommended Services */}\n          {diagnosis.recommendedServiceTypes && diagnosis.recommendedServiceTypes.length > 0 && (\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Recommended Services</Text>\n              {diagnosis.recommendedServiceTypes.map((serviceType, index) => (\n                <TouchableOpacity\n                  key={index}\n                  style={styles.serviceRecommendation}\n                  onPress={() => handleRequestService(serviceType)}\n                >\n                  <View style={styles.serviceInfo}>\n                    <Icons.Wrench size={16} color={Colors.primary} />\n                    <Text style={styles.serviceTitle}>{getServiceTitle(serviceType)}</Text>\n                  </View>\n                  <View style={styles.serviceAction}>\n                    <Text style={styles.serviceActionText}>Request</Text>\n                    <Icons.ChevronRight size={16} color={Colors.primary} />\n                  </View>\n                </TouchableOpacity>\n              ))}\n            </View>\n          )}\n\n          {/* Matched Services */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Related Services</Text>\n            {diagnosis.matchedServices.map((service, index) => (\n              <View key={index} style={styles.serviceItem}>\n                <Icons.Settings size={16} color={Colors.secondary} />\n                <Text style={styles.serviceText}>{service}</Text>\n              </View>\n            ))}\n          </View>\n\n          {/* Estimated Cost */}\n          {diagnosis.estimatedCost && (\n            <View style={styles.costSection}>\n              <Text style={styles.sectionTitle}>Estimated Cost Range</Text>\n              <View style={styles.costDisplay}>\n                <Text style={styles.costText}>\n                  ${diagnosis.estimatedCost.min} - ${diagnosis.estimatedCost.max}\n                </Text>\n                <Text style={styles.costNote}>\n                  *Actual costs may vary based on parts availability and labor requirements\n                </Text>\n              </View>\n            </View>\n          )}\n\n          <View style={styles.disclaimer}>\n            <Icons.Info size={16} color={Colors.textMuted} />\n            <Text style={styles.disclaimerText}>\n              This AI analysis is for informational purposes only. Professional diagnosis is recommended for accurate assessment and safety.\n            </Text>\n          </View>\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    lineHeight: 20,\n  },\n  vehicleInfo: {\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  vehicleText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  inputSection: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textArea: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 14,\n    minHeight: 80,\n  },\n  textInput: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 14,\n    minHeight: 40,\n  },\n  analyzeButton: {\n    marginBottom: 16,\n  },\n  loadingContainer: {\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginTop: 12,\n    textAlign: 'center',\n  },\n  loadingSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  resultsContainer: {\n    maxHeight: 600,\n  },\n  resultsHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  resultsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  confidenceRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  confidenceText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  urgencyBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    borderWidth: 1,\n    borderRadius: 6,\n    paddingVertical: 6,\n    paddingHorizontal: 10,\n    alignSelf: 'flex-start',\n    marginBottom: 16,\n  },\n  urgencyText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  quickActionsHeader: {\n    marginBottom: 8,\n  },\n  quickActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 20,\n  },\n  primaryAction: {\n    flex: 1,\n  },\n  secondaryAction: {\n    flex: 1,\n  },\n  section: {\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  listItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    marginBottom: 6,\n  },\n  causeNumber: {\n    backgroundColor: Colors.primary,\n    borderRadius: 10,\n    width: 20,\n    height: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 1,\n  },\n  causeNumberText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  listText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n    lineHeight: 20,\n  },\n  serviceRecommendation: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.primary + '10',\n    borderWidth: 1,\n    borderColor: Colors.primary + '30',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  serviceInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    flex: 1,\n  },\n  serviceTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  serviceAction: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  serviceActionText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  serviceItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.background,\n    padding: 8,\n    borderRadius: 6,\n    marginBottom: 4,\n  },\n  serviceText: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  costSection: {\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  costDisplay: {\n    alignItems: 'center',\n  },\n  costText: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  costNote: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontStyle: 'italic',\n    textAlign: 'center',\n  },\n  disclaimer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginTop: 8,\n  },\n  disclaimerText: {\n    flex: 1,\n    fontSize: 12,\n    color: Colors.textMuted,\n    lineHeight: 16,\n  },\n});"
            }
          }
        },
        {
          "display": "now do the push to github",
          "pastedContents": {}
        },
        {
          "display": "import { Hono } from \"hono\";\nimport { trpcServer } from \"@hono/trpc-server\";\nimport { cors } from \"hono/cors\";\nimport { appRouter } from \"./trpc/app-router\";\nimport { createContext } from \"./trpc/create-context\";\n\n// app will be mounted at /api\nconst app = new Hono();\n\n// Enable CORS for all routes\napp.use(\"*\", cors());\n\n// Mount tRPC router at /trpc\napp.use(\n  \"/trpc/*\",\n  trpcServer({\n    endpoint: \"/api/trpc\",\n    router: appRouter,\n    createContext,\n  })\n);\n\n// Simple health check endpoint\napp.get(\"/\", (c) => {\n  return c.json({ status: \"ok\", message: \"API is running\" });\n});\n\nexport default app;",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +67 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { initTRPC } from '@trpc/server';\nimport superjson from 'superjson';\n\n// Create context for tRPC\nexport const createTRPCContext = async (opts: { req?: any; res?: any }) => {\n  // Log request for monitoring in production\n  if (opts.req && !process.env.NODE_ENV?.includes('development')) {\n    console.log('tRPC request:', {\n      method: opts.req.method,\n      url: opts.req.url,\n      userAgent: opts.req.headers?.['user-agent'],\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  return {\n    req: opts.req,\n    res: opts.res,\n    // Add any other context data here\n    environment: process.env.NODE_ENV || 'development',\n    isProduction: !process.env.NODE_ENV?.includes('development'),\n  };\n};\n\nexport type Context = Awaited<ReturnType<typeof createTRPCContext>>;\n\n// Initialize tRPC\nconst t = initTRPC.context<Context>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    // Enhanced error logging for production\n    if (!process.env.NODE_ENV?.includes('development')) {\n      console.error('tRPC error:', {\n        code: error.code,\n        message: error.message,\n        cause: error.cause,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        // Don't expose internal errors in production\n        ...(process.env.NODE_ENV?.includes('development') && {\n          stack: error.stack,\n        }),\n      },\n    };\n  },\n});\n\n// Export reusable router and procedure helpers\nexport const createTRPCRouter = t.router;\nexport const publicProcedure = t.procedure;\n\n// Middleware for authentication (if needed)\nexport const protectedProcedure = t.procedure.use(async ({ ctx, next }) => {\n  // Add authentication logic here if needed\n  // For now, just pass through\n  return next({\n    ctx: {\n      ...ctx,\n      // Add user context if authenticated\n    },\n  });\n});"
            }
          }
        },
        {
          "display": "import { createTRPCRouter } from \"./create-context\";\nimport hiProcedure from \"./routes/example/hi/route\";\nimport { diagnosisProcedure } from \"./routes/diagnosis/route\";\n\nexport const appRouter = createTRPCRouter({\n  example: createTRPCRouter({\n    hi: hiProcedure\n  }),\n  diagnosis: createTRPCRouter({\n    diagnose: diagnosisProcedure\n  })\n});\n\nexport type AppRouter = typeof appRouter;",
          "pastedContents": {}
        },
        {
          "display": "import { publicProcedure } from \"../../../create-context\";\n\nconst hiProcedure = publicProcedure.query(() => {\n  return \"Hello from tRPC!\";\n});\n\nexport default hiProcedure;",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +280 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { z } from \"zod\";\nimport { publicProcedure } from \"../../create-context\";\nimport { DiagnosticResult, ServiceType } from \"@/types/service\";\n\nconst diagnosisInputSchema = z.object({\n  vehicleInfo: z.object({\n    make: z.string(),\n    model: z.string(),\n    year: z.number(),\n    mileage: z.number().optional(),\n    engine: z.string().optional(),\n    vin: z.string().optional(),\n  }),\n  symptoms: z.string(),\n  additionalContext: z.string().optional(),\n});\n\nexport const diagnosisProcedure = publicProcedure\n  .input(diagnosisInputSchema)\n  .mutation(async ({ input }): Promise<DiagnosticResult> => {\n    try {\n      // Production logging\n      console.log('AI diagnosis requested:', {\n        vehicleMake: input.vehicleInfo.make,\n        vehicleModel: input.vehicleInfo.model,\n        vehicleYear: input.vehicleInfo.year,\n        symptomsLength: input.symptoms.length,\n        timestamp: new Date().toISOString(),\n        environment: 'production'\n      });\n\n      // Prepare the AI prompt\n      const prompt = `You are an expert automotive diagnostic assistant. Analyze the following vehicle issue and provide a structured diagnosis.\n\nVehicle Information:\n- Make: ${input.vehicleInfo.make}\n- Model: ${input.vehicleInfo.model}\n- Year: ${input.vehicleInfo.year}\n- Mileage: ${input.vehicleInfo.mileage || 'Unknown'}\n- Engine: ${input.vehicleInfo.engine || 'Unknown'}\n- VIN: ${input.vehicleInfo.vin || 'Not provided'}\n\nSymptoms: ${input.symptoms}\n\n${input.additionalContext ? `Additional Context: ${input.additionalContext}` : ''}\n\nPlease provide a JSON response with the following structure:\n{\n  \"likelyCauses\": [\"cause1\", \"cause2\", \"cause3\"],\n  \"diagnosticSteps\": [\"step1\", \"step2\", \"step3\"],\n  \"matchedServices\": [\"service1\", \"service2\"],\n  \"confidence\": \"high|medium|low\",\n  \"estimatedCost\": {\"min\": 100, \"max\": 500},\n  \"urgencyLevel\": \"low|medium|high|emergency\",\n  \"recommendedServiceTypes\": [\"oil_change\", \"brake_service\", etc.]\n}\n\nFocus on practical, actionable advice. Be specific about likely causes and diagnostic steps.`;\n\n      // Production: Use OpenAI API directly if available, otherwise fallback to proxy\n      const useOpenAI = process.env.OPENAI_API_KEY;\n      const endpoint = useOpenAI \n        ? 'https://api.openai.com/v1/chat/completions'\n        : (process.env.EXPO_PUBLIC_OPENAI_ENDPOINT || 'https://toolkit.rork.com/text/llm/');\n      \n      console.log('Using AI endpoint:', { \n        endpoint: useOpenAI ? 'OpenAI Direct' : 'Toolkit Proxy',\n        hasApiKey: !!process.env.OPENAI_API_KEY,\n        environment: 'production'\n      });\n\n      // Call the AI API\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(useOpenAI && { 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` }),\n        },\n        body: JSON.stringify(\n          useOpenAI \n            ? {\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                  {\n                    role: 'system',\n                    content: 'You are an expert automotive diagnostic assistant. Always respond with valid JSON in the exact format requested. Focus on the top 3 most likely causes and provide practical diagnostic steps.'\n                  },\n                  {\n                    role: 'user',\n                    content: prompt\n                  }\n                ],\n                temperature: 0.7,\n                max_tokens: 1000,\n              }\n            : {\n                messages: [\n                  {\n                    role: 'system',\n                    content: 'You are an expert automotive diagnostic assistant. Always respond with valid JSON in the exact format requested. Focus on the top 3 most likely causes and provide practical diagnostic steps.'\n                  },\n                  {\n                    role: 'user',\n                    content: prompt\n                  }\n                ]\n              }\n        ),\n      });\n\n      if (!response.ok) {\n        console.error(`AI API request failed: ${response.status} ${response.statusText}`);\n        throw new Error(`AI service unavailable (${response.status})`);\n      }\n\n      const aiResponse = await response.json();\n      \n      // Handle different response formats based on the API used\n      let aiContent = '';\n      if (useOpenAI) {\n        // OpenAI API response format\n        aiContent = aiResponse.choices?.[0]?.message?.content || '';\n      } else {\n        // Toolkit response format\n        aiContent = aiResponse.completion || '';\n      }\n\n      if (!aiContent) {\n        console.error('Invalid AI response format:', aiResponse);\n        throw new Error('Invalid AI response format');\n      }\n\n      // Parse the AI response\n      let parsedResponse;\n      try {\n        // Try to extract JSON from the response\n        const jsonMatch = aiContent.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          parsedResponse = JSON.parse(jsonMatch[0]);\n        } else {\n          throw new Error('No JSON found in AI response');\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', parseError);\n        // Fallback to a structured response based on symptoms\n        parsedResponse = generateFallbackDiagnosis(input);\n      }\n\n      // Validate and structure the response\n      const diagnosis: DiagnosticResult = {\n        id: Date.now().toString(),\n        likelyCauses: Array.isArray(parsedResponse.likelyCauses) \n          ? parsedResponse.likelyCauses.slice(0, 3) \n          : ['General automotive issue requiring professional diagnosis'],\n        diagnosticSteps: Array.isArray(parsedResponse.diagnosticSteps) \n          ? parsedResponse.diagnosticSteps.slice(0, 5) \n          : ['Visual inspection', 'Diagnostic scan', 'Component testing'],\n        matchedServices: Array.isArray(parsedResponse.matchedServices) \n          ? parsedResponse.matchedServices.slice(0, 3) \n          : ['General repair'],\n        confidence: ['high', 'medium', 'low'].includes(parsedResponse.confidence) \n          ? parsedResponse.confidence \n          : 'medium',\n        estimatedCost: parsedResponse.estimatedCost && \n          typeof parsedResponse.estimatedCost.min === 'number' && \n          typeof parsedResponse.estimatedCost.max === 'number'\n          ? parsedResponse.estimatedCost\n          : { min: 100, max: 500 },\n        urgencyLevel: ['emergency', 'high', 'medium', 'low'].includes(parsedResponse.urgencyLevel) \n          ? parsedResponse.urgencyLevel \n          : 'medium',\n        recommendedServiceTypes: Array.isArray(parsedResponse.recommendedServiceTypes) \n          ? parsedResponse.recommendedServiceTypes\n              .filter((type: string) => \n                ['oil_change', 'brake_service', 'tire_service', 'battery_service', \n                 'engine_diagnostic', 'transmission', 'ac_service', 'general_repair', \n                 'emergency_roadside'].includes(type)\n              )\n              .slice(0, 3) as ServiceType[]\n          : ['general_repair'] as ServiceType[],\n        createdAt: new Date(),\n      };\n\n      // Production logging\n      console.log('AI diagnosis completed:', {\n        diagnosisId: diagnosis.id,\n        confidence: diagnosis.confidence,\n        urgencyLevel: diagnosis.urgencyLevel,\n        causesCount: diagnosis.likelyCauses.length,\n        servicesCount: diagnosis.recommendedServiceTypes?.length || 0,\n        timestamp: new Date().toISOString()\n      });\n\n      return diagnosis;\n\n    } catch (error) {\n      console.error('Diagnosis error:', error);\n      \n      // Production error logging\n      console.error('AI diagnosis failed:', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        vehicleMake: input.vehicleInfo.make,\n        vehicleModel: input.vehicleInfo.model,\n        timestamp: new Date().toISOString(),\n        environment: 'production'\n      });\n      \n      // Return a fallback diagnosis with user-friendly error message\n      const fallback = generateFallbackDiagnosis(input);\n      fallback.likelyCauses = [\n        'AI diagnostic service temporarily unavailable',\n        'Manual inspection recommended',\n        'Contact professional mechanic for assessment'\n      ];\n      fallback.confidence = 'low';\n      \n      return fallback;\n    }\n  });\n\nfunction generateFallbackDiagnosis(input: any): DiagnosticResult {\n  // Generate a basic diagnosis based on common symptoms\n  const symptoms = input.symptoms.toLowerCase();\n  \n  let likelyCauses = ['General automotive issue requiring professional diagnosis'];\n  let urgencyLevel: 'low' | 'medium' | 'high' | 'emergency' = 'medium';\n  let recommendedServiceTypes: ServiceType[] = ['general_repair'];\n  let estimatedCost = { min: 100, max: 500 };\n\n  // Basic symptom matching\n  if (symptoms.includes('noise') || symptoms.includes('grinding') || symptoms.includes('squealing')) {\n    likelyCauses = ['Worn brake pads', 'Belt issues', 'Bearing problems'];\n    recommendedServiceTypes = ['brake_service', 'general_repair'];\n    urgencyLevel = 'high';\n    estimatedCost = { min: 150, max: 800 };\n  } else if (symptoms.includes('oil') || symptoms.includes('leak')) {\n    likelyCauses = ['Oil leak', 'Worn seals', 'Drain plug issues'];\n    recommendedServiceTypes = ['oil_change', 'general_repair'];\n    urgencyLevel = 'medium';\n    estimatedCost = { min: 50, max: 300 };\n  } else if (symptoms.includes('battery') || symptoms.includes('start') || symptoms.includes('electrical')) {\n    likelyCauses = ['Weak battery', 'Alternator issues', 'Starter problems'];\n    recommendedServiceTypes = ['battery_service', 'engine_diagnostic'];\n    urgencyLevel = 'high';\n    estimatedCost = { min: 100, max: 600 };\n  } else if (symptoms.includes('tire') || symptoms.includes('vibration')) {\n    likelyCauses = ['Tire wear', 'Wheel alignment', 'Suspension issues'];\n    recommendedServiceTypes = ['tire_service', 'general_repair'];\n    urgencyLevel = 'medium';\n    estimatedCost = { min: 80, max: 400 };\n  } else if (symptoms.includes('engine') || symptoms.includes('performance')) {\n    likelyCauses = ['Engine performance issue', 'Fuel system problem', 'Ignition system fault'];\n    recommendedServiceTypes = ['engine_diagnostic', 'general_repair'];\n    urgencyLevel = 'high';\n    estimatedCost = { min: 200, max: 1000 };\n  }\n\n  console.log('Generated fallback diagnosis:', {\n    symptoms: symptoms.substring(0, 50),\n    urgencyLevel,\n    serviceTypes: recommendedServiceTypes,\n    timestamp: new Date().toISOString()\n  });\n\n  return {\n    id: Date.now().toString(),\n    likelyCauses,\n    diagnosticSteps: [\n      'Visual inspection of the affected area',\n      'Diagnostic scan for error codes',\n      'Component testing and measurement',\n      'Road test if safe to do so'\n    ],\n    matchedServices: ['Professional diagnostic', 'Repair service'],\n    confidence: 'low',\n    estimatedCost,\n    urgencyLevel,\n    recommendedServiceTypes: recommendedServiceTypes || ['general_repair'],\n    createdAt: new Date(),\n  };\n}"
            }
          }
        },
        {
          "display": "hold off on the github push, we'll go a bit more before the next push",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +93 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\n\nexport default function DevSwitcherScreen() {\n  // Always redirect to auth in production\n  React.useEffect(() => {\n    router.replace('/auth');\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.productionBanner}>\n        <Icons.Shield size={24} color={Colors.success} />\n        <Text style={styles.productionText}>PRODUCTION MODE</Text>\n      </View>\n      \n      <View style={styles.content}>\n        <Text style={styles.title}>Redirecting to Login</Text>\n        <Text style={styles.subtitle}>\n          Please use the main authentication screen to access the app.\n        </Text>\n        \n        <View style={styles.infoCard}>\n          <Icons.Info size={20} color={Colors.primary} />\n          <Text style={styles.infoText}>\n            Development features are disabled in production mode.\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n    padding: 20,\n    justifyContent: 'center',\n  },\n  productionBanner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.success + '20',\n    borderWidth: 1,\n    borderColor: Colors.success,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 40,\n    gap: 8,\n  },\n  productionText: {\n    color: Colors.success,\n    fontWeight: '600',\n    fontSize: 16,\n  },\n  content: {\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 12,\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n    marginBottom: 32,\n  },\n  infoCard: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    gap: 12,\n  },\n  infoText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n    lineHeight: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "import { Link, Stack } from \"expo-router\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: \"Oops!\" }} />\n      <View style={styles.container}>\n        <Text style={styles.title}>This screen doesn't exist.</Text>\n\n        <Link href=\"/\" style={styles.link}>\n          <Text style={styles.linkText}>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +60 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { useFonts } from 'expo-font';\nimport { Stack } from 'expo-router';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { Colors } from '@/constants/colors';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { trpc, trpcClient } from '@/lib/trpc';\n\nexport const unstable_settings = {\n  initialRouteName: 'auth',\n};\n\nSplashScreen.preventAutoHideAsync();\n\nconst queryClient = new QueryClient();\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({});\n\n  useEffect(() => {\n    if (error) {\n      console.error('Font loading error:', error);\n      throw error;\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (loaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded]);\n\n  if (!loaded) {\n    return null;\n  }\n\n  return (\n    <trpc.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>\n        <StatusBar style=\"light\" backgroundColor={Colors.background} />\n        <Stack\n          screenOptions={{\n            headerStyle: {\n              backgroundColor: Colors.background,\n            },\n            headerTintColor: Colors.text,\n            headerTitleStyle: {\n              fontWeight: '600',\n            },\n            headerBackTitle: 'Back',\n          }}\n        >\n          <Stack.Screen name=\"auth\" options={{ headerShown: false }} />\n          <Stack.Screen name=\"(customer)\" options={{ headerShown: false }} />\n          <Stack.Screen name=\"(mechanic)\" options={{ headerShown: false }} />\n        </Stack>\n      </QueryClientProvider>\n    </trpc.Provider>\n  );\n}"
            }
          }
        },
        {
          "display": "[Pasted text #1 +384 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, TextInput, Alert, TouchableOpacity, ScrollView } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { validateEmail, validatePassword, PRODUCTION_CONFIG } from '@/utils/firebase-config';\nimport * as Icons from 'lucide-react-native';\n\nexport default function AuthScreen() {\n  const { login, signup, isLoading, isAuthenticated, user } = useAuthStore();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Production logging\n      console.log('User authenticated:', { userId: user.id, role: user.role, timestamp: new Date() });\n      \n      // Redirect based on role\n      if (user.role === 'customer') {\n        router.replace('/(customer)');\n      } else if (user.role === 'mechanic' && user.id === 'mechanic-cody') {\n        router.replace('/(mechanic)');\n      } else {\n        // Invalid role or unauthorized mechanic\n        console.warn('Invalid role or unauthorized access:', { userId: user.id, role: user.role });\n        Alert.alert('Access Denied', 'You do not have permission to access this application.');\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  const handleAuth = async () => {\n    if (!email.trim() || !password.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    if (!isLoginMode) {\n      // Sign up validation\n      if (!firstName.trim() || !lastName.trim()) {\n        Alert.alert('Error', 'Please enter your first and last name');\n        return;\n      }\n\n      // Email validation\n      if (!validateEmail(email.trim())) {\n        Alert.alert('Error', 'Please enter a valid email address');\n        return;\n      }\n\n      // Password validation\n      const passwordValidation = validatePassword(password);\n      if (!passwordValidation.isValid) {\n        Alert.alert('Error', passwordValidation.errors.join('\\n'));\n        return;\n      }\n    }\n\n    // Production logging\n    console.log('Authentication attempt:', { \n      email: email.trim(), \n      mode: isLoginMode ? 'login' : 'signup',\n      timestamp: new Date() \n    });\n\n    let success = false;\n    \n    if (isLoginMode) {\n      success = await login(email.trim(), password);\n      if (!success) {\n        Alert.alert('Login Failed', 'Invalid email or password. Please try again.');\n      }\n    } else {\n      success = await signup(email.trim(), password, firstName.trim(), lastName.trim(), phone.trim() || undefined);\n      if (!success) {\n        Alert.alert('Sign Up Failed', 'An account with this email already exists. Please try logging in instead.');\n      }\n    }\n\n    if (!success) {\n      console.log('Authentication failed:', { \n        email: email.trim(), \n        mode: isLoginMode ? 'login' : 'signup',\n        timestamp: new Date() \n      });\n    }\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  };\n\n  const switchMode = () => {\n    setIsLoginMode(!isLoginMode);\n    resetForm();\n  };\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <View style={styles.header}>\n        <View style={styles.logoContainer}>\n          <Text style={styles.logoText}>Heinicus</Text>\n          <Text style={styles.logoSubtext}>Mobile Mechanic</Text>\n        </View>\n        <Text style={styles.subtitle}>\n          Professional automotive service at your location\n        </Text>\n      </View>\n\n      <View style={styles.form}>\n        <Text style={styles.formTitle}>\n          {isLoginMode ? 'Welcome Back' : 'Create Your Account'}\n        </Text>\n        <Text style={styles.formSubtitle}>\n          {isLoginMode \n            ? 'Sign in to access your account' \n            : 'Join thousands of satisfied customers'\n          }\n        </Text>\n\n        {!isLoginMode && (\n          <>\n            <View style={styles.nameRow}>\n              <View style={[styles.inputGroup, styles.nameInput]}>\n                <Text style={styles.inputLabel}>First Name *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={firstName}\n                  onChangeText={setFirstName}\n                  placeholder=\"John\"\n                  placeholderTextColor={Colors.textMuted}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                />\n              </View>\n              <View style={[styles.inputGroup, styles.nameInput]}>\n                <Text style={styles.inputLabel}>Last Name *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={lastName}\n                  onChangeText={setLastName}\n                  placeholder=\"Doe\"\n                  placeholderTextColor={Colors.textMuted}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                />\n              </View>\n            </View>\n          </>\n        )}\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.inputLabel}>Email Address *</Text>\n          <TextInput\n            style={styles.input}\n            value={email}\n            onChangeText={setEmail}\n            placeholder=\"john@example.com\"\n            placeholderTextColor={Colors.textMuted}\n            keyboardType=\"email-address\"\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n          />\n        </View>\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.inputLabel}>Password *</Text>\n          <TextInput\n            style={styles.input}\n            value={password}\n            onChangeText={setPassword}\n            placeholder={isLoginMode ? \"Enter your password\" : \"Create a password (min 6 characters)\"}\n            placeholderTextColor={Colors.textMuted}\n            secureTextEntry\n          />\n        </View>\n\n        {!isLoginMode && (\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Phone Number (Optional)</Text>\n            <TextInput\n              style={styles.input}\n              value={phone}\n              onChangeText={setPhone}\n              placeholder=\"(555) 123-4567\"\n              placeholderTextColor={Colors.textMuted}\n              keyboardType=\"phone-pad\"\n            />\n          </View>\n        )}\n\n        <Button\n          title={\n            isLoading \n              ? (isLoginMode ? 'Signing In...' : 'Creating Account...') \n              : (isLoginMode ? 'Sign In' : 'Create Account')\n          }\n          onPress={handleAuth}\n          disabled={isLoading}\n          style={styles.authButton}\n        />\n\n        <TouchableOpacity\n          style={styles.switchModeButton}\n          onPress={switchMode}\n          disabled={isLoading}\n        >\n          <Text style={styles.switchModeText}>\n            {isLoginMode \n              ? \"Don't have an account? Create one\" \n              : 'Already have an account? Sign in'\n            }\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Production Info */}\n      <View style={styles.productionInfo}>\n        <View style={styles.productionBadge}>\n          <Icons.Shield size={16} color={Colors.success} />\n          <Text style={styles.productionText}>SECURE & TRUSTED</Text>\n        </View>\n        <Text style={styles.productionSubtext}>\n          Licensed mechanic • Secure payments • Professional service\n        </Text>\n        \n        {!isLoginMode && (\n          <View style={styles.signupBenefits}>\n            <View style={styles.benefitItem}>\n              <Icons.Check size={16} color={Colors.success} />\n              <Text style={styles.benefitText}>Free quotes and estimates</Text>\n            </View>\n            <View style={styles.benefitItem}>\n              <Icons.Check size={16} color={Colors.success} />\n              <Text style={styles.benefitText}>Service at your location</Text>\n            </View>\n            <View style={styles.benefitItem}>\n              <Icons.Check size={16} color={Colors.success} />\n              <Text style={styles.benefitText}>Professional certified mechanic</Text>\n            </View>\n          </View>\n        )}\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  contentContainer: {\n    padding: 20,\n    paddingBottom: 40,\n  },\n  header: {\n    alignItems: 'center',\n    marginTop: 60,\n    marginBottom: 40,\n  },\n  logoContainer: {\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  logoText: {\n    fontSize: 36,\n    fontWeight: '700',\n    color: Colors.primary,\n    letterSpacing: 1,\n  },\n  logoSubtext: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  form: {\n    marginBottom: 40,\n  },\n  formTitle: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  formSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  nameRow: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  nameInput: {\n    flex: 1,\n  },\n  inputGroup: {\n    marginBottom: 20,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    color: Colors.text,\n    fontSize: 16,\n  },\n  authButton: {\n    marginTop: 8,\n    marginBottom: 16,\n  },\n  switchModeButton: {\n    alignItems: 'center',\n    padding: 8,\n  },\n  switchModeText: {\n    color: Colors.primary,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  productionInfo: {\n    alignItems: 'center',\n    marginTop: 'auto',\n  },\n  productionBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.success + '20',\n    borderWidth: 1,\n    borderColor: Colors.success,\n    borderRadius: 6,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginBottom: 8,\n  },\n  productionText: {\n    fontSize: 12,\n    color: Colors.success,\n    fontWeight: '600',\n  },\n  productionSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  signupBenefits: {\n    gap: 8,\n  },\n  benefitItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  benefitText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +449 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { useAppStore } from '@/stores/app-store';\nimport * as Icons from 'lucide-react-native';\nimport { NotificationSettings } from '@/components/NotificationSettings';\nimport { AvailabilitySettings } from '@/components/AvailabilitySettings';\nimport { ServicePricingSettings } from '@/components/ServicePricingSettings';\nimport { ToolsEquipmentSettings } from '@/components/ToolsEquipmentSettings';\nimport { ReportsAnalytics } from '@/components/ReportsAnalytics';\n\ntype SettingsScreen = 'main' | 'availability' | 'notifications' | 'pricing' | 'tools' | 'reports';\n\nexport default function MechanicProfileScreen() {\n  const { user, logout } = useAuthStore();\n  const { serviceRequests, quotes } = useAppStore();\n  const [currentScreen, setCurrentScreen] = useState<SettingsScreen>('main');\n\n  const completedJobs = serviceRequests.filter(r => r.status === 'completed').length;\n  const totalRevenue = quotes\n    .filter(q => q.status === 'accepted' && q.paidAt)\n    .reduce((sum, q) => sum + q.totalCost, 0);\n  const averageRating = 4.8; // Mock rating\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Sign Out', style: 'destructive', onPress: logout },\n      ]\n    );\n  };\n\n  const handleSettingsChange = (settingsType: string, settings: any) => {\n    console.log(`${settingsType} settings updated:`, settings);\n    // Here you would typically save to your store or backend\n  };\n\n  const settingsOptions = [\n    {\n      id: 'availability',\n      title: 'Availability Settings',\n      subtitle: 'Set your working hours and availability',\n      icon: 'Clock',\n      onPress: () => setCurrentScreen('availability'),\n    },\n    {\n      id: 'notifications',\n      title: 'Notifications',\n      subtitle: 'Manage your notification preferences',\n      icon: 'Bell',\n      onPress: () => setCurrentScreen('notifications'),\n    },\n    {\n      id: 'pricing',\n      title: 'Service Pricing',\n      subtitle: 'Update your service rates and pricing',\n      icon: 'DollarSign',\n      onPress: () => setCurrentScreen('pricing'),\n    },\n    {\n      id: 'tools',\n      title: 'Tools & Equipment',\n      subtitle: 'Manage your available tools and equipment',\n      icon: 'Wrench',\n      onPress: () => setCurrentScreen('tools'),\n    },\n    {\n      id: 'reports',\n      title: 'Reports & Analytics',\n      subtitle: 'View your performance and earnings reports',\n      icon: 'BarChart3',\n      onPress: () => setCurrentScreen('reports'),\n    },\n  ];\n\n  const renderSettingsScreen = () => {\n    switch (currentScreen) {\n      case 'availability':\n        return (\n          <AvailabilitySettings \n            onSettingsChange={(settings) => handleSettingsChange('availability', settings)}\n          />\n        );\n      case 'notifications':\n        return (\n          <NotificationSettings \n            onSettingsChange={(settings) => handleSettingsChange('notifications', settings)}\n          />\n        );\n      case 'pricing':\n        return (\n          <ServicePricingSettings \n            onSettingsChange={(settings) => handleSettingsChange('pricing', settings)}\n          />\n        );\n      case 'tools':\n        return (\n          <ToolsEquipmentSettings \n            onSettingsChange={(settings) => handleSettingsChange('tools', settings)}\n          />\n        );\n      case 'reports':\n        return (\n          <ReportsAnalytics \n            mechanicId={user?.id || 'mechanic-cody'}\n          />\n        );\n      default:\n        return renderMainProfile();\n    }\n  };\n\n  const renderMainProfile = () => (\n    <>\n      {/* Profile Header */}\n      <View style={styles.profileHeader}>\n        <View style={styles.avatarContainer}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </Text>\n          </View>\n          <View style={styles.statusIndicator} />\n        </View>\n        \n        <View style={styles.profileInfo}>\n          <Text style={styles.profileName}>{user?.firstName} {user?.lastName}</Text>\n          <Text style={styles.profileEmail}>{user?.email}</Text>\n          <View style={styles.roleBadge}>\n            <Icons.Wrench size={12} color={Colors.mechanic} />\n            <Text style={styles.roleText}>Certified Mechanic</Text>\n          </View>\n        </View>\n        \n        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n          <Icons.LogOut size={20} color={Colors.error} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Stats Cards */}\n      <View style={styles.statsSection}>\n        <Text style={styles.sectionTitle}>Performance Overview</Text>\n        <View style={styles.statsGrid}>\n          <View style={styles.statCard}>\n            <Icons.CheckCircle size={24} color={Colors.success} />\n            <Text style={styles.statNumber}>{completedJobs}</Text>\n            <Text style={styles.statLabel}>Jobs Completed</Text>\n          </View>\n          \n          <View style={styles.statCard}>\n            <Icons.DollarSign size={24} color={Colors.primary} />\n            <Text style={styles.statNumber}>${totalRevenue}</Text>\n            <Text style={styles.statLabel}>Total Earnings</Text>\n          </View>\n          \n          <View style={styles.statCard}>\n            <Icons.Star size={24} color={Colors.warning} />\n            <Text style={styles.statNumber}>{averageRating}</Text>\n            <Text style={styles.statLabel}>Average Rating</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Settings */}\n      <View style={styles.settingsSection}>\n        <Text style={styles.sectionTitle}>Settings</Text>\n        <View style={styles.settingsList}>\n          {settingsOptions.map((option) => {\n            const IconComponent = Icons[option.icon as keyof typeof Icons] as any;\n            return (\n              <TouchableOpacity\n                key={option.id}\n                style={styles.settingItem}\n                onPress={option.onPress}\n              >\n                <View style={styles.settingIcon}>\n                  {IconComponent && <IconComponent size={20} color={Colors.mechanic} />}\n                </View>\n                \n                <View style={styles.settingContent}>\n                  <Text style={styles.settingTitle}>{option.title}</Text>\n                  <Text style={styles.settingSubtitle}>{option.subtitle}</Text>\n                </View>\n                \n                <Icons.ChevronRight size={20} color={Colors.textMuted} />\n              </TouchableOpacity>\n            );\n          })}\n        </View>\n      </View>\n\n      {/* Support Section */}\n      <View style={styles.supportSection}>\n        <Text style={styles.sectionTitle}>Support</Text>\n        <View style={styles.supportList}>\n          <TouchableOpacity style={styles.supportItem}>\n            <Icons.HelpCircle size={20} color={Colors.primary} />\n            <Text style={styles.supportText}>Help & FAQ</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.supportItem}>\n            <Icons.MessageCircle size={20} color={Colors.primary} />\n            <Text style={styles.supportText}>Contact Support</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.supportItem}>\n            <Icons.FileText size={20} color={Colors.primary} />\n            <Text style={styles.supportText}>Terms & Privacy</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header with Back Button */}\n      {currentScreen !== 'main' && (\n        <View style={styles.header}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setCurrentScreen('main')}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>\n            {settingsOptions.find(opt => opt.id === currentScreen)?.title || 'Settings'}\n          </Text>\n          <View style={styles.headerSpacer} />\n        </View>\n      )}\n\n      <ScrollView \n        style={styles.scrollView} \n        contentContainerStyle={styles.content}\n        showsVerticalScrollIndicator={false}\n      >\n        {renderSettingsScreen()}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  backButton: {\n    padding: 4,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  headerSpacer: {\n    width: 32,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    padding: 20,\n  },\n  profileHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 20,\n    borderRadius: 12,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  avatarContainer: {\n    position: 'relative',\n    marginRight: 16,\n  },\n  avatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: Colors.mechanic + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  avatarText: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.mechanic,\n  },\n  statusIndicator: {\n    position: 'absolute',\n    bottom: 2,\n    right: 2,\n    width: 16,\n    height: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.success,\n    borderWidth: 2,\n    borderColor: Colors.card,\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  profileName: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  profileEmail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  roleBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    alignSelf: 'flex-start',\n    gap: 4,\n  },\n  roleText: {\n    fontSize: 12,\n    color: Colors.mechanic,\n    fontWeight: '600',\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  statsSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  statNumber: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text,\n    marginTop: 8,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n  },\n  settingsSection: {\n    marginBottom: 24,\n  },\n  settingsList: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  settingIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.mechanic + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  settingSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  supportSection: {\n    marginBottom: 20,\n  },\n  supportList: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  supportItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    gap: 12,\n  },\n  supportText: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +368 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, Dimensions } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\nimport { Platform } from 'react-native';\n\nconst { width } = Dimensions.get('window');\n\nexport default function MechanicMapScreen() {\n  const { serviceRequests, currentLocation } = useAppStore();\n  const [selectedRequest, setSelectedRequest] = useState<string | null>(null);\n\n  const activeRequests = serviceRequests.filter(r => \n    ['pending', 'quoted', 'accepted', 'in_progress'].includes(r.status) && r.location\n  );\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return Colors.warning;\n      case 'quoted': return Colors.primary;\n      case 'accepted': return Colors.success;\n      case 'in_progress': return Colors.mechanic;\n      default: return Colors.textMuted;\n    }\n  };\n\n  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n    const R = 3959; // Earth's radius in miles\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  };\n\n  const openInMaps = (latitude: number, longitude: number, address?: string) => {\n    const label = address || 'Service Location';\n    \n    if (Platform.OS === 'web') {\n      const url = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n      window.open(url, '_blank');\n    } else {\n      // For mobile, you would use Linking.openURL with platform-specific map URLs\n      console.log('Open maps:', { latitude, longitude, label });\n    }\n  };\n\n  if (activeRequests.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.MapPin size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Active Service Locations</Text>\n        <Text style={styles.emptyText}>\n          Service requests with locations will appear here once submitted.\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Mock Map Area */}\n      <View style={styles.mapContainer}>\n        <View style={styles.mapPlaceholder}>\n          <Icons.Map size={48} color={Colors.textMuted} />\n          <Text style={styles.mapPlaceholderText}>Interactive Map</Text>\n          <Text style={styles.mapPlaceholderSubtext}>\n            In production, this would show Google Maps with service location pins\n          </Text>\n        </View>\n\n        {/* Current Location Indicator */}\n        {currentLocation && (\n          <View style={styles.currentLocationCard}>\n            <Icons.Navigation size={16} color={Colors.mechanic} />\n            <Text style={styles.currentLocationText}>\n              Your Location: {currentLocation.address || 'Current Position'}\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {/* Service Requests List */}\n      <ScrollView style={styles.requestsList} showsVerticalScrollIndicator={false}>\n        <Text style={styles.listTitle}>Service Locations ({activeRequests.length})</Text>\n        \n        {activeRequests.map((request) => {\n          const distance = currentLocation && request.location ? \n            calculateDistance(\n              currentLocation.latitude, \n              currentLocation.longitude,\n              request.location.latitude,\n              request.location.longitude\n            ) : null;\n\n          return (\n            <TouchableOpacity\n              key={request.id}\n              style={[\n                styles.requestCard,\n                selectedRequest === request.id && styles.requestCardSelected\n              ]}\n              onPress={() => setSelectedRequest(selectedRequest === request.id ? null : request.id)}\n            >\n              <View style={styles.requestHeader}>\n                <View style={styles.requestInfo}>\n                  <Text style={styles.requestTitle}>\n                    {getServiceTitle(request.type)}\n                  </Text>\n                  <View style={styles.requestMeta}>\n                    <View style={[styles.statusDot, { backgroundColor: getStatusColor(request.status) }]} />\n                    <Text style={styles.requestStatus}>{request.status.replace('_', ' ')}</Text>\n                    {distance && (\n                      <>\n                        <Text style={styles.metaDivider}>•</Text>\n                        <Text style={styles.requestDistance}>{distance.toFixed(1)} mi</Text>\n                      </>\n                    )}\n                    {request.urgency === 'emergency' && (\n                      <>\n                        <Text style={styles.metaDivider}>•</Text>\n                        <Icons.AlertTriangle size={12} color={Colors.error} />\n                        <Text style={styles.emergencyText}>Emergency</Text>\n                      </>\n                    )}\n                  </View>\n                </View>\n                <TouchableOpacity\n                  style={styles.directionsButton}\n                  onPress={() => request.location && openInMaps(\n                    request.location.latitude,\n                    request.location.longitude,\n                    request.location.address\n                  )}\n                >\n                  <Icons.Navigation size={20} color={Colors.mechanic} />\n                </TouchableOpacity>\n              </View>\n\n              <View style={styles.locationInfo}>\n                <Icons.MapPin size={14} color={Colors.textMuted} />\n                <Text style={styles.locationText}>\n                  {request.location?.address || `${request.location?.latitude.toFixed(4)}, ${request.location?.longitude.toFixed(4)}`}\n                </Text>\n              </View>\n\n              {selectedRequest === request.id && (\n                <View style={styles.requestDetails}>\n                  <Text style={styles.requestDescription} numberOfLines={3}>\n                    {request.description}\n                  </Text>\n                  \n                  <View style={styles.requestActions}>\n                    <TouchableOpacity style={styles.actionButton}>\n                      <Icons.Phone size={16} color={Colors.mechanic} />\n                      <Text style={styles.actionButtonText}>Call Customer</Text>\n                    </TouchableOpacity>\n                    \n                    <TouchableOpacity style={styles.actionButton}>\n                      <Icons.MessageCircle size={16} color={Colors.mechanic} />\n                      <Text style={styles.actionButtonText}>Chat</Text>\n                    </TouchableOpacity>\n                  </View>\n                </View>\n              )}\n            </TouchableOpacity>\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  mapContainer: {\n    height: 250,\n    backgroundColor: Colors.card,\n    position: 'relative',\n  },\n  mapPlaceholder: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.surface,\n  },\n  mapPlaceholderText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 12,\n  },\n  mapPlaceholderSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    marginTop: 4,\n    paddingHorizontal: 20,\n  },\n  currentLocationCard: {\n    position: 'absolute',\n    top: 16,\n    left: 16,\n    right: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    shadowColor: Colors.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  currentLocationText: {\n    fontSize: 14,\n    color: Colors.text,\n    flex: 1,\n  },\n  requestsList: {\n    flex: 1,\n    padding: 16,\n  },\n  listTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  requestCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  requestCardSelected: {\n    borderColor: Colors.mechanic,\n    backgroundColor: Colors.mechanic + '10',\n  },\n  requestHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  requestInfo: {\n    flex: 1,\n  },\n  requestTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  requestMeta: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  statusDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n  requestStatus: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textTransform: 'capitalize',\n  },\n  metaDivider: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  requestDistance: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  emergencyText: {\n    fontSize: 12,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  directionsButton: {\n    padding: 8,\n    backgroundColor: Colors.mechanic + '20',\n    borderRadius: 8,\n  },\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    marginBottom: 8,\n  },\n  locationText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    flex: 1,\n  },\n  requestDetails: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 12,\n    marginTop: 8,\n  },\n  requestDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  requestActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  actionButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +1194 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SERVICE_CATEGORIES, SERVICE_TOOLS } from '@/constants/services';\nimport { ServiceRequest } from '@/types/service';\nimport { ChatComponent } from '@/components/ChatComponent';\nimport { WorkTimer } from '@/components/WorkTimer';\nimport { SignatureCapture } from '@/components/SignatureCapture';\nimport * as Icons from 'lucide-react-native';\n\nexport default function MechanicJobsScreen() {\n  const { \n    serviceRequests, \n    updateServiceRequest, \n    addJobLog, \n    getJobLogs, \n    getActiveJobTimer,\n    updateJobTools,\n    completeToolsCheck,\n    getJobToolsStatus,\n    logEvent\n  } = useAppStore();\n  const { user } = useAuthStore();\n  const [selectedTab, setSelectedTab] = useState<'pending' | 'active' | 'completed'>('pending');\n  const [selectedRequestForChat, setSelectedRequestForChat] = useState<string | null>(null);\n  const [selectedRequestForTimer, setSelectedRequestForTimer] = useState<string | null>(null);\n  const [selectedRequestForSignature, setSelectedRequestForSignature] = useState<string | null>(null);\n  const [selectedRequestForTools, setSelectedRequestForTools] = useState<string | null>(null);\n\n  // Production: Filter jobs for Cody only\n  const mechanicId = 'mechanic-cody';\n  const mechanicJobs = serviceRequests.filter(job => {\n    // In production, only show jobs assigned to Cody or unassigned jobs\n    return !job.assignedMechanicId || job.assignedMechanicId === mechanicId;\n  });\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return Colors.warning;\n      case 'quoted': return Colors.primary;\n      case 'accepted': return Colors.success;\n      case 'in_progress': return Colors.mechanic;\n      case 'completed': return Colors.success;\n      default: return Colors.textMuted;\n    }\n  };\n\n  const filteredJobs = mechanicJobs.filter(job => {\n    switch (selectedTab) {\n      case 'pending':\n        return job.status === 'pending' || job.status === 'quoted';\n      case 'active':\n        return job.status === 'accepted' || job.status === 'in_progress';\n      case 'completed':\n        return job.status === 'completed';\n      default:\n        return false;\n    }\n  });\n\n  const handleClaimJob = (jobId: string) => {\n    Alert.alert(\n      'Claim Job',\n      'Do you want to claim this job?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Claim',\n          onPress: () => {\n            logEvent('job_claimed', { jobId, mechanicId });\n            \n            // Set up required tools for this job\n            const job = serviceRequests.find(j => j.id === jobId);\n            if (job) {\n              const serviceCategory = SERVICE_CATEGORIES.find(s => s.id === job.type);\n              const requiredTools = serviceCategory?.requiredTools.map(tool => tool.id) || [];\n              \n              updateServiceRequest(jobId, { \n                status: 'in_progress',\n                assignedMechanicId: mechanicId,\n                claimedAt: new Date(),\n                requiredTools\n              });\n            }\n            \n            Alert.alert('Job Claimed', 'You have successfully claimed this job. Check your tools before starting work.');\n          }\n        }\n      ]\n    );\n  };\n\n  const handleCompleteJob = (jobId: string) => {\n    const jobLogs = getJobLogs(jobId);\n    const activeTimer = getActiveJobTimer(jobId);\n    const job = serviceRequests.find(j => j.id === jobId);\n    const toolsStatus = getJobToolsStatus(jobId);\n    \n    // Check if there are work logs\n    if (jobLogs.length === 0) {\n      Alert.alert(\n        'Work Timer Required',\n        'Please log work time using the timer before completing this job.',\n        [{ text: 'OK' }]\n      );\n      return;\n    }\n\n    // Check if timer is still running\n    if (activeTimer) {\n      Alert.alert(\n        'Timer Still Running',\n        'Please stop the work timer before completing this job.',\n        [{ text: 'OK' }]\n      );\n      return;\n    }\n\n    // Check if signature is required and present\n    if (!job?.signatureData) {\n      Alert.alert(\n        'Signature Required',\n        'Customer signature is required to complete this job.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { text: 'Get Signature', onPress: () => setSelectedRequestForSignature(jobId) }\n        ]\n      );\n      return;\n    }\n\n    // Check if tools check is completed\n    if (!job?.toolsCheckCompletedAt) {\n      Alert.alert(\n        'Tools Check Required',\n        'Please complete the tools check before finishing this job.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { text: 'Check Tools', onPress: () => setSelectedRequestForTools(jobId) }\n        ]\n      );\n      return;\n    }\n\n    // All requirements met, complete the job\n    Alert.alert(\n      'Complete Job',\n      'Mark this job as completed?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Complete',\n          onPress: () => {\n            logEvent('job_completed', { \n              jobId, \n              mechanicId, \n              totalWorkTime: jobLogs.reduce((total, log) => {\n                if (log.endTime) {\n                  return total + (log.endTime.getTime() - log.startTime.getTime()) / (1000 * 60);\n                }\n                return total;\n              }, 0)\n            });\n            \n            updateServiceRequest(jobId, { \n              status: 'completed',\n              completedAt: new Date(),\n              completedBy: mechanicId\n            });\n            Alert.alert('Job Completed', 'Job has been marked as completed.');\n          }\n        }\n      ]\n    );\n  };\n\n  const handleWorkComplete = (jobId: string, workLog: any) => {\n    logEvent('work_timer_stopped', { \n      jobId, \n      mechanicId, \n      duration: workLog.endTime ? (workLog.endTime.getTime() - workLog.startTime.getTime()) / (1000 * 60) : 0\n    });\n    \n    addJobLog(workLog);\n    setSelectedRequestForTimer(null);\n    \n    // Check if signature is still needed\n    const job = serviceRequests.find(j => j.id === jobId);\n    if (!job?.signatureData) {\n      Alert.alert(\n        'Work Logged',\n        'Work time has been logged. Customer signature is required to complete the job.',\n        [\n          { text: 'Later', style: 'cancel' },\n          { text: 'Get Signature', onPress: () => setSelectedRequestForSignature(jobId) }\n        ]\n      );\n    } else {\n      Alert.alert('Work Logged', 'Work time has been logged successfully.');\n    }\n  };\n\n  const handleSignatureComplete = (jobId: string, signatureData: string) => {\n    logEvent('signature_captured', { jobId, mechanicId });\n    \n    updateServiceRequest(jobId, { \n      signatureData,\n      signatureCapturedAt: new Date(),\n      signatureCapturedBy: mechanicId\n    });\n    setSelectedRequestForSignature(null);\n    \n    // Check if we can auto-complete the job\n    const jobLogs = getJobLogs(jobId);\n    const job = serviceRequests.find(j => j.id === jobId);\n    if (jobLogs.length > 0 && job?.toolsCheckCompletedAt) {\n      Alert.alert(\n        'Signature Captured',\n        'Customer signature has been captured. Complete the job now?',\n        [\n          { text: 'Later', style: 'cancel' },\n          { \n            text: 'Complete Job', \n            onPress: () => {\n              updateServiceRequest(jobId, { \n                status: 'completed',\n                completedAt: new Date(),\n                completedBy: mechanicId\n              });\n              Alert.alert('Job Completed', 'Job has been completed successfully.');\n            }\n          }\n        ]\n      );\n    } else {\n      Alert.alert('Signature Captured', 'Customer signature has been captured.');\n    }\n  };\n\n  const openChat = (requestId: string) => {\n    logEvent('chat_opened', { jobId: requestId, mechanicId });\n    setSelectedRequestForChat(requestId);\n  };\n\n  const openTimer = (requestId: string) => {\n    logEvent('work_timer_opened', { jobId: requestId, mechanicId });\n    setSelectedRequestForTimer(requestId);\n  };\n\n  const openToolsCheck = (requestId: string) => {\n    logEvent('tools_check_opened', { jobId: requestId, mechanicId });\n    setSelectedRequestForTools(requestId);\n  };\n\n  // Chat View\n  if (selectedRequestForChat) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.chatHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForChat(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.chatHeaderTitle}>Customer Chat</Text>\n        </View>\n        <ChatComponent\n          serviceRequestId={selectedRequestForChat}\n          currentUserId={mechanicId}\n          currentUserName=\"Cody Owner\"\n          currentUserType=\"mechanic\"\n        />\n      </View>\n    );\n  }\n\n  // Work Timer View\n  if (selectedRequestForTimer) {\n    const job = serviceRequests.find(j => j.id === selectedRequestForTimer);\n    return (\n      <View style={styles.container}>\n        <View style={styles.timerHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForTimer(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.timerHeaderTitle}>Work Timer</Text>\n        </View>\n        <WorkTimer\n          jobId={selectedRequestForTimer}\n          jobTitle={job ? getServiceTitle(job.type) : 'Service'}\n          onWorkComplete={handleWorkComplete}\n        />\n      </View>\n    );\n  }\n\n  // Signature Capture View\n  if (selectedRequestForSignature) {\n    const job = serviceRequests.find(j => j.id === selectedRequestForSignature);\n    return (\n      <View style={styles.container}>\n        <View style={styles.signatureHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForSignature(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.signatureHeaderTitle}>Customer Signature</Text>\n        </View>\n        <SignatureCapture\n          jobId={selectedRequestForSignature}\n          jobTitle={job ? getServiceTitle(job.type) : 'Service'}\n          onSignatureComplete={handleSignatureComplete}\n          onCancel={() => setSelectedRequestForSignature(null)}\n        />\n      </View>\n    );\n  }\n\n  // Tools Check View\n  if (selectedRequestForTools) {\n    const job = serviceRequests.find(j => j.id === selectedRequestForTools);\n    const serviceCategory = SERVICE_CATEGORIES.find(s => s.id === job?.type);\n    const requiredTools = serviceCategory?.requiredTools || [];\n    \n    return (\n      <View style={styles.container}>\n        <View style={styles.toolsHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForTools(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.toolsHeaderTitle}>Tools Check</Text>\n        </View>\n        \n        <ScrollView style={styles.toolsContent}>\n          <View style={styles.toolsSection}>\n            <Text style={styles.toolsSectionTitle}>\n              Required Tools for {getServiceTitle(job?.type || '')}\n            </Text>\n            \n            {requiredTools.map((tool) => (\n              <TouchableOpacity\n                key={tool.id}\n                style={[\n                  styles.toolItem,\n                  job?.toolsChecked?.[tool.id] && styles.toolItemChecked\n                ]}\n                onPress={() => {\n                  const currentChecked = job?.toolsChecked || {};\n                  const newChecked = {\n                    ...currentChecked,\n                    [tool.id]: !currentChecked[tool.id]\n                  };\n                  updateJobTools(selectedRequestForTools, newChecked);\n                }}\n              >\n                <View style={styles.toolItemLeft}>\n                  <View style={[\n                    styles.toolCheckbox,\n                    job?.toolsChecked?.[tool.id] && styles.toolCheckboxChecked\n                  ]}>\n                    {job?.toolsChecked?.[tool.id] && (\n                      <Icons.Check size={16} color={Colors.white} />\n                    )}\n                  </View>\n                  <View style={styles.toolInfo}>\n                    <Text style={styles.toolName}>{tool.name}</Text>\n                    {tool.description && (\n                      <Text style={styles.toolDescription}>{tool.description}</Text>\n                    )}\n                  </View>\n                </View>\n                <View style={[\n                  styles.toolBadge,\n                  { backgroundColor: tool.required ? Colors.error + '20' : Colors.textMuted + '20' }\n                ]}>\n                  <Text style={[\n                    styles.toolBadgeText,\n                    { color: tool.required ? Colors.error : Colors.textMuted }\n                  ]}>\n                    {tool.required ? 'Required' : 'Optional'}\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            ))}\n          </View>\n          \n          <TouchableOpacity\n            style={[\n              styles.completeToolsButton,\n              !requiredTools.every(tool => tool.required ? job?.toolsChecked?.[tool.id] : true) && styles.disabledButton\n            ]}\n            onPress={() => {\n              const allRequiredChecked = requiredTools.every(tool => \n                tool.required ? job?.toolsChecked?.[tool.id] : true\n              );\n              \n              if (!allRequiredChecked) {\n                Alert.alert('Missing Tools', 'Please check all required tools before proceeding.');\n                return;\n              }\n              \n              completeToolsCheck(selectedRequestForTools);\n              setSelectedRequestForTools(null);\n              Alert.alert('Tools Check Complete', 'All required tools have been verified.');\n            }}\n            disabled={!requiredTools.every(tool => tool.required ? job?.toolsChecked?.[tool.id] : true)}\n          >\n            <Text style={[\n              styles.completeToolsButtonText,\n              !requiredTools.every(tool => tool.required ? job?.toolsChecked?.[tool.id] : true) && styles.disabledButtonText\n            ]}>\n              Complete Tools Check\n            </Text>\n          </TouchableOpacity>\n        </ScrollView>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Mechanic Info Header */}\n      <View style={styles.mechanicHeader}>\n        <Text style={styles.mechanicName}>\n          Cody Owner - Mobile Mechanic\n        </Text>\n        <Text style={styles.mechanicSubtext}>\n          Production Environment - Cody Only Access\n        </Text>\n      </View>\n\n      {/* Tab Navigation */}\n      <View style={styles.tabContainer}>\n        {[\n          { key: 'pending', label: 'Pending', count: mechanicJobs.filter(j => j.status === 'pending' || j.status === 'quoted').length },\n          { key: 'active', label: 'Active', count: mechanicJobs.filter(j => j.status === 'accepted' || j.status === 'in_progress').length },\n          { key: 'completed', label: 'Completed', count: mechanicJobs.filter(j => j.status === 'completed').length },\n        ].map((tab) => (\n          <TouchableOpacity\n            key={tab.key}\n            style={[styles.tab, selectedTab === tab.key && styles.activeTab]}\n            onPress={() => setSelectedTab(tab.key as any)}\n          >\n            <Text style={[styles.tabText, selectedTab === tab.key && styles.activeTabText]}>\n              {tab.label} ({tab.count})\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Jobs List */}\n      <ScrollView style={styles.jobsList} showsVerticalScrollIndicator={false}>\n        {filteredJobs.length === 0 ? (\n          <View style={styles.emptyContainer}>\n            <Icons.Briefcase size={64} color={Colors.textMuted} />\n            <Text style={styles.emptyTitle}>No {selectedTab} jobs</Text>\n            <Text style={styles.emptyText}>\n              {selectedTab === 'pending' && 'New job requests will appear here'}\n              {selectedTab === 'active' && 'Jobs you are working on will appear here'}\n              {selectedTab === 'completed' && 'Completed jobs will appear here'}\n            </Text>\n          </View>\n        ) : (\n          <View style={styles.content}>\n            {filteredJobs.map((job) => (\n              <JobCard\n                key={job.id}\n                job={job}\n                onClaimJob={handleClaimJob}\n                onCompleteJob={handleCompleteJob}\n                onOpenChat={openChat}\n                onOpenTimer={openTimer}\n                onOpenToolsCheck={openToolsCheck}\n                getServiceTitle={getServiceTitle}\n                getStatusColor={getStatusColor}\n                getJobLogs={getJobLogs}\n                getActiveJobTimer={getActiveJobTimer}\n                getJobToolsStatus={getJobToolsStatus}\n              />\n            ))}\n          </View>\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\ninterface JobCardProps {\n  job: ServiceRequest;\n  onClaimJob: (jobId: string) => void;\n  onCompleteJob: (jobId: string) => void;\n  onOpenChat: (jobId: string) => void;\n  onOpenTimer: (jobId: string) => void;\n  onOpenToolsCheck: (jobId: string) => void;\n  getServiceTitle: (type: string) => string;\n  getStatusColor: (status: string) => string;\n  getJobLogs: (jobId: string) => any[];\n  getActiveJobTimer: (jobId: string) => any;\n  getJobToolsStatus: (jobId: string) => { total: number; checked: number; allRequired: boolean };\n}\n\nfunction JobCard({ \n  job, \n  onClaimJob, \n  onCompleteJob, \n  onOpenChat, \n  onOpenTimer, \n  onOpenToolsCheck,\n  getServiceTitle, \n  getStatusColor,\n  getJobLogs,\n  getActiveJobTimer,\n  getJobToolsStatus\n}: JobCardProps) {\n  const jobLogs = getJobLogs(job.id);\n  const activeTimer = getActiveJobTimer(job.id);\n  const toolsStatus = getJobToolsStatus(job.id);\n  const hasWorkLogs = jobLogs.length > 0;\n  const hasSignature = !!job.signatureData;\n  const hasToolsCheck = !!job.toolsCheckCompletedAt;\n  const canComplete = hasWorkLogs && hasSignature && hasToolsCheck && !activeTimer;\n\n  return (\n    <View style={styles.jobCard}>\n      <View style={styles.jobHeader}>\n        <View style={styles.jobTitleRow}>\n          <Text style={styles.jobTitle}>{getServiceTitle(job.type)}</Text>\n          {job.urgency === 'emergency' && (\n            <Icons.AlertTriangle size={16} color={Colors.error} />\n          )}\n        </View>\n        \n        <View style={[styles.statusBadge, { backgroundColor: getStatusColor(job.status) + '20' }]}>\n          <Text style={[styles.statusText, { color: getStatusColor(job.status) }]}>\n            {job.status.replace('_', ' ')}\n          </Text>\n        </View>\n      </View>\n\n      <Text style={styles.jobDescription} numberOfLines={3}>\n        {job.description}\n      </Text>\n\n      {/* AI Diagnosis Preview */}\n      {job.aiDiagnosis && (\n        <View style={styles.aiDiagnosisPreview}>\n          <Icons.Brain size={14} color={Colors.primary} />\n          <Text style={styles.aiDiagnosisText}>\n            AI suggests: {job.aiDiagnosis.likelyCauses[0]}\n          </Text>\n        </View>\n      )}\n\n      {/* Job Progress Indicators */}\n      {(job.status === 'accepted' || job.status === 'in_progress' || job.status === 'completed') && (\n        <View style={styles.progressSection}>\n          <Text style={styles.progressTitle}>Job Progress</Text>\n          <View style={styles.progressIndicators}>\n            <View style={styles.progressItem}>\n              <View style={[\n                styles.progressIcon,\n                { backgroundColor: hasToolsCheck ? Colors.success + '20' : Colors.textMuted + '20' }\n              ]}>\n                {hasToolsCheck ? (\n                  <Icons.CheckCircle size={16} color={Colors.success} />\n                ) : (\n                  <Icons.Wrench size={16} color={Colors.textMuted} />\n                )}\n              </View>\n              <Text style={[\n                styles.progressText,\n                { color: hasToolsCheck ? Colors.success : Colors.textMuted }\n              ]}>\n                Tools ({toolsStatus.checked}/{toolsStatus.total})\n              </Text>\n            </View>\n\n            <View style={styles.progressItem}>\n              <View style={[\n                styles.progressIcon,\n                { backgroundColor: hasWorkLogs ? Colors.success + '20' : Colors.textMuted + '20' }\n              ]}>\n                {hasWorkLogs ? (\n                  <Icons.CheckCircle size={16} color={Colors.success} />\n                ) : (\n                  <Icons.Clock size={16} color={Colors.textMuted} />\n                )}\n              </View>\n              <Text style={[\n                styles.progressText,\n                { color: hasWorkLogs ? Colors.success : Colors.textMuted }\n              ]}>\n                Work Logged\n              </Text>\n              {activeTimer && (\n                <View style={styles.activeIndicator}>\n                  <Text style={styles.activeText}>ACTIVE</Text>\n                </View>\n              )}\n            </View>\n\n            <View style={styles.progressItem}>\n              <View style={[\n                styles.progressIcon,\n                { backgroundColor: hasSignature ? Colors.success + '20' : Colors.textMuted + '20' }\n              ]}>\n                {hasSignature ? (\n                  <Icons.CheckCircle size={16} color={Colors.success} />\n                ) : (\n                  <Icons.PenTool size={16} color={Colors.textMuted} />\n                )}\n              </View>\n              <Text style={[\n                styles.progressText,\n                { color: hasSignature ? Colors.success : Colors.textMuted }\n              ]}>\n                Signature\n              </Text>\n            </View>\n          </View>\n        </View>\n      )}\n\n      {/* Job Details */}\n      <View style={styles.jobDetails}>\n        <View style={styles.detailRow}>\n          <Icons.Calendar size={14} color={Colors.textMuted} />\n          <Text style={styles.detailText}>\n            {new Date(job.createdAt).toLocaleDateString()}\n          </Text>\n        </View>\n        \n        {job.location && (\n          <View style={styles.detailRow}>\n            <Icons.MapPin size={14} color={Colors.textMuted} />\n            <Text style={styles.detailText}>\n              {job.location.address || 'Location provided'}\n            </Text>\n          </View>\n        )}\n        \n        <View style={styles.detailRow}>\n          <Icons.Clock size={14} color={Colors.textMuted} />\n          <Text style={styles.detailText}>\n            Urgency: {job.urgency}\n          </Text>\n        </View>\n\n        {/* Work Time Summary */}\n        {hasWorkLogs && (\n          <View style={styles.detailRow}>\n            <Icons.Timer size={14} color={Colors.mechanic} />\n            <Text style={styles.detailText}>\n              Total time: {Math.round(jobLogs.reduce((total, log) => {\n                if (log.endTime) {\n                  return total + (log.endTime.getTime() - log.startTime.getTime()) / (1000 * 60);\n                }\n                return total;\n              }, 0))} minutes\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {/* Action Buttons */}\n      <View style={styles.jobActions}>\n        <TouchableOpacity \n          style={styles.chatButton}\n          onPress={() => onOpenChat(job.id)}\n        >\n          <Icons.MessageCircle size={16} color={Colors.primary} />\n          <Text style={styles.chatButtonText}>Chat</Text>\n        </TouchableOpacity>\n\n        {job.status === 'pending' || job.status === 'quoted' ? (\n          <TouchableOpacity \n            style={styles.claimButton}\n            onPress={() => onClaimJob(job.id)}\n          >\n            <Text style={styles.claimButtonText}>Claim Job</Text>\n          </TouchableOpacity>\n        ) : job.status === 'accepted' || job.status === 'in_progress' ? (\n          <>\n            {!hasToolsCheck && (\n              <TouchableOpacity \n                style={styles.toolsButton}\n                onPress={() => onOpenToolsCheck(job.id)}\n              >\n                <Icons.Wrench size={16} color={Colors.mechanic} />\n                <Text style={styles.toolsButtonText}>Tools</Text>\n              </TouchableOpacity>\n            )}\n            \n            <TouchableOpacity \n              style={[\n                styles.timerButton,\n                activeTimer && styles.activeTimerButton\n              ]}\n              onPress={() => onOpenTimer(job.id)}\n            >\n              <Icons.Timer size={16} color={activeTimer ? Colors.white : Colors.mechanic} />\n              <Text style={[\n                styles.timerButtonText,\n                activeTimer && styles.activeTimerButtonText\n              ]}>\n                {activeTimer ? 'Timer Active' : 'Timer'}\n              </Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={[\n                styles.completeButton,\n                !canComplete && styles.disabledButton\n              ]}\n              onPress={() => onCompleteJob(job.id)}\n              disabled={!canComplete}\n            >\n              <Text style={[\n                styles.completeButtonText,\n                !canComplete && styles.disabledButtonText\n              ]}>\n                Complete\n              </Text>\n            </TouchableOpacity>\n          </>\n        ) : null}\n      </View>\n\n      {/* Completion Requirements */}\n      {(job.status === 'accepted' || job.status === 'in_progress') && !canComplete && (\n        <View style={styles.requirementsSection}>\n          <Text style={styles.requirementsTitle}>To complete this job:</Text>\n          <View style={styles.requirements}>\n            {!hasToolsCheck && (\n              <Text style={styles.requirementText}>• Complete tools check</Text>\n            )}\n            {!hasWorkLogs && (\n              <Text style={styles.requirementText}>• Log work time using timer</Text>\n            )}\n            {!hasSignature && (\n              <Text style={styles.requirementText}>• Get customer signature</Text>\n            )}\n            {activeTimer && (\n              <Text style={styles.requirementText}>• Stop active timer</Text>\n            )}\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  mechanicHeader: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  mechanicName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  mechanicSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  tabContainer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  tab: {\n    flex: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    alignItems: 'center',\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: Colors.mechanic,\n  },\n  tabText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  activeTabText: {\n    color: Colors.mechanic,\n    fontWeight: '600',\n  },\n  jobsList: {\n    flex: 1,\n  },\n  content: {\n    padding: 16,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n    marginTop: 100,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  chatHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  timerHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  signatureHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  toolsHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  backButton: {\n    marginRight: 12,\n  },\n  chatHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  timerHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  signatureHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  toolsHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  toolsContent: {\n    flex: 1,\n    padding: 16,\n  },\n  toolsSection: {\n    marginBottom: 24,\n  },\n  toolsSectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  toolItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  toolItemChecked: {\n    borderColor: Colors.success,\n    backgroundColor: Colors.success + '10',\n  },\n  toolItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  toolCheckbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  toolCheckboxChecked: {\n    backgroundColor: Colors.success,\n    borderColor: Colors.success,\n  },\n  toolInfo: {\n    flex: 1,\n  },\n  toolName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  toolDescription: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  toolBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  toolBadgeText: {\n    fontSize: 10,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n  },\n  completeToolsButton: {\n    backgroundColor: Colors.success,\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  completeToolsButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  jobCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  jobTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    gap: 8,\n  },\n  jobTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'capitalize',\n  },\n  jobDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  aiDiagnosisPreview: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    backgroundColor: Colors.primary + '10',\n    padding: 8,\n    borderRadius: 6,\n    marginBottom: 12,\n  },\n  aiDiagnosisText: {\n    flex: 1,\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  progressSection: {\n    marginBottom: 12,\n  },\n  progressTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  progressIndicators: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  progressItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  progressIcon: {\n    padding: 4,\n    borderRadius: 4,\n  },\n  progressText: {\n    fontSize: 11,\n    fontWeight: '500',\n  },\n  activeIndicator: {\n    backgroundColor: Colors.mechanic,\n    paddingHorizontal: 4,\n    paddingVertical: 1,\n    borderRadius: 3,\n    marginLeft: 4,\n  },\n  activeText: {\n    fontSize: 8,\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  jobDetails: {\n    gap: 6,\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  detailText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  jobActions: {\n    flexDirection: 'row',\n    gap: 8,\n    flexWrap: 'wrap',\n  },\n  chatButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  chatButtonText: {\n    color: Colors.primary,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  toolsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  toolsButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  timerButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  activeTimerButton: {\n    backgroundColor: Colors.mechanic,\n    borderColor: Colors.mechanic,\n  },\n  timerButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  activeTimerButtonText: {\n    color: Colors.white,\n  },\n  claimButton: {\n    flex: 1,\n    backgroundColor: Colors.mechanic,\n    paddingVertical: 10,\n    borderRadius: 6,\n    alignItems: 'center',\n  },\n  claimButtonText: {\n    color: Colors.white,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  completeButton: {\n    flex: 1,\n    backgroundColor: Colors.success,\n    paddingVertical: 10,\n    borderRadius: 6,\n    alignItems: 'center',\n  },\n  completeButtonText: {\n    color: Colors.white,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  disabledButton: {\n    backgroundColor: Colors.textMuted,\n  },\n  disabledButtonText: {\n    color: Colors.white,\n    opacity: 0.7,\n  },\n  requirementsSection: {\n    marginTop: 12,\n    padding: 8,\n    backgroundColor: Colors.warning + '10',\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.warning + '30',\n  },\n  requirementsTitle: {\n    fontSize: 11,\n    fontWeight: '600',\n    color: Colors.warning,\n    marginBottom: 4,\n  },\n  requirements: {\n    gap: 2,\n  },\n  requirementText: {\n    fontSize: 10,\n    color: Colors.warning,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +519 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport { MaintenanceReminders } from '@/components/MaintenanceReminders';\nimport * as Icons from 'lucide-react-native';\n\nexport default function MechanicDashboardScreen() {\n  const { serviceRequests, quotes, getTotalRevenue, getQuotesByStatus, logEvent } = useAppStore();\n  const { user, logout } = useAuthStore();\n\n  // Production: Filter jobs for Cody only\n  const mechanicId = 'mechanic-cody';\n  const mechanicJobs = serviceRequests.filter(job => {\n    // Only show jobs assigned to Cody or unassigned jobs\n    return !job.assignedMechanicId || job.assignedMechanicId === mechanicId;\n  });\n\n  const pendingJobs = mechanicJobs.filter(r => r.status === 'pending').length;\n  const activeJobs = mechanicJobs.filter(r => ['quoted', 'accepted', 'in_progress'].includes(r.status)).length;\n  const completedToday = mechanicJobs.filter(r => \n    r.status === 'completed' && \n    new Date(r.createdAt).toDateString() === new Date().toDateString()\n  ).length;\n\n  // Calculate today's revenue\n  const today = new Date();\n  const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n  const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n  const todayRevenue = getTotalRevenue(startOfDay, endOfDay);\n\n  // Calculate weekly stats\n  const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n  const weeklyRevenue = getTotalRevenue(weekAgo);\n  const weeklyJobs = mechanicJobs.filter(r => \n    r.status === 'completed' && \n    new Date(r.createdAt) >= weekAgo\n  ).length;\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const recentJobs = mechanicJobs\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5);\n\n  const handleQuickAction = (action: string) => {\n    logEvent('dashboard_action', { action, mechanicId });\n    \n    switch (action) {\n      case 'jobs':\n        router.push('/jobs');\n        break;\n      case 'map':\n        router.push('/map');\n        break;\n      case 'customers':\n        router.push('/customers');\n        break;\n    }\n  };\n\n  const handleLogout = () => {\n    logEvent('mechanic_logout', { mechanicId });\n    logout();\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View>\n            <Text style={styles.welcomeText}>Welcome back, Cody!</Text>\n            <Text style={styles.subtitle}>\n              Mobile Mechanic Dashboard - Production\n            </Text>\n            <View style={styles.productionBadge}>\n              <Text style={styles.productionBadgeText}>LIVE MODE</Text>\n            </View>\n          </View>\n          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n            <Icons.LogOut size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n\n        {/* Stats Grid */}\n        <View style={styles.statsSection}>\n          <View style={styles.statsGrid}>\n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>{pendingJobs}</Text>\n              <Text style={styles.statLabel}>Pending Jobs</Text>\n              <Icons.Clock size={16} color={Colors.warning} />\n            </View>\n            \n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>{activeJobs}</Text>\n              <Text style={styles.statLabel}>Active Jobs</Text>\n              <Icons.Wrench size={16} color={Colors.mechanic} />\n            </View>\n            \n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>{completedToday}</Text>\n              <Text style={styles.statLabel}>Completed Today</Text>\n              <Icons.CheckCircle size={16} color={Colors.success} />\n            </View>\n            \n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>${todayRevenue}</Text>\n              <Text style={styles.statLabel}>Today's Revenue</Text>\n              <Icons.DollarSign size={16} color={Colors.primary} />\n            </View>\n          </View>\n        </View>\n\n        {/* Weekly Performance */}\n        <View style={styles.performanceSection}>\n          <Text style={styles.sectionTitle}>Weekly Performance</Text>\n          <View style={styles.performanceGrid}>\n            <View style={styles.performanceCard}>\n              <View style={styles.performanceHeader}>\n                <Icons.TrendingUp size={20} color={Colors.success} />\n                <Text style={styles.performanceTitle}>Revenue</Text>\n              </View>\n              <Text style={styles.performanceValue}>${weeklyRevenue}</Text>\n              <Text style={styles.performanceSubtext}>Last 7 days</Text>\n            </View>\n            \n            <View style={styles.performanceCard}>\n              <View style={styles.performanceHeader}>\n                <Icons.CheckSquare size={20} color={Colors.primary} />\n                <Text style={styles.performanceTitle}>Jobs Completed</Text>\n              </View>\n              <Text style={styles.performanceValue}>{weeklyJobs}</Text>\n              <Text style={styles.performanceSubtext}>Last 7 days</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Maintenance Reminders */}\n        <MaintenanceReminders />\n\n        {/* Quick Actions */}\n        <View style={styles.quickActionsSection}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActionsGrid}>\n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => handleQuickAction('jobs')}\n            >\n              <Icons.Briefcase size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>Manage Jobs</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => handleQuickAction('map')}\n            >\n              <Icons.Map size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>View Map</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => handleQuickAction('customers')}\n            >\n              <Icons.Users size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>Customers</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => router.push('/profile')}\n            >\n              <Icons.Settings size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>Settings</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Recent Jobs */}\n        <View style={styles.recentJobsSection}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Recent Jobs</Text>\n            <TouchableOpacity onPress={() => handleQuickAction('jobs')}>\n              <Text style={styles.viewAllText}>View All</Text>\n            </TouchableOpacity>\n          </View>\n          \n          {recentJobs.length === 0 ? (\n            <View style={styles.emptyJobs}>\n              <Icons.Briefcase size={48} color={Colors.textMuted} />\n              <Text style={styles.emptyText}>No recent jobs</Text>\n              <Text style={styles.emptySubtext}>\n                Jobs will appear here when customers request services\n              </Text>\n            </View>\n          ) : (\n            <View style={styles.jobsList}>\n              {recentJobs.map((job) => (\n                <TouchableOpacity \n                  key={job.id} \n                  style={styles.jobCard}\n                  onPress={() => router.push('/jobs')}\n                >\n                  <View style={styles.jobHeader}>\n                    <Text style={styles.jobTitle}>{getServiceTitle(job.type)}</Text>\n                    <View style={[styles.jobStatus, { backgroundColor: getStatusColor(job.status) + '20' }]}>\n                      <Text style={[styles.jobStatusText, { color: getStatusColor(job.status) }]}>\n                        {job.status.replace('_', ' ')}\n                      </Text>\n                    </View>\n                  </View>\n                  \n                  <Text style={styles.jobDescription} numberOfLines={2}>\n                    {job.description}\n                  </Text>\n                  \n                  <View style={styles.jobMeta}>\n                    <Text style={styles.jobDate}>\n                      {new Date(job.createdAt).toLocaleDateString()}\n                    </Text>\n                    {job.urgency === 'emergency' && (\n                      <View style={styles.urgencyBadge}>\n                        <Icons.AlertTriangle size={12} color={Colors.error} />\n                        <Text style={styles.urgencyText}>Emergency</Text>\n                      </View>\n                    )}\n                  </View>\n                </TouchableOpacity>\n              ))}\n            </View>\n          )}\n        </View>\n\n        {/* Production Info */}\n        <View style={styles.productionInfo}>\n          <Text style={styles.productionInfoTitle}>Production Environment</Text>\n          <Text style={styles.productionInfoText}>\n            Mechanic: Cody Owner (Owner Operator)\n          </Text>\n          <Text style={styles.productionInfoText}>\n            Total Jobs: {mechanicJobs.length}\n          </Text>\n          <Text style={styles.productionInfoText}>\n            System Status: Live\n          </Text>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case 'pending': return Colors.warning;\n    case 'quoted': return Colors.primary;\n    case 'accepted': return Colors.success;\n    case 'in_progress': return Colors.mechanic;\n    case 'completed': return Colors.success;\n    default: return Colors.textMuted;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 24,\n  },\n  welcomeText: {\n    fontSize: 28,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  productionBadge: {\n    backgroundColor: Colors.success,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    alignSelf: 'flex-start',\n  },\n  productionBadgeText: {\n    fontSize: 12,\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  statsSection: {\n    marginBottom: 24,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    minWidth: '48%',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  performanceSection: {\n    marginBottom: 24,\n  },\n  performanceGrid: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  performanceCard: {\n    flex: 1,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  performanceHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  performanceTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  performanceValue: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  performanceSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  quickActionsSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  quickActionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  quickActionCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    width: '48%',\n    minHeight: 80,\n    justifyContent: 'center',\n  },\n  quickActionText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  recentJobsSection: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  viewAllText: {\n    fontSize: 14,\n    color: Colors.mechanic,\n    fontWeight: '500',\n  },\n  emptyJobs: {\n    alignItems: 'center',\n    padding: 32,\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginTop: 12,\n    marginBottom: 4,\n  },\n  emptySubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n  },\n  jobsList: {\n    gap: 12,\n  },\n  jobCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  jobTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  jobStatus: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  jobStatusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'capitalize',\n  },\n  jobDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  jobMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  jobDate: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  urgencyBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: Colors.error + '20',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  urgencyText: {\n    fontSize: 10,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  productionInfo: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    marginTop: 20,\n  },\n  productionInfoTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  productionInfoText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginBottom: 4,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +409 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, TextInput } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\n\nexport default function MechanicCustomersScreen() {\n  const { serviceRequests, quotes } = useAppStore();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Group requests by customer (using a simple approach for demo)\n  const customerData = serviceRequests.reduce((acc, request) => {\n    const customerId = `customer-${request.id.slice(0, 3)}`; // Mock customer grouping\n    const customerName = `Customer ${request.id.slice(0, 3)}`;\n    \n    if (!acc[customerId]) {\n      acc[customerId] = {\n        id: customerId,\n        name: customerName,\n        email: `${customerName.toLowerCase().replace(' ', '')}@example.com`,\n        phone: '(555) 123-4567',\n        requests: [],\n        totalSpent: 0,\n        lastService: new Date(request.createdAt),\n      };\n    }\n    \n    acc[customerId].requests.push(request);\n    \n    // Calculate total spent\n    const customerQuotes = quotes.filter(q => q.serviceRequestId === request.id && q.status === 'accepted');\n    acc[customerId].totalSpent += customerQuotes.reduce((sum, q) => sum + q.totalCost, 0);\n    \n    // Update last service date\n    if (new Date(request.createdAt) > acc[customerId].lastService) {\n      acc[customerId].lastService = new Date(request.createdAt);\n    }\n    \n    return acc;\n  }, {} as Record<string, any>);\n\n  const customers = Object.values(customerData).filter(customer =>\n    customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  if (customers.length === 0 && searchQuery === '') {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.Users size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Customers Yet</Text>\n        <Text style={styles.emptyText}>\n          Customer information will appear here once you start serving clients.\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Search Bar */}\n      <View style={styles.searchContainer}>\n        <Icons.Search size={20} color={Colors.textMuted} />\n        <TextInput\n          style={styles.searchInput}\n          value={searchQuery}\n          onChangeText={setSearchQuery}\n          placeholder=\"Search customers...\"\n          placeholderTextColor={Colors.textMuted}\n        />\n      </View>\n\n      {/* Customers List */}\n      <ScrollView style={styles.customersList} showsVerticalScrollIndicator={false}>\n        {customers.length === 0 ? (\n          <View style={styles.noResultsContainer}>\n            <Text style={styles.noResultsText}>No customers found</Text>\n          </View>\n        ) : (\n          customers.map((customer) => (\n            <CustomerCard key={customer.id} customer={customer} getServiceTitle={getServiceTitle} />\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\ninterface CustomerCardProps {\n  customer: any;\n  getServiceTitle: (type: string) => string;\n}\n\nfunction CustomerCard({ customer, getServiceTitle }: CustomerCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <View style={styles.customerCard}>\n      <TouchableOpacity \n        style={styles.customerHeader}\n        onPress={() => setIsExpanded(!isExpanded)}\n      >\n        <View style={styles.customerInfo}>\n          <View style={styles.customerAvatar}>\n            <Text style={styles.customerInitials}>\n              {customer.name.split(' ').map((n: string) => n[0]).join('')}\n            </Text>\n          </View>\n          \n          <View style={styles.customerDetails}>\n            <Text style={styles.customerName}>{customer.name}</Text>\n            <Text style={styles.customerEmail}>{customer.email}</Text>\n            <Text style={styles.customerPhone}>{customer.phone}</Text>\n          </View>\n        </View>\n        \n        <View style={styles.customerStats}>\n          <Text style={styles.statValue}>${customer.totalSpent}</Text>\n          <Text style={styles.statLabel}>Total Spent</Text>\n          <Text style={styles.serviceCount}>{customer.requests.length} services</Text>\n        </View>\n        \n        <Icons.ChevronDown \n          size={20} \n          color={Colors.textMuted}\n          style={[styles.expandIcon, isExpanded && styles.expandIconRotated]}\n        />\n      </TouchableOpacity>\n\n      {isExpanded && (\n        <View style={styles.customerExpanded}>\n          <View style={styles.expandedHeader}>\n            <Text style={styles.expandedTitle}>Service History</Text>\n            <Text style={styles.lastService}>\n              Last service: {customer.lastService.toLocaleDateString()}\n            </Text>\n          </View>\n          \n          <View style={styles.serviceHistory}>\n            {customer.requests.slice(0, 3).map((request: any) => (\n              <View key={request.id} style={styles.serviceItem}>\n                <View style={styles.serviceInfo}>\n                  <Text style={styles.serviceName}>{getServiceTitle(request.type)}</Text>\n                  <Text style={styles.serviceDate}>\n                    {new Date(request.createdAt).toLocaleDateString()}\n                  </Text>\n                </View>\n                <View style={[styles.serviceStatus, { backgroundColor: getStatusColor(request.status) + '20' }]}>\n                  <Text style={[styles.serviceStatusText, { color: getStatusColor(request.status) }]}>\n                    {request.status.replace('_', ' ')}\n                  </Text>\n                </View>\n              </View>\n            ))}\n            \n            {customer.requests.length > 3 && (\n              <Text style={styles.moreServices}>\n                +{customer.requests.length - 3} more services\n              </Text>\n            )}\n          </View>\n          \n          <View style={styles.customerActions}>\n            <TouchableOpacity style={styles.actionButton}>\n              <Icons.Phone size={16} color={Colors.mechanic} />\n              <Text style={styles.actionButtonText}>Call</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity style={styles.actionButton}>\n              <Icons.MessageCircle size={16} color={Colors.mechanic} />\n              <Text style={styles.actionButtonText}>Message</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity style={styles.actionButton}>\n              <Icons.Mail size={16} color={Colors.mechanic} />\n              <Text style={styles.actionButtonText}>Email</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case 'pending': return Colors.warning;\n    case 'quoted': return Colors.primary;\n    case 'accepted': return Colors.success;\n    case 'in_progress': return Colors.mechanic;\n    case 'completed': return Colors.success;\n    default: return Colors.textMuted;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    margin: 16,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 12,\n  },\n  searchInput: {\n    flex: 1,\n    color: Colors.text,\n    fontSize: 16,\n  },\n  customersList: {\n    flex: 1,\n    paddingHorizontal: 16,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  noResultsContainer: {\n    alignItems: 'center',\n    padding: 40,\n  },\n  noResultsText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n  },\n  customerCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  customerHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n  },\n  customerInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  customerAvatar: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.mechanic + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  customerInitials: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.mechanic,\n  },\n  customerDetails: {\n    flex: 1,\n  },\n  customerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  customerEmail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 2,\n  },\n  customerPhone: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  customerStats: {\n    alignItems: 'flex-end',\n    marginRight: 12,\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.text,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  serviceCount: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginTop: 2,\n  },\n  expandIcon: {\n    transform: [{ rotate: '0deg' }],\n  },\n  expandIconRotated: {\n    transform: [{ rotate: '180deg' }],\n  },\n  customerExpanded: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    padding: 16,\n  },\n  expandedHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  expandedTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  lastService: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  serviceHistory: {\n    marginBottom: 16,\n  },\n  serviceItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  serviceInfo: {\n    flex: 1,\n  },\n  serviceName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  serviceDate: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  serviceStatus: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  serviceStatusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'capitalize',\n  },\n  moreServices: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    marginTop: 8,\n    fontStyle: 'italic',\n  },\n  customerActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  actionButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +82 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { Tabs, Redirect } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { useAuthStore } from '@/stores/auth-store';\nimport * as Icons from 'lucide-react-native';\n\nfunction TabBarIcon({ name, color }: { name: keyof typeof Icons; color: string }) {\n  const IconComponent = Icons[name] as any;\n  return IconComponent ? <IconComponent size={24} color={color} /> : null;\n}\n\nexport default function MechanicTabLayout() {\n  const { user, isAuthenticated } = useAuthStore();\n\n  // Production security: Only allow Cody as mechanic\n  if (!isAuthenticated || !user || user.role !== 'mechanic' || user.id !== 'mechanic-cody') {\n    console.warn('Unauthorized mechanic access attempt:', { \n      isAuthenticated, \n      userId: user?.id, \n      role: user?.role,\n      timestamp: new Date().toISOString() \n    });\n    return <Redirect href=\"/auth\" />;\n  }\n\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: Colors.mechanic,\n        tabBarInactiveTintColor: Colors.textMuted,\n        tabBarStyle: {\n          backgroundColor: Colors.surface,\n          borderTopColor: Colors.border,\n          borderTopWidth: 1,\n        },\n        headerStyle: {\n          backgroundColor: Colors.background,\n        },\n        headerTintColor: Colors.text,\n        headerTitleStyle: {\n          fontWeight: '600',\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Dashboard',\n          headerTitle: 'Mechanic Dashboard',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"LayoutDashboard\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"jobs\"\n        options={{\n          title: 'Jobs',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Briefcase\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"map\"\n        options={{\n          title: 'Map',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Map\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"customers\"\n        options={{\n          title: 'Customers',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Users\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Settings\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}"
            }
          }
        },
        {
          "display": "https://github.com/GrizzlyRooster34/mobile-mechanic-app",
          "pastedContents": {}
        },
        {
          "display": "CAN YOU PUSH THIS CODE SO FAR TO MY GITHUB REPO",
          "pastedContents": {}
        },
        {
          "display": "none, can you still see the code ive added from pasting it in?",
          "pastedContents": {}
        },
        {
          "display": "mobile mechanic app",
          "pastedContents": {}
        },
        {
          "display": "can you access my github repo",
          "pastedContents": {}
        },
        {
          "display": "“Open a PR with this fix and reference issue #23”",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +253 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { AvailabilityCalendar } from '@/components/AvailabilityCalendar';\nimport { useAppStore } from '@/stores/app-store';\nimport { router } from 'expo-router';\nimport * as Icons from 'lucide-react-native';\n\nexport default function ScheduleScreen() {\n  const { serviceRequests, updateServiceRequest } = useAppStore();\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [selectedTime, setSelectedTime] = useState<string>('');\n\n  const pendingRequests = serviceRequests.filter(r => \n    r.status === 'accepted' && !r.scheduledAt\n  );\n\n  const handleDateTimeSelect = (date: Date, timeSlot: string) => {\n    setSelectedDate(date);\n    setSelectedTime(timeSlot);\n  };\n\n  const handleScheduleConfirm = () => {\n    if (!selectedDate || !selectedTime || pendingRequests.length === 0) {\n      Alert.alert('Error', 'Please select a date and time for scheduling.');\n      return;\n    }\n\n    const scheduledDateTime = new Date(selectedDate);\n    const [time, period] = selectedTime.split(' ');\n    const [hours, minutes] = time.split(':').map(Number);\n    \n    let adjustedHours = hours;\n    if (period === 'PM' && hours !== 12) {\n      adjustedHours += 12;\n    } else if (period === 'AM' && hours === 12) {\n      adjustedHours = 0;\n    }\n    \n    scheduledDateTime.setHours(adjustedHours, minutes || 0, 0, 0);\n\n    // Schedule the first pending request\n    const requestToSchedule = pendingRequests[0];\n    updateServiceRequest(requestToSchedule.id, {\n      scheduledAt: scheduledDateTime,\n      status: 'in_progress'\n    });\n\n    Alert.alert(\n      'Service Scheduled',\n      `Your service has been scheduled for ${selectedDate.toLocaleDateString()} at ${selectedTime}`,\n      [\n        { text: 'OK', onPress: () => router.back() }\n      ]\n    );\n  };\n\n  if (pendingRequests.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.Calendar size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Services to Schedule</Text>\n        <Text style={styles.emptyText}>\n          You don't have any accepted services that need scheduling.\n        </Text>\n        <Button\n          title=\"View My Quotes\"\n          onPress={() => router.push('/quotes')}\n          style={styles.emptyButton}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* Service Info */}\n        <View style={styles.serviceInfo}>\n          <Text style={styles.serviceTitle}>Schedule Your Service</Text>\n          <Text style={styles.serviceDescription}>\n            Select your preferred date and time for the service appointment.\n          </Text>\n          \n          <View style={styles.serviceCard}>\n            <Text style={styles.serviceName}>\n              {pendingRequests[0].type.replace('_', ' ').toUpperCase()}\n            </Text>\n            <Text style={styles.serviceDetails}>\n              {pendingRequests[0].description}\n            </Text>\n          </View>\n        </View>\n\n        {/* Calendar */}\n        <View style={styles.calendarSection}>\n          <Text style={styles.sectionTitle}>Select Date & Time</Text>\n          <AvailabilityCalendar\n            onDateSelect={handleDateTimeSelect}\n            selectedDate={selectedDate || undefined}\n            selectedTime={selectedTime}\n          />\n        </View>\n\n        {/* Selected DateTime Display */}\n        {selectedDate && selectedTime && (\n          <View style={styles.selectedDateTime}>\n            <Icons.Calendar size={20} color={Colors.success} />\n            <Text style={styles.selectedDateTimeText}>\n              {selectedDate.toLocaleDateString()} at {selectedTime}\n            </Text>\n          </View>\n        )}\n\n        {/* Confirm Button */}\n        <Button\n          title=\"Confirm Appointment\"\n          onPress={handleScheduleConfirm}\n          disabled={!selectedDate || !selectedTime}\n          style={styles.confirmButton}\n        />\n\n        {/* Service Notes */}\n        <View style={styles.serviceNotes}>\n          <Text style={styles.notesTitle}>Service Notes</Text>\n          <Text style={styles.notesText}>\n            • Our mechanic will arrive at your location at the scheduled time\n          </Text>\n          <Text style={styles.notesText}>\n            • Please ensure your vehicle is accessible\n          </Text>\n          <Text style={styles.notesText}>\n            • You'll receive a confirmation and reminder notifications\n          </Text>\n          <Text style={styles.notesText}>\n            • Contact us if you need to reschedule\n          </Text>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n    marginBottom: 24,\n  },\n  emptyButton: {\n    minWidth: 200,\n  },\n  serviceInfo: {\n    marginBottom: 24,\n  },\n  serviceTitle: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  serviceDescription: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    lineHeight: 22,\n  },\n  serviceCard: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  serviceName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  serviceDetails: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    lineHeight: 20,\n  },\n  calendarSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  selectedDateTime: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.success + '20',\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 24,\n    gap: 8,\n  },\n  selectedDateTimeText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.success,\n  },\n  confirmButton: {\n    marginBottom: 24,\n  },\n  serviceNotes: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  notesTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  notesText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 6,\n    lineHeight: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +882 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TextInput, Alert, Modal } from 'react-native';\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { SERVICE_CATEGORIES, getToolsForService, getRequiredToolsForService } from '@/constants/services';\nimport { SERVICE_PRICING } from '@/constants/pricing';\nimport { Button } from '@/components/Button';\nimport { PhotoUpload } from '@/components/PhotoUpload';\nimport { VinScanner } from '@/components/VinScanner';\nimport { AIAssistant } from '@/components/AIAssistant';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { ServiceRequest, ServiceType, DiagnosticResult, Vehicle } from '@/types/service';\nimport { generateSmartQuote } from '@/utils/quote-generator';\nimport { ENV_CONFIG, logProductionEvent } from '@/utils/firebase-config';\nimport * as Location from 'expo-location';\nimport { Platform } from 'react-native';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerRequestScreen() {\n  const params = useLocalSearchParams();\n  const { addServiceRequest, addQuote, vehicles, currentLocation, setCurrentLocation, updateServiceRequest, addVehicle, logEvent } = useAppStore();\n  const { user } = useAuthStore();\n  \n  const [selectedService, setSelectedService] = useState<ServiceType | null>(\n    params.serviceType as ServiceType || null\n  );\n  const [description, setDescription] = useState(params.symptoms as string || '');\n  const [photos, setPhotos] = useState<string[]>([]);\n  const [urgency, setUrgency] = useState<'low' | 'medium' | 'high' | 'emergency'>(\n    params.urgent === 'true' ? 'emergency' : 'medium'\n  );\n  const [selectedParts, setSelectedParts] = useState<string[]>([]);\n  const [showVinScanner, setShowVinScanner] = useState(false);\n  const [vinNumber, setVinNumber] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiDiagnosis, setAiDiagnosis] = useState<DiagnosticResult | undefined>(\n    params.aiDiagnosis ? JSON.parse(params.aiDiagnosis as string) : undefined\n  );\n  const [showAIAssistant, setShowAIAssistant] = useState(false);\n  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);\n\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n\n  useEffect(() => {\n    // Set selected vehicle from params or default to first vehicle\n    if (params.vehicleId) {\n      const vehicle = vehicles.find(v => v.id === params.vehicleId);\n      if (vehicle) {\n        setSelectedVehicle(vehicle);\n      }\n    } else if (vehicles.length > 0 && !selectedVehicle) {\n      setSelectedVehicle(vehicles[0]);\n    }\n  }, [vehicles, params.vehicleId]);\n\n  useEffect(() => {\n    // Auto-generate quote if requested\n    if (params.autoQuote === 'true' && selectedService && description && selectedVehicle) {\n      // Small delay to ensure UI is ready\n      setTimeout(() => {\n        handleSubmit();\n      }, 500);\n    }\n  }, [params.autoQuote, selectedService, description, selectedVehicle]);\n\n  const getCurrentLocation = async () => {\n    if (Platform.OS === 'web') {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            setCurrentLocation({\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n            });\n          },\n          (error) => console.log('Location error:', error)\n        );\n      }\n      return;\n    }\n\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert('Permission denied', 'Location permission is required to provide service at your location.');\n        return;\n      }\n\n      const location = await Location.getCurrentPositionAsync({});\n      const address = await Location.reverseGeocodeAsync({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n      });\n\n      setCurrentLocation({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        address: address[0] ? `${address[0].street}, ${address[0].city}` : undefined,\n      });\n    } catch (error) {\n      console.log('Location error:', error);\n    }\n  };\n\n  const handleVinScanned = (vinData: any) => {\n    setVinNumber(vinData.vin);\n    setShowVinScanner(false);\n    \n    // Production logging\n    logProductionEvent('vin_scanned', {\n      vin: vinData.vin,\n      make: vinData.make,\n      model: vinData.model,\n      year: vinData.year\n    });\n    \n    // Auto-create vehicle if it doesn't exist\n    const existingVehicle = vehicles.find(v => v.vin === vinData.vin);\n    if (!existingVehicle) {\n      Alert.alert(\n        'Vehicle Decoded',\n        `${vinData.year} ${vinData.make} ${vinData.model}\nVIN: ${vinData.vin}\n\nWould you like to add this vehicle to your profile?`,\n        [\n          { text: 'Skip', style: 'cancel' },\n          { \n            text: 'Add Vehicle', \n            onPress: () => {\n              const newVehicle: Vehicle = {\n                id: Date.now().toString(),\n                make: vinData.make,\n                model: vinData.model,\n                year: vinData.year,\n                vin: vinData.vin,\n                trim: vinData.trim,\n                engine: vinData.engine,\n                mileage: 0, // User can update this later\n              };\n              addVehicle(newVehicle);\n              setSelectedVehicle(newVehicle);\n              Alert.alert('Vehicle Added', 'Vehicle has been added to your profile.');\n            }\n          }\n        ]\n      );\n    } else {\n      setSelectedVehicle(existingVehicle);\n      Alert.alert('Vehicle Found', 'This vehicle is already in your profile.');\n    }\n  };\n\n  const handleAIDiagnosis = (diagnosis: DiagnosticResult) => {\n    setAiDiagnosis(diagnosis);\n    \n    // Production logging\n    logProductionEvent('ai_diagnosis_completed', {\n      diagnosisId: diagnosis.id,\n      confidence: diagnosis.confidence,\n      urgencyLevel: diagnosis.urgencyLevel,\n      vehicleMake: selectedVehicle?.make,\n      vehicleModel: selectedVehicle?.model\n    });\n    \n    // Auto-fill description if empty\n    if (!description.trim() && diagnosis.likelyCauses.length > 0) {\n      setDescription(`AI Analysis suggests: ${diagnosis.likelyCauses[0]}. ${diagnosis.diagnosticSteps[0] || ''}`);\n    }\n    \n    // Set urgency based on AI recommendation\n    setUrgency(diagnosis.urgencyLevel);\n    \n    // Try to match AI services to our service types\n    const matchedService = matchAIServiceToType(diagnosis.matchedServices);\n    if (matchedService && !selectedService) {\n      setSelectedService(matchedService);\n    }\n  };\n\n  const matchAIServiceToType = (aiServices: string[]): ServiceType | null => {\n    const serviceMap: Record<string, ServiceType> = {\n      'oil': 'oil_change',\n      'brake': 'brake_service',\n      'tire': 'tire_service',\n      'battery': 'battery_service',\n      'engine': 'engine_diagnostic',\n      'transmission': 'transmission',\n      'air conditioning': 'ac_service',\n      'a/c': 'ac_service',\n      'diagnostic': 'engine_diagnostic',\n    };\n\n    for (const aiService of aiServices) {\n      const lowerService = aiService.toLowerCase();\n      for (const [keyword, serviceType] of Object.entries(serviceMap)) {\n        if (lowerService.includes(keyword)) {\n          return serviceType;\n        }\n      }\n    }\n    \n    return 'general_repair';\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedService) {\n      Alert.alert('Error', 'Please select a service type.');\n      return;\n    }\n\n    if (!description.trim()) {\n      Alert.alert('Error', 'Please provide a description of the issue.');\n      return;\n    }\n\n    if (!user) {\n      Alert.alert('Error', 'Please log in to submit a request.');\n      return;\n    }\n\n    if (!selectedVehicle) {\n      Alert.alert('Vehicle Required', 'Please select or add a vehicle first.', [\n        { text: 'Add Vehicle', onPress: () => setShowVinScanner(true) },\n        { text: 'Cancel', style: 'cancel' }\n      ]);\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Get required tools for this service\n      const requiredTools = getRequiredToolsForService(selectedService).map(tool => tool.id);\n      \n      const request: ServiceRequest = {\n        id: Date.now().toString(),\n        type: selectedService,\n        description: description.trim(),\n        urgency,\n        status: 'pending',\n        createdAt: new Date(),\n        photos: photos.length > 0 ? photos : undefined,\n        location: currentLocation ? {\n          latitude: currentLocation.latitude,\n          longitude: currentLocation.longitude,\n          address: currentLocation.address\n        } : undefined,\n        vehicleId: selectedVehicle.id,\n        vinNumber: vinNumber || selectedVehicle.vin || undefined,\n        aiDiagnosis: aiDiagnosis || undefined,\n        requiredTools, // Set required tools for this service\n        toolsChecked: {}, // Initialize empty tools check\n      };\n\n      addServiceRequest(request);\n\n      // Production logging\n      logProductionEvent('service_request_created', {\n        requestId: request.id,\n        serviceType: selectedService,\n        urgency,\n        hasAIDiagnosis: !!aiDiagnosis,\n        vehicleId: selectedVehicle.id,\n        toolsCount: requiredTools.length\n      });\n\n      // Generate smart quote automatically\n      const quote = generateSmartQuote(request.id, {\n        serviceType: selectedService,\n        urgency,\n        description: description.trim(),\n        selectedParts: selectedParts.length > 0 ? selectedParts : undefined,\n        aiDiagnosis,\n        vehicle: selectedVehicle,\n      });\n\n      addQuote(quote);\n      updateServiceRequest(request.id, { status: 'quoted' });\n\n      // Production logging\n      logProductionEvent('quote_generated', {\n        quoteId: quote.id,\n        requestId: request.id,\n        totalCost: quote.totalCost,\n        laborCost: quote.laborCost,\n        partsCost: quote.partsCost\n      });\n\n      Alert.alert(\n        'Request Submitted',\n        'Your service request has been submitted and a quote has been generated automatically.',\n        [\n          { text: 'View Quote', onPress: () => router.push('/quotes') }\n        ]\n      );\n\n      // Reset form\n      setDescription('');\n      setPhotos([]);\n      setUrgency('medium');\n      setSelectedService(null);\n      setSelectedParts([]);\n      setVinNumber('');\n      setAiDiagnosis(undefined);\n    } catch (error) {\n      Alert.alert('Error', 'Failed to submit request. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const selectedServiceData = selectedService ? \n    SERVICE_CATEGORIES.find(s => s.id === selectedService) : null;\n\n  const selectedServicePricing = selectedService ? \n    SERVICE_PRICING[selectedService] : null;\n\n  const togglePart = (partName: string) => {\n    setSelectedParts(prev => \n      prev.includes(partName) \n        ? prev.filter(p => p !== partName)\n        : [...prev, partName]\n    );\n  };\n\n  // Get tools for selected service\n  const serviceTools = selectedService ? getToolsForService(selectedService) : [];\n  const requiredServiceTools = selectedService ? getRequiredToolsForService(selectedService) : [];\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* Production Environment Indicator */}\n        {ENV_CONFIG.isProduction && (\n          <View style={styles.productionBanner}>\n            <Icons.Shield size={16} color={Colors.success} />\n            <Text style={styles.productionText}>Production Environment - Live Service</Text>\n          </View>\n        )}\n\n        {/* Vehicle Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Select Vehicle</Text>\n          {vehicles.length > 0 ? (\n            <View style={styles.vehicleSelector}>\n              {vehicles.map((vehicle) => (\n                <Button\n                  key={vehicle.id}\n                  title={`${vehicle.year} ${vehicle.make} ${vehicle.model}${vehicle.vin ? ` (VIN: ${vehicle.vin.slice(-4)})` : ''}`}\n                  variant={selectedVehicle?.id === vehicle.id ? 'primary' : 'outline'}\n                  onPress={() => setSelectedVehicle(vehicle)}\n                  style={styles.vehicleButton}\n                />\n              ))}\n              <Button\n                title=\"Add New Vehicle\"\n                variant=\"outline\"\n                onPress={() => setShowVinScanner(true)}\n                style={styles.addVehicleButton}\n              />\n            </View>\n          ) : (\n            <View style={styles.noVehicleCard}>\n              <Text style={styles.noVehicleText}>No vehicles found</Text>\n              <Button\n                title=\"Add Vehicle\"\n                variant=\"outline\"\n                onPress={() => setShowVinScanner(true)}\n                style={styles.addVehicleButton}\n              />\n            </View>\n          )}\n        </View>\n\n        {/* AI Assistant */}\n        <View style={styles.section}>\n          <View style={styles.aiHeader}>\n            <Text style={styles.sectionTitle}>Get AI-Powered Diagnosis</Text>\n            <Button\n              title={showAIAssistant ? 'Hide AI Assistant' : 'Use AI Assistant'}\n              variant=\"outline\"\n              size=\"small\"\n              onPress={() => setShowAIAssistant(!showAIAssistant)}\n              style={styles.toggleButton}\n            />\n          </View>\n          \n          {showAIAssistant && (\n            <AIAssistant\n              vehicle={selectedVehicle || undefined}\n              onDiagnosisComplete={handleAIDiagnosis}\n              initialSymptoms={description}\n            />\n          )}\n\n          {aiDiagnosis && !showAIAssistant && (\n            <View style={styles.diagnosisPreview}>\n              <View style={styles.diagnosisHeader}>\n                <Icons.Brain size={16} color={Colors.primary} />\n                <Text style={styles.diagnosisTitle}>AI Diagnosis Complete</Text>\n                <Button\n                  title=\"View Details\"\n                  variant=\"outline\"\n                  size=\"small\"\n                  onPress={() => setShowAIAssistant(true)}\n                />\n              </View>\n              <Text style={styles.diagnosisPreviewText}>\n                {aiDiagnosis.likelyCauses[0]} • {aiDiagnosis.urgencyLevel.toUpperCase()} priority\n              </Text>\n              {aiDiagnosis.estimatedCost && (\n                <Text style={styles.diagnosisCostText}>\n                  Estimated cost: ${aiDiagnosis.estimatedCost.min} - ${aiDiagnosis.estimatedCost.max}\n                </Text>\n              )}\n            </View>\n          )}\n        </View>\n\n        {/* Service Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Service Type</Text>\n          {selectedServiceData ? (\n            <View style={styles.selectedService}>\n              <Text style={styles.selectedServiceTitle}>{selectedServiceData.title}</Text>\n              <Text style={styles.selectedServiceDesc}>{selectedServiceData.description}</Text>\n              {selectedServicePricing && (\n                <Text style={styles.priceRange}>\n                  Estimated: ${selectedServicePricing.priceRange.min} - ${selectedServicePricing.priceRange.max}\n                </Text>\n              )}\n              <Button\n                title=\"Change Service\"\n                variant=\"outline\"\n                size=\"small\"\n                onPress={() => setSelectedService(null)}\n                style={styles.changeButton}\n              />\n            </View>\n          ) : (\n            <View style={styles.serviceGrid}>\n              {SERVICE_CATEGORIES.map((service) => (\n                <Button\n                  key={service.id}\n                  title={service.title}\n                  variant=\"outline\"\n                  onPress={() => setSelectedService(service.id)}\n                  style={styles.serviceButton}\n                />\n              ))}\n            </View>\n          )}\n        </View>\n\n        {/* Tools Required Preview */}\n        {selectedService && serviceTools.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Required Tools for This Service</Text>\n            <Text style={styles.sectionSubtitle}>\n              Mechanic will verify these tools before starting work\n            </Text>\n            <View style={styles.toolsPreview}>\n              <View style={styles.toolsStats}>\n                <Text style={styles.toolsStatsText}>\n                  {requiredServiceTools.length} required tools • {serviceTools.length - requiredServiceTools.length} optional\n                </Text>\n              </View>\n              <View style={styles.toolsList}>\n                {requiredServiceTools.slice(0, 5).map((tool) => (\n                  <View key={tool.id} style={styles.toolItem}>\n                    <Icons.CheckCircle size={14} color={Colors.success} />\n                    <Text style={styles.toolName}>{tool.name}</Text>\n                    <View style={styles.requiredBadge}>\n                      <Text style={styles.requiredBadgeText}>Required</Text>\n                    </View>\n                  </View>\n                ))}\n                {requiredServiceTools.length > 5 && (\n                  <Text style={styles.moreToolsText}>\n                    +{requiredServiceTools.length - 5} more required tools\n                  </Text>\n                )}\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Parts Selection */}\n        {selectedServicePricing && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Common Parts (Optional)</Text>\n            <Text style={styles.sectionSubtitle}>\n              Select parts that may be needed for this service\n            </Text>\n            <View style={styles.partsGrid}>\n              {selectedServicePricing.commonParts.map((part) => (\n                <Button\n                  key={part.name}\n                  title={`${part.name} - $${part.price}`}\n                  variant={selectedParts.includes(part.name) ? 'primary' : 'outline'}\n                  size=\"small\"\n                  onPress={() => togglePart(part.name)}\n                  style={styles.partButton}\n                />\n              ))}\n            </View>\n          </View>\n        )}\n\n        {/* VIN Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Vehicle Information</Text>\n          <View style={styles.vinSection}>\n            {vinNumber || selectedVehicle?.vin ? (\n              <View style={styles.vinDisplay}>\n                <Icons.CheckCircle size={20} color={Colors.success} />\n                <Text style={styles.vinText}>\n                  VIN: {vinNumber || selectedVehicle?.vin}\n                </Text>\n                <Button\n                  title=\"Change\"\n                  variant=\"outline\"\n                  size=\"small\"\n                  onPress={() => setShowVinScanner(true)}\n                />\n              </View>\n            ) : (\n              <Button\n                title=\"Scan/Enter VIN\"\n                variant=\"outline\"\n                onPress={() => setShowVinScanner(true)}\n                style={styles.vinButton}\n              />\n            )}\n          </View>\n        </View>\n\n        {/* Description */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Describe the Issue</Text>\n          <TextInput\n            style={styles.textArea}\n            value={description}\n            onChangeText={setDescription}\n            placeholder=\"Please describe the problem, symptoms, or service needed...\"\n            placeholderTextColor={Colors.textMuted}\n            multiline\n            numberOfLines={4}\n            textAlignVertical=\"top\"\n          />\n        </View>\n\n        {/* Photo Upload */}\n        <View style={styles.section}>\n          <PhotoUpload\n            photos={photos}\n            onPhotosChange={setPhotos}\n            maxPhotos={5}\n          />\n        </View>\n\n        {/* Urgency */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Urgency Level</Text>\n          <View style={styles.urgencyGrid}>\n            {[\n              { key: 'low', label: 'Low', desc: 'Can wait a few days' },\n              { key: 'medium', label: 'Medium', desc: 'Within 24-48 hours' },\n              { key: 'high', label: 'High', desc: 'Same day service' },\n              { key: 'emergency', label: 'Emergency', desc: 'Immediate assistance' },\n            ].map((option) => (\n              <Button\n                key={option.key}\n                title={`${option.label}\n${option.desc}`}\n                variant={urgency === option.key ? 'primary' : 'outline'}\n                onPress={() => setUrgency(option.key as any)}\n                style={styles.urgencyButton}\n                textStyle={styles.urgencyButtonText}\n              />\n            ))}\n          </View>\n        </View>\n\n        {/* Location */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Service Location</Text>\n          <View style={styles.locationCard}>\n            {currentLocation ? (\n              <>\n                <Text style={styles.locationText}>\n                  {currentLocation.address || 'Current Location'}\n                </Text>\n                <Text style={styles.locationCoords}>\n                  {currentLocation.latitude.toFixed(4)}, {currentLocation.longitude.toFixed(4)}\n                </Text>\n              </>\n            ) : (\n              <Text style={styles.locationText}>Getting your location...</Text>\n            )}\n            <Button\n              title=\"Update Location\"\n              variant=\"outline\"\n              size=\"small\"\n              onPress={getCurrentLocation}\n              style={styles.locationButton}\n            />\n          </View>\n        </View>\n\n        {/* Submit */}\n        <Button\n          title={isSubmitting ? 'Submitting...' : 'Request Service & Get Quote'}\n          onPress={handleSubmit}\n          disabled={isSubmitting || !selectedService || !description.trim() || !selectedVehicle}\n          style={styles.submitButton}\n        />\n      </View>\n\n      {/* VIN Scanner Modal */}\n      <Modal\n        visible={showVinScanner}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <VinScanner\n          onVinScanned={handleVinScanned}\n          onClose={() => setShowVinScanner(false)}\n        />\n      </Modal>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  productionBanner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.success + '10',\n    borderWidth: 1,\n    borderColor: Colors.success + '30',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 20,\n  },\n  productionText: {\n    fontSize: 12,\n    color: Colors.success,\n    fontWeight: '600',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  sectionSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n  },\n  vehicleSelector: {\n    gap: 8,\n  },\n  vehicleButton: {\n    alignSelf: 'flex-start',\n  },\n  addVehicleButton: {\n    alignSelf: 'flex-start',\n    marginTop: 8,\n  },\n  noVehicleCard: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  noVehicleText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n  },\n  aiHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  toggleButton: {\n    alignSelf: 'flex-end',\n  },\n  diagnosisPreview: {\n    backgroundColor: Colors.primary + '10',\n    borderWidth: 1,\n    borderColor: Colors.primary + '40',\n    borderRadius: 12,\n    padding: 12,\n  },\n  diagnosisHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  diagnosisTitle: {\n    flex: 1,\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  diagnosisPreviewText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  diagnosisCostText: {\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  selectedService: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  selectedServiceTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  selectedServiceDesc: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  priceRange: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  changeButton: {\n    alignSelf: 'flex-start',\n  },\n  serviceGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  serviceButton: {\n    minWidth: '48%',\n    marginBottom: 8,\n  },\n  toolsPreview: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n  },\n  toolsStats: {\n    marginBottom: 12,\n  },\n  toolsStatsText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  toolsList: {\n    gap: 8,\n  },\n  toolItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  toolName: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n  },\n  requiredBadge: {\n    backgroundColor: Colors.error + '20',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  requiredBadgeText: {\n    fontSize: 10,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  moreToolsText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontStyle: 'italic',\n  },\n  partsGrid: {\n    gap: 8,\n  },\n  partButton: {\n    alignSelf: 'flex-start',\n  },\n  vinSection: {\n    marginBottom: 8,\n  },\n  vinDisplay: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  vinText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',\n  },\n  vinButton: {\n    alignSelf: 'flex-start',\n  },\n  textArea: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 16,\n    minHeight: 100,\n  },\n  urgencyGrid: {\n    gap: 8,\n  },\n  urgencyButton: {\n    paddingVertical: 16,\n  },\n  urgencyButtonText: {\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  locationCard: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  locationText: {\n    fontSize: 16,\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  locationCoords: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginBottom: 12,\n  },\n  locationButton: {\n    alignSelf: 'flex-start',\n  },\n  submitButton: {\n    marginTop: 12,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +512 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport { Quote } from '@/types/service';\nimport { ChatComponent } from '@/components/ChatComponent';\nimport { PaymentModal } from '@/components/PaymentModal';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerQuotesScreen() {\n  const { serviceRequests, quotes, updateServiceRequest, updateQuote, addQuote } = useAppStore();\n  const { user } = useAuthStore();\n  const [selectedRequestForChat, setSelectedRequestForChat] = React.useState<string | null>(null);\n  const [selectedQuoteForPayment, setSelectedQuoteForPayment] = React.useState<Quote | null>(null);\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return Colors.warning;\n      case 'quoted': return Colors.primary;\n      case 'accepted': return Colors.success;\n      case 'in_progress': return Colors.primary;\n      case 'completed': return Colors.success;\n      default: return Colors.textMuted;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending': return 'Awaiting Quote';\n      case 'quoted': return 'Quote Ready';\n      case 'accepted': return 'Accepted';\n      case 'in_progress': return 'In Progress';\n      case 'completed': return 'Completed';\n      default: return status;\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency': return <Icons.AlertTriangle size={16} color={Colors.error} />;\n      case 'high': return <Icons.Clock size={16} color={Colors.warning} />;\n      default: return null;\n    }\n  };\n\n  const handleAcceptQuote = (quoteId: string) => {\n    const quote = quotes.find(q => q.id === quoteId);\n    if (!quote) return;\n\n    Alert.alert(\n      'Accept Quote',\n      `Accept quote for $${quote.totalCost}?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Accept & Pay',\n          onPress: () => {\n            setSelectedQuoteForPayment(quote);\n          }\n        }\n      ]\n    );\n  };\n\n  const handlePaymentSuccess = (quoteId: string) => {\n    const quote = quotes.find(q => q.id === quoteId);\n    if (!quote) return;\n\n    updateQuote(quoteId, { \n      status: 'accepted',\n      paidAt: new Date(),\n    });\n    updateServiceRequest(quote.serviceRequestId, { status: 'accepted' });\n    setSelectedQuoteForPayment(null);\n    \n    Alert.alert('Payment Successful', 'Your quote has been accepted and payment processed. We will contact you to schedule the service.');\n  };\n\n  const handleDeclineQuote = (quoteId: string) => {\n    const quote = quotes.find(q => q.id === quoteId);\n    if (!quote) return;\n\n    Alert.alert(\n      'Decline Quote',\n      'Are you sure you want to decline this quote?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Decline',\n          style: 'destructive',\n          onPress: () => {\n            updateQuote(quoteId, { status: 'declined' });\n            updateServiceRequest(quote.serviceRequestId, { status: 'pending' });\n          }\n        }\n      ]\n    );\n  };\n\n  const openChat = (requestId: string) => {\n    setSelectedRequestForChat(requestId);\n  };\n\n  if (selectedRequestForChat) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.chatHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForChat(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.chatHeaderTitle}>Service Chat</Text>\n        </View>\n        <ChatComponent\n          serviceRequestId={selectedRequestForChat}\n          currentUserId={user?.id || 'customer-1'}\n          currentUserName={user ? `${user.firstName} ${user.lastName}` : 'Customer'}\n          currentUserType=\"customer\"\n        />\n      </View>\n    );\n  }\n\n  if (serviceRequests.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.FileText size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Service Requests</Text>\n        <Text style={styles.emptyText}>\n          Your service requests and quotes will appear here once you submit a request.\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <>\n      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n        <View style={styles.content}>\n          {serviceRequests.map((request) => {\n            const requestQuote = quotes.find(q => q.serviceRequestId === request.id);\n            \n            return (\n              <View key={request.id} style={styles.requestCard}>\n                <View style={styles.requestHeader}>\n                  <View style={styles.requestTitleRow}>\n                    <Text style={styles.requestTitle}>\n                      {getServiceTitle(request.type)}\n                    </Text>\n                    {getUrgencyIcon(request.urgency)}\n                  </View>\n                  \n                  <View style={[styles.statusBadge, { backgroundColor: getStatusColor(request.status) + '20' }]}>\n                    <Text style={[styles.statusText, { color: getStatusColor(request.status) }]}>\n                      {getStatusText(request.status)}\n                    </Text>\n                  </View>\n                </View>\n\n                <Text style={styles.requestDescription} numberOfLines={2}>\n                  {request.description}\n                </Text>\n\n                {/* Photos */}\n                {request.photos && request.photos.length > 0 && (\n                  <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.photosContainer}>\n                    {request.photos.map((photo, index) => (\n                      <View key={index} style={styles.photoWrapper}>\n                        <Text style={styles.photoPlaceholder}>📷 Photo {index + 1}</Text>\n                      </View>\n                    ))}\n                  </ScrollView>\n                )}\n\n                <View style={styles.requestMeta}>\n                  <Text style={styles.requestDate}>\n                    {new Date(request.createdAt).toLocaleDateString()}\n                  </Text>\n                  {request.location && (\n                    <View style={styles.locationRow}>\n                      <Icons.MapPin size={12} color={Colors.textMuted} />\n                      <Text style={styles.locationText}>\n                        {request.location.address || 'Location provided'}\n                      </Text>\n                    </View>\n                  )}\n                </View>\n\n                {/* Action Buttons */}\n                <View style={styles.actionButtons}>\n                  <TouchableOpacity \n                    style={styles.chatButton}\n                    onPress={() => openChat(request.id)}\n                  >\n                    <Icons.MessageCircle size={16} color={Colors.primary} />\n                    <Text style={styles.chatButtonText}>Chat</Text>\n                  </TouchableOpacity>\n                </View>\n\n                {requestQuote && (\n                  <View style={styles.quoteSection}>\n                    <View style={styles.quoteDivider} />\n                    \n                    <View style={styles.quoteHeader}>\n                      <Text style={styles.quoteTitle}>Quote Details</Text>\n                      <Text style={styles.quoteTotal}>${requestQuote.totalCost}</Text>\n                    </View>\n\n                    <Text style={styles.quoteDescription}>{requestQuote.description}</Text>\n\n                    <View style={styles.quoteBreakdown}>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Labor</Text>\n                        <Text style={styles.quoteValue}>${requestQuote.laborCost}</Text>\n                      </View>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Parts</Text>\n                        <Text style={styles.quoteValue}>${requestQuote.partsCost}</Text>\n                      </View>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Estimated Time</Text>\n                        <Text style={styles.quoteValue}>{requestQuote.estimatedDuration}h</Text>\n                      </View>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Valid Until</Text>\n                        <Text style={styles.quoteValue}>\n                          {new Date(requestQuote.validUntil).toLocaleDateString()}\n                        </Text>\n                      </View>\n                    </View>\n\n                    {request.status === 'quoted' && requestQuote.status === 'pending' && (\n                      <View style={styles.quoteActions}>\n                        <TouchableOpacity \n                          style={styles.acceptButton}\n                          onPress={() => handleAcceptQuote(requestQuote.id)}\n                        >\n                          <Text style={styles.acceptButtonText}>Accept & Pay</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity \n                          style={styles.declineButton}\n                          onPress={() => handleDeclineQuote(requestQuote.id)}\n                        >\n                          <Text style={styles.declineButtonText}>Decline</Text>\n                        </TouchableOpacity>\n                      </View>\n                    )}\n\n                    {requestQuote.paidAt && (\n                      <View style={styles.paidIndicator}>\n                        <Icons.CheckCircle size={16} color={Colors.success} />\n                        <Text style={styles.paidText}>\n                          Paid on {new Date(requestQuote.paidAt).toLocaleDateString()}\n                        </Text>\n                      </View>\n                    )}\n                  </View>\n                )}\n              </View>\n            );\n          })}\n        </View>\n      </ScrollView>\n\n      {/* Payment Modal */}\n      {selectedQuoteForPayment && (\n        <PaymentModal\n          quote={selectedQuoteForPayment}\n          onSuccess={() => handlePaymentSuccess(selectedQuoteForPayment.id)}\n          onCancel={() => setSelectedQuoteForPayment(null)}\n        />\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  chatHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  backButton: {\n    marginRight: 12,\n  },\n  chatHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  requestCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  requestHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  requestTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    gap: 8,\n  },\n  requestTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  requestDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  photosContainer: {\n    marginBottom: 12,\n  },\n  photoWrapper: {\n    marginRight: 8,\n    backgroundColor: Colors.surface,\n    borderRadius: 8,\n    padding: 8,\n  },\n  photoPlaceholder: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  requestMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  requestDate: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  locationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  locationText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 8,\n  },\n  chatButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  chatButtonText: {\n    color: Colors.primary,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  quoteSection: {\n    marginTop: 16,\n  },\n  quoteDivider: {\n    height: 1,\n    backgroundColor: Colors.border,\n    marginBottom: 16,\n  },\n  quoteHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  quoteTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  quoteTotal: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.primary,\n  },\n  quoteDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  quoteBreakdown: {\n    gap: 8,\n    marginBottom: 16,\n  },\n  quoteRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  quoteLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  quoteValue: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  quoteActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  acceptButton: {\n    flex: 1,\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  acceptButtonText: {\n    color: Colors.black,\n    fontWeight: '600',\n    fontSize: 16,\n  },\n  declineButton: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    borderWidth: 1,\n    borderColor: Colors.border,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  declineButtonText: {\n    color: Colors.text,\n    fontWeight: '600',\n    fontSize: 16,\n  },\n  paidIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.success + '20',\n    padding: 12,\n    borderRadius: 8,\n    marginTop: 12,\n  },\n  paidText: {\n    color: Colors.success,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +487 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TextInput, Alert, TouchableOpacity } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { Contact, Vehicle } from '@/types/service';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerProfileScreen() {\n  const { contact, vehicles, setContact, addVehicle, removeVehicle } = useAppStore();\n  const { user, logout } = useAuthStore();\n  \n  // Contact form state\n  const [firstName, setFirstName] = useState(contact?.firstName || user?.firstName || '');\n  const [lastName, setLastName] = useState(contact?.lastName || user?.lastName || '');\n  const [phone, setPhone] = useState(contact?.phone || user?.phone || '');\n  const [email, setEmail] = useState(contact?.email || user?.email || '');\n  const [address, setAddress] = useState(contact?.address || '');\n  \n  // Vehicle form state\n  const [showVehicleForm, setShowVehicleForm] = useState(false);\n  const [vehicleMake, setVehicleMake] = useState('');\n  const [vehicleModel, setVehicleModel] = useState('');\n  const [vehicleYear, setVehicleYear] = useState('');\n  const [vehicleColor, setVehicleColor] = useState('');\n  const [vehicleMileage, setVehicleMileage] = useState('');\n\n  const handleSaveContact = () => {\n    if (!firstName.trim() || !lastName.trim() || !phone.trim() || !email.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields.');\n      return;\n    }\n\n    const contactData: Contact = {\n      id: contact?.id || Date.now().toString(),\n      firstName: firstName.trim(),\n      lastName: lastName.trim(),\n      phone: phone.trim(),\n      email: email.trim(),\n      address: address.trim() || undefined,\n    };\n\n    setContact(contactData);\n    Alert.alert('Success', 'Contact information saved.');\n  };\n\n  const handleAddVehicle = () => {\n    if (!vehicleMake.trim() || !vehicleModel.trim() || !vehicleYear.trim()) {\n      Alert.alert('Error', 'Please fill in make, model, and year.');\n      return;\n    }\n\n    const year = parseInt(vehicleYear);\n    if (isNaN(year) || year < 1900 || year > new Date().getFullYear() + 1) {\n      Alert.alert('Error', 'Please enter a valid year.');\n      return;\n    }\n\n    const vehicle: Vehicle = {\n      id: Date.now().toString(),\n      make: vehicleMake.trim(),\n      model: vehicleModel.trim(),\n      year,\n      color: vehicleColor.trim() || undefined,\n      mileage: vehicleMileage.trim() ? parseInt(vehicleMileage) : undefined,\n    };\n\n    addVehicle(vehicle);\n    \n    // Reset form\n    setVehicleMake('');\n    setVehicleModel('');\n    setVehicleYear('');\n    setVehicleColor('');\n    setVehicleMileage('');\n    setShowVehicleForm(false);\n    \n    Alert.alert('Success', 'Vehicle added to your profile.');\n  };\n\n  const handleRemoveVehicle = (vehicleId: string) => {\n    Alert.alert(\n      'Remove Vehicle',\n      'Are you sure you want to remove this vehicle?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Remove', style: 'destructive', onPress: () => removeVehicle(vehicleId) },\n      ]\n    );\n  };\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Sign Out', style: 'destructive', onPress: logout },\n      ]\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* User Info Header */}\n        <View style={styles.userHeader}>\n          <View style={styles.userInfo}>\n            <Text style={styles.userName}>{user?.firstName} {user?.lastName}</Text>\n            <Text style={styles.userEmail}>{user?.email}</Text>\n            <View style={styles.roleBadge}>\n              <Icons.User size={12} color={Colors.primary} />\n              <Text style={styles.roleText}>Customer</Text>\n            </View>\n          </View>\n          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n            <Icons.LogOut size={20} color={Colors.error} />\n          </TouchableOpacity>\n        </View>\n\n        {/* Contact Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Contact Information</Text>\n          \n          <View style={styles.inputRow}>\n            <View style={styles.inputHalf}>\n              <Text style={styles.inputLabel}>First Name *</Text>\n              <TextInput\n                style={styles.input}\n                value={firstName}\n                onChangeText={setFirstName}\n                placeholder=\"John\"\n                placeholderTextColor={Colors.textMuted}\n              />\n            </View>\n            <View style={styles.inputHalf}>\n              <Text style={styles.inputLabel}>Last Name *</Text>\n              <TextInput\n                style={styles.input}\n                value={lastName}\n                onChangeText={setLastName}\n                placeholder=\"Doe\"\n                placeholderTextColor={Colors.textMuted}\n              />\n            </View>\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Phone Number *</Text>\n            <TextInput\n              style={styles.input}\n              value={phone}\n              onChangeText={setPhone}\n              placeholder=\"(555) 123-4567\"\n              placeholderTextColor={Colors.textMuted}\n              keyboardType=\"phone-pad\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Email Address *</Text>\n            <TextInput\n              style={styles.input}\n              value={email}\n              onChangeText={setEmail}\n              placeholder=\"john@example.com\"\n              placeholderTextColor={Colors.textMuted}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Address</Text>\n            <TextInput\n              style={styles.input}\n              value={address}\n              onChangeText={setAddress}\n              placeholder=\"123 Main St, City, State\"\n              placeholderTextColor={Colors.textMuted}\n            />\n          </View>\n\n          <Button\n            title=\"Save Contact Info\"\n            onPress={handleSaveContact}\n            style={styles.saveButton}\n          />\n        </View>\n\n        {/* Vehicles */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Your Vehicles</Text>\n            <Button\n              title=\"Add Vehicle\"\n              variant=\"outline\"\n              size=\"small\"\n              onPress={() => setShowVehicleForm(true)}\n            />\n          </View>\n\n          {vehicles.length === 0 ? (\n            <View style={styles.emptyVehicles}>\n              <Icons.Car size={48} color={Colors.textMuted} />\n              <Text style={styles.emptyText}>No vehicles added yet</Text>\n              <Text style={styles.emptySubtext}>\n                Add your vehicle information to help us provide better service\n              </Text>\n            </View>\n          ) : (\n            <View style={styles.vehiclesList}>\n              {vehicles.map((vehicle) => (\n                <View key={vehicle.id} style={styles.vehicleCard}>\n                  <View style={styles.vehicleInfo}>\n                    <Text style={styles.vehicleTitle}>\n                      {vehicle.year} {vehicle.make} {vehicle.model}\n                    </Text>\n                    {vehicle.color && (\n                      <Text style={styles.vehicleDetail}>Color: {vehicle.color}</Text>\n                    )}\n                    {vehicle.mileage && (\n                      <Text style={styles.vehicleDetail}>Mileage: {vehicle.mileage.toLocaleString()}</Text>\n                    )}\n                  </View>\n                  <Button\n                    title=\"Remove\"\n                    variant=\"outline\"\n                    size=\"small\"\n                    onPress={() => handleRemoveVehicle(vehicle.id)}\n                    textStyle={{ color: Colors.error }}\n                    style={{ borderColor: Colors.error }}\n                  />\n                </View>\n              ))}\n            </View>\n          )}\n\n          {showVehicleForm && (\n            <View style={styles.vehicleForm}>\n              <Text style={styles.formTitle}>Add New Vehicle</Text>\n              \n              <View style={styles.inputRow}>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Make *</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleMake}\n                    onChangeText={setVehicleMake}\n                    placeholder=\"Toyota\"\n                    placeholderTextColor={Colors.textMuted}\n                  />\n                </View>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Model *</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleModel}\n                    onChangeText={setVehicleModel}\n                    placeholder=\"Camry\"\n                    placeholderTextColor={Colors.textMuted}\n                  />\n                </View>\n              </View>\n\n              <View style={styles.inputRow}>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Year *</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleYear}\n                    onChangeText={setVehicleYear}\n                    placeholder=\"2020\"\n                    placeholderTextColor={Colors.textMuted}\n                    keyboardType=\"numeric\"\n                  />\n                </View>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Color</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleColor}\n                    onChangeText={setVehicleColor}\n                    placeholder=\"Silver\"\n                    placeholderTextColor={Colors.textMuted}\n                  />\n                </View>\n              </View>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Mileage</Text>\n                <TextInput\n                  style={styles.input}\n                  value={vehicleMileage}\n                  onChangeText={setVehicleMileage}\n                  placeholder=\"50000\"\n                  placeholderTextColor={Colors.textMuted}\n                  keyboardType=\"numeric\"\n                />\n              </View>\n\n              <View style={styles.formActions}>\n                <Button\n                  title=\"Cancel\"\n                  variant=\"outline\"\n                  onPress={() => setShowVehicleForm(false)}\n                  style={styles.formButton}\n                />\n                <Button\n                  title=\"Add Vehicle\"\n                  onPress={handleAddVehicle}\n                  style={styles.formButton}\n                />\n              </View>\n            </View>\n          )}\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  userHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  userInfo: {\n    flex: 1,\n  },\n  userName: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  userEmail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  roleBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    alignSelf: 'flex-start',\n    gap: 4,\n  },\n  roleText: {\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputRow: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 16,\n  },\n  inputHalf: {\n    flex: 1,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 6,\n  },\n  input: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 16,\n  },\n  saveButton: {\n    marginTop: 8,\n  },\n  emptyVehicles: {\n    alignItems: 'center',\n    padding: 32,\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  emptyText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 12,\n    marginBottom: 4,\n  },\n  emptySubtext: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n  },\n  vehiclesList: {\n    gap: 12,\n  },\n  vehicleCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  vehicleInfo: {\n    flex: 1,\n  },\n  vehicleTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  vehicleDetail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  vehicleForm: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    marginTop: 16,\n  },\n  formTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  formActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginTop: 8,\n  },\n  formButton: {\n    flex: 1,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +278 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport { ServiceCard } from '@/components/ServiceCard';\nimport { MaintenanceReminders } from '@/components/MaintenanceReminders';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerHomeScreen() {\n  const { serviceRequests, vehicles } = useAppStore();\n  const { user, logout } = useAuthStore();\n  \n  const pendingRequests = serviceRequests.filter(r => r.status === 'pending').length;\n  const activeRequests = serviceRequests.filter(r => ['quoted', 'accepted', 'in_progress'].includes(r.status)).length;\n  const completedRequests = serviceRequests.filter(r => r.status === 'completed').length;\n\n  const handleServicePress = (serviceId: string) => {\n    router.push({\n      pathname: '/request',\n      params: { serviceType: serviceId }\n    });\n  };\n\n  const handleEmergencyPress = () => {\n    router.push({\n      pathname: '/request',\n      params: { serviceType: 'emergency_roadside', urgent: 'true' }\n    });\n  };\n\n  const handleQuickAction = (action: string) => {\n    switch (action) {\n      case 'quotes':\n        router.push('/quotes');\n        break;\n      case 'profile':\n        router.push('/profile');\n        break;\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* Welcome Section */}\n      <View style={styles.welcomeSection}>\n        <View style={styles.welcomeHeader}>\n          <View>\n            <Text style={styles.welcomeText}>\n              Welcome back, {user?.firstName}!\n            </Text>\n            <Text style={styles.subtitle}>\n              Professional mobile mechanic services at your location\n            </Text>\n          </View>\n          <TouchableOpacity style={styles.logoutButton} onPress={logout}>\n            <Icons.LogOut size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Emergency Button */}\n      <TouchableOpacity style={styles.emergencyButton} onPress={handleEmergencyPress}>\n        <Icons.Phone size={24} color={Colors.white} />\n        <View style={styles.emergencyContent}>\n          <Text style={styles.emergencyTitle}>Emergency Roadside</Text>\n          <Text style={styles.emergencySubtitle}>24/7 immediate assistance</Text>\n        </View>\n        <Icons.ChevronRight size={20} color={Colors.white} />\n      </TouchableOpacity>\n\n      {/* Quick Stats */}\n      <View style={styles.statsSection}>\n        <View style={styles.statsGrid}>\n          <TouchableOpacity \n            style={styles.statCard}\n            onPress={() => handleQuickAction('quotes')}\n          >\n            <Text style={styles.statNumber}>{pendingRequests + activeRequests}</Text>\n            <Text style={styles.statLabel}>Active Requests</Text>\n            <Icons.Clock size={16} color={Colors.primary} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.statCard}\n            onPress={() => handleQuickAction('quotes')}\n          >\n            <Text style={styles.statNumber}>{completedRequests}</Text>\n            <Text style={styles.statLabel}>Completed</Text>\n            <Icons.CheckCircle size={16} color={Colors.success} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.statCard}\n            onPress={() => handleQuickAction('profile')}\n          >\n            <Text style={styles.statNumber}>{vehicles.length}</Text>\n            <Text style={styles.statLabel}>Vehicles</Text>\n            <Icons.Car size={16} color={Colors.primary} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Maintenance Reminders */}\n      <MaintenanceReminders />\n\n      {/* Quick Actions */}\n      <View style={styles.quickActionsSection}>\n        <Text style={styles.sectionTitle}>Quick Actions</Text>\n        <View style={styles.quickActionsGrid}>\n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => handleQuickAction('quotes')}\n          >\n            <Icons.FileText size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>View Quotes</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => handleQuickAction('profile')}\n          >\n            <Icons.User size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>My Profile</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => router.push('/request')}\n          >\n            <Icons.Plus size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>New Request</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => router.push('/quotes')}\n          >\n            <Icons.History size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>Service History</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Services Section */}\n      <View style={styles.servicesSection}>\n        <Text style={styles.sectionTitle}>Our Services</Text>\n        {SERVICE_CATEGORIES.filter(s => s.id !== 'emergency_roadside').map((service) => (\n          <ServiceCard\n            key={service.id}\n            service={service}\n            onPress={() => handleServicePress(service.id)}\n          />\n        ))}\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  welcomeSection: {\n    padding: 20,\n    paddingBottom: 16,\n  },\n  welcomeHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n  },\n  welcomeText: {\n    fontSize: 28,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    lineHeight: 22,\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  emergencyButton: {\n    backgroundColor: Colors.error,\n    marginHorizontal: 20,\n    marginBottom: 24,\n    padding: 16,\n    borderRadius: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  emergencyContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  emergencyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  emergencySubtitle: {\n    fontSize: 14,\n    color: Colors.white,\n    opacity: 0.9,\n  },\n  statsSection: {\n    paddingHorizontal: 20,\n    marginBottom: 24,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  quickActionsSection: {\n    paddingHorizontal: 20,\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  quickActionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  quickActionCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    width: '48%',\n    minHeight: 80,\n    justifyContent: 'center',\n  },\n  quickActionText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  servicesSection: {\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "yes that's correct",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +76 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { Tabs, Redirect } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { useAuthStore } from '@/stores/auth-store';\nimport * as Icons from 'lucide-react-native';\n\nfunction TabBarIcon({ name, color }: { name: keyof typeof Icons; color: string }) {\n  const IconComponent = Icons[name] as any;\n  return IconComponent ? <IconComponent size={24} color={color} /> : null;\n}\n\nexport default function CustomerTabLayout() {\n  const { user, isAuthenticated } = useAuthStore();\n\n  // Redirect to auth if not authenticated or not a customer\n  if (!isAuthenticated || !user || user.role !== 'customer') {\n    return <Redirect href=\"/auth\" />;\n  }\n\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: Colors.primary,\n        tabBarInactiveTintColor: Colors.textMuted,\n        tabBarStyle: {\n          backgroundColor: Colors.surface,\n          borderTopColor: Colors.border,\n          borderTopWidth: 1,\n        },\n        headerStyle: {\n          backgroundColor: Colors.background,\n        },\n        headerTintColor: Colors.text,\n        headerTitleStyle: {\n          fontWeight: '600',\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          headerTitle: 'Heinicus Mobile Mechanic',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Home\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"request\"\n        options={{\n          title: 'Request Service',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Wrench\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"quotes\"\n        options={{\n          title: 'My Quotes',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"FileText\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"schedule\"\n        options={{\n          title: 'Schedule',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Calendar\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"User\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}"
            }
          }
        },
        {
          "display": "[Pasted text #2 +223 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "app\n\n(customer)\n\n_layout.tsx\n\n\nindex.tsx\n\n\nprofile.tsx\n\n\nquotes.tsx\n\n\nrequest.tsx\n\n\nschedule.tsx\n\n\n(mechanic)\n\n_layout.tsx\n\n\ncustomers.tsx\n\n\nindex.tsx\n\n\njobs.tsx\n\n\nmap.tsx\n\n\nprofile.tsx\n\n\n(tabs)\n\n\nauth\n\nindex.tsx\n\n\n_layout.tsx\n\n\n+not-found.tsx\n\n\ndev-switcher.tsx\n\n\nassets\n\nimages\n\nadaptive-icon.png\n\n\nfavicon.png\n\n\nicon.png\n\n\nsplash-icon.png\n\n\nbackend\n\ntrpc\n\nroutes\n\ndiagnosis\n\nroute.ts\n\n\nexample\n\nhi\n\napp-router.ts\n\n\ncreate-context.ts\n\n\nhono.ts\n\n\ncomponents\n\nAIAssistant.tsx\n\n\nAvailabilityCalendar.tsx\n\n\nAvailabilitySettings.tsx\n\n\nButton.tsx\n\n\nChatComponent.tsx\n\n\nLoadingSpinner.tsx\n\n\nMaintenanceReminders.tsx\n\n\nNotificationSettings.tsx\n\n\nOfflineIndicator.tsx\n\n\nPaymentModal.tsx\n\n\nPhotoUpload.tsx\n\n\nReportsAnalytics.tsx\n\n\nServiceCard.tsx\n\n\nServicePricingSettings.tsx\n\n\nSignatureCapture.tsx\n\n\nStripePayment.tsx\n\n\nToolsEquipmentSettings.tsx\n\n\nVinScanner.tsx\n\n\nWorkTimer.tsx\n\n\nconstants\n\ncolors.ts\n\n\npricing.ts\n\n\nservices.ts\n\n\nhooks\n\nuse-firebase.ts\n\n\nlib\n\ntrpc.ts\n\n\nservices\n\nfirebase-service.ts\n\n\nstores\n\napp-store.ts\n\n\nauth-store.ts\n\n\nsettings-store.ts\n\n\ntypes\n\nauth.ts\n\n\nservice.ts\n\n\nutils\n\nfirebase-config.ts\n\n\nquote-generator.ts\n\n\n.gitignore\n\n\napp.json\n\n\nbun.lock\n\n\npackage.json\n\n\ntsconfig.json"
            },
            "2": {
              "id": 2,
              "type": "text",
              "content": "app\n\n(customer)\n\n_layout.tsx\n\n\nindex.tsx\n\n\nprofile.tsx\n\n\nquotes.tsx\n\n\nrequest.tsx\n\n\nschedule.tsx\n\n\n(mechanic)\n\n_layout.tsx\n\n\ncustomers.tsx\n\n\nindex.tsx\n\n\njobs.tsx\n\n\nmap.tsx\n\n\nprofile.tsx\n\n\n(tabs)\n\n\nauth\n\nindex.tsx\n\n\n_layout.tsx\n\n\n+not-found.tsx\n\n\ndev-switcher.tsx\n\n\nassets\n\nimages\n\nadaptive-icon.png\n\n\nfavicon.png\n\n\nicon.png\n\n\nsplash-icon.png\n\n\nbackend\n\ntrpc\n\nroutes\n\ndiagnosis\n\nroute.ts\n\n\nexample\n\nhi\n\napp-router.ts\n\n\ncreate-context.ts\n\n\nhono.ts\n\n\ncomponents\n\nAIAssistant.tsx\n\n\nAvailabilityCalendar.tsx\n\n\nAvailabilitySettings.tsx\n\n\nButton.tsx\n\n\nChatComponent.tsx\n\n\nLoadingSpinner.tsx\n\n\nMaintenanceReminders.tsx\n\n\nNotificationSettings.tsx\n\n\nOfflineIndicator.tsx\n\n\nPaymentModal.tsx\n\n\nPhotoUpload.tsx\n\n\nReportsAnalytics.tsx\n\n\nServiceCard.tsx\n\n\nServicePricingSettings.tsx\n\n\nSignatureCapture.tsx\n\n\nStripePayment.tsx\n\n\nToolsEquipmentSettings.tsx\n\n\nVinScanner.tsx\n\n\nWorkTimer.tsx\n\n\nconstants\n\ncolors.ts\n\n\npricing.ts\n\n\nservices.ts\n\n\nhooks\n\nuse-firebase.ts\n\n\nlib\n\ntrpc.ts\n\n\nservices\n\nfirebase-service.ts\n\n\nstores\n\napp-store.ts\n\n\nauth-store.ts\n\n\nsettings-store.ts\n\n\ntypes\n\nauth.ts\n\n\nservice.ts\n\n\nutils\n\nfirebase-config.ts\n\n\nquote-generator.ts\n\n\n.gitignore\n\n\napp.json\n\n\nbun.lock\n\n\npackage.json\n\n\ntsconfig.json"
            }
          }
        },
        {
          "display": "do i need to give you the folder structure first",
          "pastedContents": {}
        },
        {
          "display": "i need to paste it here",
          "pastedContents": {}
        },
        {
          "display": "i have an app i need to finish coding",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "hasCompletedProjectOnboarding": true,
      "lastCost": 0.1557922500000001,
      "lastAPIDuration": 150990,
      "lastDuration": 789999,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 35998,
      "lastTotalOutputTokens": 1579,
      "lastTotalCacheCreationInputTokens": 19407,
      "lastTotalCacheReadInputTokens": 123394,
      "lastSessionId": "7cad9675-e49c-414d-96d5-e3dd58333fac"
    }
  },
  "oauthAccount": {
    "accountUuid": "f87055d4-2927-4a44-89b5-d576b4d412ca",
    "emailAddress": "matthew.heinen.2014@gmail.com",
    "organizationUuid": "e51c2afc-09b0-4ee0-a2ba-409ffa73886e",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "matthew.heinen.2014@gmail.com's Organization"
  },
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.33",
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1750777694165,
  "fallbackAvailableWarningThreshold": 0.5,
  "lastReleaseNotesSeen": "1.0.33"
}
{
  "numStartups": 4,
  "installMethod": "unknown",
  "autoUpdates": true,
  "theme": "dark-daltonized",
  "tipsHistory": {
    "new-user-warmup": 2,
    "memory-command": 3,
    "theme-command": 4
  },
  "firstStartTime": "2025-06-24T14:03:02.622Z",
  "userID": "33a2f6eef7d3ceee00d23044f84f8e3509ee45a0f0903e953f48c4479f5a9951",
  "projects": {
    "/home/big_d": {
      "allowedTools": [],
      "history": [
        {
          "display": "push that to github",
          "pastedContents": {}
        },
        {
          "display": "here is the stores folder code      [Pasted text #1 +435 lines]     [Pasted text #2 +219 lines]     [Pasted text #3 +243 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Vehicle, Contact, ServiceRequest, Quote, MaintenanceReminder, MaintenanceRecord, JobLog, ToolCheckItem } from '@/types/service';\nimport { PRODUCTION_CONFIG, logProductionEvent } from '@/utils/firebase-config';\n\ninterface AppState {\n  // User data\n  contact: Contact | null;\n  vehicles: Vehicle[];\n  \n  // Service requests\n  serviceRequests: ServiceRequest[];\n  quotes: Quote[];\n  maintenanceReminders: MaintenanceReminder[];\n  maintenanceHistory: MaintenanceRecord[];\n  jobLogs: JobLog[];\n  \n  // UI state\n  currentLocation: {\n    latitude: number;\n    longitude: number;\n    address?: string;\n  } | null;\n  \n  // Actions\n  setContact: (contact: Contact) => void;\n  addVehicle: (vehicle: Vehicle) => void;\n  updateVehicle: (id: string, updates: Partial<Vehicle>) => void;\n  removeVehicle: (id: string) => void;\n  \n  addServiceRequest: (request: ServiceRequest) => void;\n  updateServiceRequest: (id: string, updates: Partial<ServiceRequest>) => void;\n  \n  addQuote: (quote: Quote) => void;\n  updateQuote: (id: string, updates: Partial<Quote>) => void;\n  \n  addMaintenanceReminder: (reminder: MaintenanceReminder) => void;\n  updateMaintenanceReminder: (id: string, updates: Partial<MaintenanceReminder>) => void;\n  removeMaintenanceReminder: (id: string) => void;\n  \n  addMaintenanceRecord: (record: MaintenanceRecord) => void;\n  updateMaintenanceRecord: (id: string, updates: Partial<MaintenanceRecord>) => void;\n  \n  addJobLog: (log: JobLog) => void;\n  updateJobLog: (id: string, updates: Partial<JobLog>) => void;\n  \n  setCurrentLocation: (location: { latitude: number; longitude: number; address?: string }) => void;\n  \n  // Tools management\n  updateJobTools: (jobId: string, toolsChecked: { [toolId: string]: boolean }) => void;\n  completeToolsCheck: (jobId: string, notes?: string) => void;\n  getJobToolsStatus: (jobId: string) => { total: number; checked: number; allRequired: boolean };\n  \n  // Maintenance tracking\n  getVehicleMaintenanceHistory: (vehicleId: string) => MaintenanceRecord[];\n  getUpcomingMaintenance: (vehicleId: string) => MaintenanceReminder[];\n  markReminderAsSent: (reminderId: string) => void;\n  completeMaintenanceReminder: (reminderId: string, serviceRecord: MaintenanceRecord) => void;\n  \n  // Job tracking\n  getJobLogs: (jobId: string) => JobLog[];\n  getActiveJobTimer: (jobId: string) => JobLog | null;\n  getTotalJobTime: (jobId: string) => number;\n  \n  // Payment tracking\n  getQuotesByStatus: (status: Quote['status']) => Quote[];\n  getTotalRevenue: (startDate?: Date, endDate?: Date) => number;\n  getPaymentHistory: () => Quote[];\n  \n  // Production logging\n  logEvent: (event: string, data: any) => void;\n}\n\nexport const useAppStore = create<AppState>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      contact: null,\n      vehicles: [],\n      serviceRequests: [],\n      quotes: [],\n      maintenanceReminders: [],\n      maintenanceHistory: [],\n      jobLogs: [],\n      currentLocation: null,\n      \n      // Actions\n      setContact: (contact) => {\n        logProductionEvent('contact_updated', { contactId: contact.id });\n        set({ contact });\n      },\n      \n      addVehicle: (vehicle) => {\n        logProductionEvent('vehicle_added', { \n          vehicleId: vehicle.id, \n          make: vehicle.make, \n          model: vehicle.model, \n          year: vehicle.year \n        });\n        set((state) => ({\n          vehicles: [...state.vehicles, vehicle]\n        }));\n      },\n      \n      updateVehicle: (id, updates) => {\n        logProductionEvent('vehicle_updated', { vehicleId: id, updates: Object.keys(updates) });\n        set((state) => ({\n          vehicles: state.vehicles.map(v => v.id === id ? { ...v, ...updates } : v)\n        }));\n      },\n      \n      removeVehicle: (id) => {\n        logProductionEvent('vehicle_removed', { vehicleId: id });\n        set((state) => ({\n          vehicles: state.vehicles.filter(v => v.id !== id),\n          maintenanceHistory: state.maintenanceHistory.filter(r => r.vehicleId !== id),\n          maintenanceReminders: state.maintenanceReminders.filter(r => r.vehicleId !== id),\n        }));\n      },\n      \n      addServiceRequest: (request) => {\n        logProductionEvent('service_request_added', { \n          requestId: request.id, \n          serviceType: request.type, \n          urgency: request.urgency,\n          toolsCount: request.requiredTools?.length || 0\n        });\n        set((state) => ({\n          serviceRequests: [...state.serviceRequests, request]\n        }));\n      },\n      \n      updateServiceRequest: (id, updates) => {\n        logProductionEvent('service_request_updated', { \n          requestId: id, \n          updates: Object.keys(updates),\n          newStatus: updates.status\n        });\n        set((state) => ({\n          serviceRequests: state.serviceRequests.map(r => r.id === id ? { ...r, ...updates } : r)\n        }));\n      },\n      \n      addQuote: (quote) => {\n        logProductionEvent('quote_added', { \n          quoteId: quote.id, \n          serviceRequestId: quote.serviceRequestId, \n          totalCost: quote.totalCost \n        });\n        set((state) => ({\n          quotes: [...state.quotes, quote]\n        }));\n      },\n      \n      updateQuote: (id, updates) => {\n        logProductionEvent('quote_updated', { \n          quoteId: id, \n          updates: Object.keys(updates),\n          newStatus: updates.status\n        });\n        set((state) => ({\n          quotes: state.quotes.map(q => q.id === id ? { ...q, ...updates } : q)\n        }));\n      },\n      \n      addMaintenanceReminder: (reminder) => {\n        logProductionEvent('maintenance_reminder_added', { \n          reminderId: reminder.id, \n          vehicleId: reminder.vehicleId, \n          serviceType: reminder.serviceType \n        });\n        set((state) => ({\n          maintenanceReminders: [...state.maintenanceReminders, reminder]\n        }));\n      },\n      \n      updateMaintenanceReminder: (id, updates) => set((state) => ({\n        maintenanceReminders: state.maintenanceReminders.map(r => r.id === id ? { ...r, ...updates } : r)\n      })),\n      \n      removeMaintenanceReminder: (id) => set((state) => ({\n        maintenanceReminders: state.maintenanceReminders.filter(r => r.id !== id)\n      })),\n      \n      addMaintenanceRecord: (record) => {\n        logProductionEvent('maintenance_record_added', { \n          recordId: record.id, \n          vehicleId: record.vehicleId, \n          serviceType: record.serviceType,\n          cost: record.cost\n        });\n        \n        set((state) => {\n          // Also update the vehicle's maintenance history\n          const updatedVehicles = state.vehicles.map(vehicle => {\n            if (vehicle.id === record.vehicleId) {\n              return {\n                ...vehicle,\n                maintenanceHistory: [...(vehicle.maintenanceHistory || []), record],\n                lastServiceDate: record.performedAt,\n                nextServiceDue: record.nextDueDate,\n              };\n            }\n            return vehicle;\n          });\n\n          return {\n            maintenanceHistory: [...state.maintenanceHistory, record],\n            vehicles: updatedVehicles,\n          };\n        });\n      },\n      \n      updateMaintenanceRecord: (id, updates) => set((state) => ({\n        maintenanceHistory: state.maintenanceHistory.map(r => r.id === id ? { ...r, ...updates } : r)\n      })),\n      \n      addJobLog: (log) => {\n        logProductionEvent('job_log_added', { \n          logId: log.id, \n          jobId: log.jobId, \n          mechanicId: log.mechanicId,\n          startTime: log.startTime.toISOString()\n        });\n        set((state) => ({\n          jobLogs: [...state.jobLogs, log]\n        }));\n      },\n      \n      updateJobLog: (id, updates) => {\n        logProductionEvent('job_log_updated', { \n          logId: id, \n          updates: Object.keys(updates),\n          duration: updates.duration\n        });\n        set((state) => ({\n          jobLogs: state.jobLogs.map(l => l.id === id ? { ...l, ...updates } : l)\n        }));\n      },\n      \n      setCurrentLocation: (location) => set({ currentLocation: location }),\n      \n      // Tools management\n      updateJobTools: (jobId: string, toolsChecked: { [toolId: string]: boolean }) => {\n        const checkedCount = Object.values(toolsChecked).filter(Boolean).length;\n        logProductionEvent('job_tools_updated', { \n          jobId, \n          mechanicId: 'mechanic-cody',\n          checkedCount,\n          totalTools: Object.keys(toolsChecked).length\n        });\n        \n        set((state) => ({\n          serviceRequests: state.serviceRequests.map(r => \n            r.id === jobId ? { ...r, toolsChecked } : r\n          )\n        }));\n      },\n      \n      completeToolsCheck: (jobId: string, notes?: string) => {\n        logProductionEvent('tools_check_completed', { \n          jobId, \n          mechanicId: 'mechanic-cody',\n          hasNotes: !!notes\n        });\n        \n        set((state) => ({\n          serviceRequests: state.serviceRequests.map(r => \n            r.id === jobId ? { \n              ...r, \n              toolsCheckCompletedAt: new Date(),\n              toolsNotes: notes\n            } : r\n          )\n        }));\n      },\n      \n      getJobToolsStatus: (jobId: string) => {\n        const state = get();\n        const job = state.serviceRequests.find(r => r.id === jobId);\n        if (!job || !job.requiredTools) return { total: 0, checked: 0, allRequired: false };\n        \n        const total = job.requiredTools.length;\n        const checked = Object.values(job.toolsChecked || {}).filter(Boolean).length;\n        const requiredTools = job.requiredTools; // All tools in requiredTools are required\n        const allRequired = requiredTools.every(toolId => job.toolsChecked?.[toolId]);\n        \n        return { total, checked, allRequired };\n      },\n      \n      // Maintenance tracking helpers\n      getVehicleMaintenanceHistory: (vehicleId: string) => {\n        const state = get();\n        return state.maintenanceHistory.filter(record => record.vehicleId === vehicleId)\n          .sort((a, b) => b.performedAt.getTime() - a.performedAt.getTime());\n      },\n      \n      getUpcomingMaintenance: (vehicleId: string) => {\n        const state = get();\n        const today = new Date();\n        return state.maintenanceReminders\n          .filter(reminder => \n            reminder.vehicleId === vehicleId && \n            reminder.dueDate >= today &&\n            !reminder.completed\n          )\n          .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime());\n      },\n      \n      markReminderAsSent: (reminderId: string) => set((state) => ({\n        maintenanceReminders: state.maintenanceReminders.map(r => \n          r.id === reminderId ? { ...r, reminderSent: true } : r\n        )\n      })),\n\n      completeMaintenanceReminder: (reminderId: string, serviceRecord: MaintenanceRecord) => {\n        logProductionEvent('maintenance_reminder_completed', { \n          reminderId, \n          serviceRecordId: serviceRecord.id,\n          vehicleId: serviceRecord.vehicleId\n        });\n        \n        set((state) => {\n          // Mark reminder as completed\n          const updatedReminders = state.maintenanceReminders.map(r => \n            r.id === reminderId ? { ...r, completed: true, completedAt: new Date() } : r\n          );\n\n          // Add service record\n          const updatedHistory = [...state.maintenanceHistory, serviceRecord];\n\n          // Update vehicle\n          const updatedVehicles = state.vehicles.map(vehicle => {\n            if (vehicle.id === serviceRecord.vehicleId) {\n              return {\n                ...vehicle,\n                maintenanceHistory: [...(vehicle.maintenanceHistory || []), serviceRecord],\n                lastServiceDate: serviceRecord.performedAt,\n                nextServiceDue: serviceRecord.nextDueDate,\n              };\n            }\n            return vehicle;\n          });\n\n          return {\n            maintenanceReminders: updatedReminders,\n            maintenanceHistory: updatedHistory,\n            vehicles: updatedVehicles,\n          };\n        });\n      },\n      \n      // Job tracking helpers\n      getJobLogs: (jobId: string) => {\n        const state = get();\n        return state.jobLogs.filter(log => log.jobId === jobId)\n          .sort((a, b) => a.startTime.getTime() - b.startTime.getTime());\n      },\n      \n      getActiveJobTimer: (jobId: string) => {\n        const state = get();\n        return state.jobLogs.find(log => log.jobId === jobId && !log.endTime) || null;\n      },\n\n      getTotalJobTime: (jobId: string) => {\n        const state = get();\n        const logs = state.jobLogs.filter(log => log.jobId === jobId && log.endTime);\n        return logs.reduce((total, log) => {\n          if (log.endTime) {\n            return total + (log.endTime.getTime() - log.startTime.getTime());\n          }\n          return total;\n        }, 0);\n      },\n\n      // Payment tracking helpers\n      getQuotesByStatus: (status: Quote['status']) => {\n        const state = get();\n        return state.quotes.filter(quote => quote.status === status);\n      },\n\n      getTotalRevenue: (startDate?: Date, endDate?: Date) => {\n        const state = get();\n        return state.quotes\n          .filter(quote => {\n            if (!['paid', 'deposit_paid'].includes(quote.status) || !quote.paidAt) return false;\n            if (startDate && quote.paidAt < startDate) return false;\n            if (endDate && quote.paidAt > endDate) return false;\n            return true;\n          })\n          .reduce((total, quote) => total + quote.totalCost, 0);\n      },\n\n      getPaymentHistory: () => {\n        const state = get();\n        return state.quotes\n          .filter(quote => ['paid', 'deposit_paid'].includes(quote.status) && quote.paidAt)\n          .sort((a, b) => (b.paidAt?.getTime() || 0) - (a.paidAt?.getTime() || 0));\n      },\n      \n      // Production logging\n      logEvent: (event: string, data: any) => {\n        const timestamp = new Date().toISOString();\n        const logData = {\n          event,\n          data,\n          timestamp,\n          environment: 'production',\n          mechanicId: 'mechanic-cody', // Production: Cody only\n        };\n        \n        // Console logging for production monitoring\n        console.log('App Event:', logData);\n        \n        // Production: Send to analytics service\n        if (PRODUCTION_CONFIG.enableToolsModule) {\n          logProductionEvent(event, { ...data, timestamp });\n        }\n      },\n    }),\n    {\n      name: 'heinicus-mechanic-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: (state) => ({\n        contact: state.contact,\n        vehicles: state.vehicles,\n        serviceRequests: state.serviceRequests,\n        quotes: state.quotes,\n        maintenanceReminders: state.maintenanceReminders,\n        maintenanceHistory: state.maintenanceHistory,\n        jobLogs: state.jobLogs,\n      }),\n    }\n  )\n);"
            },
            "2": {
              "id": 2,
              "type": "text",
              "content": "import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { User, AuthState } from '@/types/auth';\n\ninterface AuthStore extends AuthState {\n  login: (email: string, password: string) => Promise<boolean>;\n  signup: (email: string, password: string, firstName: string, lastName: string, phone?: string) => Promise<boolean>;\n  logout: () => void;\n  setUser: (user: User) => void;\n}\n\n// Production configuration - Only Cody as mechanic\nconst PRODUCTION_MECHANIC = {\n  id: 'mechanic-cody',\n  email: 'matthew.heinen.2014@gmail.com',\n  firstName: 'Cody',\n  lastName: 'Owner',\n  role: 'mechanic' as const,\n  phone: '(555) 987-6543',\n  createdAt: new Date(),\n  isActive: true,\n};\n\n// Store for registered customers (in production, this would be in a database)\nlet registeredCustomers: User[] = [\n  // Demo customer for testing\n  {\n    id: 'customer-demo',\n    email: 'customer@example.com',\n    firstName: 'Demo',\n    lastName: 'Customer',\n    role: 'customer',\n    phone: '(555) 123-4567',\n    createdAt: new Date(),\n    isActive: true,\n  }\n];\n\nexport const useAuthStore = create<AuthStore>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      isLoading: false,\n      isAuthenticated: false,\n\n      signup: async (email: string, password: string, firstName: string, lastName: string, phone?: string) => {\n        set({ isLoading: true });\n        \n        // Production logging\n        console.log('Customer signup attempt:', { \n          email, \n          timestamp: new Date().toISOString(),\n          environment: 'production'\n        });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Check if user already exists\n        const existingUser = registeredCustomers.find(u => u.email === email) || \n                           (PRODUCTION_MECHANIC.email === email ? PRODUCTION_MECHANIC : null);\n        \n        if (existingUser) {\n          console.log('Signup failed - user exists:', { email, timestamp: new Date().toISOString() });\n          set({ isLoading: false });\n          return false;\n        }\n        \n        // Create new customer\n        const newCustomer: User = {\n          id: `customer-${Date.now()}`,\n          email,\n          firstName,\n          lastName,\n          role: 'customer',\n          phone,\n          createdAt: new Date(),\n          isActive: true,\n        };\n        \n        // Add to registered customers (in production, this would be saved to database)\n        registeredCustomers.push(newCustomer);\n        \n        // Production logging\n        console.log('Customer signup successful:', { \n          userId: newCustomer.id, \n          email: newCustomer.email,\n          environment: 'production',\n          timestamp: new Date().toISOString() \n        });\n        \n        // Auto-login after signup\n        set({ \n          user: newCustomer, \n          isAuthenticated: true, \n          isLoading: false \n        });\n        \n        return true;\n      },\n\n      login: async (email: string, password: string) => {\n        set({ isLoading: true });\n        \n        // Production logging\n        console.log('Login attempt:', { \n          email, \n          timestamp: new Date().toISOString(),\n          environment: 'production'\n        });\n        \n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Check mechanic login first\n        if (email === PRODUCTION_MECHANIC.email) {\n          const validPassword = password === 'RoosTer669072!@';\n          \n          if (validPassword) {\n            console.log('Mechanic login successful:', { \n              userId: PRODUCTION_MECHANIC.id, \n              role: PRODUCTION_MECHANIC.role, \n              environment: 'production',\n              timestamp: new Date().toISOString() \n            });\n            \n            set({ \n              user: PRODUCTION_MECHANIC, \n              isAuthenticated: true, \n              isLoading: false \n            });\n            return true;\n          }\n        }\n        \n        // Check customer login\n        const customer = registeredCustomers.find(u => u.email === email);\n        \n        if (customer) {\n          // For demo purposes, accept any password for customers\n          // In production, you'd verify the actual password hash\n          console.log('Customer login successful:', { \n            userId: customer.id, \n            role: customer.role, \n            environment: 'production',\n            timestamp: new Date().toISOString() \n          });\n          \n          set({ \n            user: customer, \n            isAuthenticated: true, \n            isLoading: false \n          });\n          return true;\n        }\n        \n        // Production logging\n        console.log('Login failed:', { \n          email, \n          environment: 'production',\n          timestamp: new Date().toISOString() \n        });\n        \n        set({ isLoading: false });\n        return false;\n      },\n\n      logout: () => {\n        const currentUser = get().user;\n        \n        // Production logging\n        console.log('User logout:', { \n          userId: currentUser?.id, \n          role: currentUser?.role,\n          environment: 'production',\n          timestamp: new Date().toISOString() \n        });\n        \n        set({ \n          user: null, \n          isAuthenticated: false \n        });\n      },\n\n      setUser: (user: User) => {\n        // Production security: Validate user role\n        if (user.role === 'mechanic' && user.id !== 'mechanic-cody') {\n          console.warn('Unauthorized mechanic access attempt:', { \n            userId: user.id, \n            environment: 'production',\n            timestamp: new Date().toISOString() \n          });\n          return;\n        }\n        \n        // Production logging\n        console.log('User set:', { \n          userId: user.id, \n          role: user.role, \n          environment: 'production',\n          timestamp: new Date().toISOString() \n        });\n        \n        set({ \n          user, \n          isAuthenticated: true \n        });\n      },\n    }),\n    {\n      name: 'heinicus-auth-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: (state) => ({\n        user: state.user,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);"
            },
            "3": {
              "id": 3,
              "type": "text",
              "content": "import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\ninterface AvailabilitySettings {\n  isAvailable: boolean;\n  workingDays: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n  workingHours: {\n    start: string;\n    end: string;\n  };\n  emergencyAvailable: boolean;\n  maxJobsPerDay: number;\n  travelRadius: number;\n  autoAcceptJobs: boolean;\n}\n\ninterface NotificationSettings {\n  pushNotifications: boolean;\n  emailNotifications: boolean;\n  smsNotifications: boolean;\n  jobUpdates: boolean;\n  maintenanceReminders: boolean;\n  promotionalOffers: boolean;\n  emergencyAlerts: boolean;\n}\n\ninterface PricingSettings {\n  laborRate: number;\n  emergencyRate: number;\n  travelFee: number;\n  minimumCharge: number;\n  servicePricing: {\n    [serviceType: string]: {\n      basePrice: number;\n      laborRate: number;\n      estimatedHours: number;\n    };\n  };\n  discounts: {\n    seniorDiscount: number;\n    militaryDiscount: number;\n    repeatCustomerDiscount: number;\n  };\n}\n\ninterface ToolsSettings {\n  availableTools: { [toolId: string]: boolean };\n  customTools: Array<{\n    id: string;\n    name: string;\n    category: string;\n    required: boolean;\n    description?: string;\n  }>;\n  toolConditions: { [toolId: string]: 'excellent' | 'good' | 'fair' | 'needs_replacement' };\n  toolNotes: { [toolId: string]: string };\n}\n\ninterface SettingsState {\n  // Settings\n  availability: AvailabilitySettings;\n  notifications: NotificationSettings;\n  pricing: PricingSettings;\n  tools: ToolsSettings;\n  \n  // Actions\n  updateAvailabilitySettings: (settings: Partial<AvailabilitySettings>) => void;\n  updateNotificationSettings: (settings: Partial<NotificationSettings>) => void;\n  updatePricingSettings: (settings: Partial<PricingSettings>) => void;\n  updateToolsSettings: (settings: Partial<ToolsSettings>) => void;\n  \n  // Getters\n  getServicePrice: (serviceType: string) => number;\n  isToolAvailable: (toolId: string) => boolean;\n  getToolCondition: (toolId: string) => string;\n  isCurrentlyAvailable: () => boolean;\n  getWorkingHoursForDay: (day: string) => { start: string; end: string } | null;\n}\n\nconst defaultAvailabilitySettings: AvailabilitySettings = {\n  isAvailable: true,\n  workingDays: {\n    monday: true,\n    tuesday: true,\n    wednesday: true,\n    thursday: true,\n    friday: true,\n    saturday: true,\n    sunday: false,\n  },\n  workingHours: {\n    start: '08:00',\n    end: '18:00',\n  },\n  emergencyAvailable: true,\n  maxJobsPerDay: 8,\n  travelRadius: 25,\n  autoAcceptJobs: false,\n};\n\nconst defaultNotificationSettings: NotificationSettings = {\n  pushNotifications: true,\n  emailNotifications: true,\n  smsNotifications: false,\n  jobUpdates: true,\n  maintenanceReminders: true,\n  promotionalOffers: false,\n  emergencyAlerts: true,\n};\n\nconst defaultPricingSettings: PricingSettings = {\n  laborRate: 85,\n  emergencyRate: 125,\n  travelFee: 25,\n  minimumCharge: 50,\n  servicePricing: {\n    oil_change: { basePrice: 45, laborRate: 75, estimatedHours: 0.5 },\n    brake_service: { basePrice: 150, laborRate: 85, estimatedHours: 2 },\n    tire_service: { basePrice: 80, laborRate: 75, estimatedHours: 1 },\n    battery_service: { basePrice: 120, laborRate: 75, estimatedHours: 0.75 },\n    engine_diagnostic: { basePrice: 100, laborRate: 85, estimatedHours: 1.5 },\n    transmission: { basePrice: 200, laborRate: 95, estimatedHours: 3 },\n    ac_service: { basePrice: 90, laborRate: 85, estimatedHours: 1.5 },\n    general_repair: { basePrice: 75, laborRate: 85, estimatedHours: 2 },\n    emergency_roadside: { basePrice: 65, laborRate: 95, estimatedHours: 1 },\n  },\n  discounts: {\n    seniorDiscount: 10,\n    militaryDiscount: 15,\n    repeatCustomerDiscount: 5,\n  },\n};\n\nconst defaultToolsSettings: ToolsSettings = {\n  availableTools: {},\n  customTools: [],\n  toolConditions: {},\n  toolNotes: {},\n};\n\nexport const useSettingsStore = create<SettingsState>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      availability: defaultAvailabilitySettings,\n      notifications: defaultNotificationSettings,\n      pricing: defaultPricingSettings,\n      tools: defaultToolsSettings,\n      \n      // Actions\n      updateAvailabilitySettings: (settings) => {\n        set((state) => ({\n          availability: { ...state.availability, ...settings }\n        }));\n      },\n      \n      updateNotificationSettings: (settings) => {\n        set((state) => ({\n          notifications: { ...state.notifications, ...settings }\n        }));\n      },\n      \n      updatePricingSettings: (settings) => {\n        set((state) => ({\n          pricing: { ...state.pricing, ...settings }\n        }));\n      },\n      \n      updateToolsSettings: (settings) => {\n        set((state) => ({\n          tools: { ...state.tools, ...settings }\n        }));\n      },\n      \n      // Getters\n      getServicePrice: (serviceType: string) => {\n        const state = get();\n        const servicePricing = state.pricing.servicePricing[serviceType];\n        if (!servicePricing) return state.pricing.laborRate;\n        \n        return servicePricing.basePrice + (servicePricing.laborRate * servicePricing.estimatedHours);\n      },\n      \n      isToolAvailable: (toolId: string) => {\n        const state = get();\n        return state.tools.availableTools[toolId] || false;\n      },\n      \n      getToolCondition: (toolId: string) => {\n        const state = get();\n        return state.tools.toolConditions[toolId] || 'good';\n      },\n      \n      isCurrentlyAvailable: () => {\n        const state = get();\n        const now = new Date();\n        \n        // Get day name and convert to lowercase\n        const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n        const currentDay = dayNames[now.getDay()] as keyof typeof state.availability.workingDays;\n        const currentTime = now.toTimeString().slice(0, 5); // HH:MM format\n        \n        // Check if available today\n        if (!state.availability.isAvailable || !state.availability.workingDays[currentDay]) {\n          return false;\n        }\n        \n        // Check if within working hours\n        const { start, end } = state.availability.workingHours;\n        return currentTime >= start && currentTime <= end;\n      },\n      \n      getWorkingHoursForDay: (day: string) => {\n        const state = get();\n        const dayKey = day.toLowerCase() as keyof typeof state.availability.workingDays;\n        \n        if (state.availability.workingDays[dayKey]) {\n          return state.availability.workingHours;\n        }\n        \n        return null;\n      },\n    }),\n    {\n      name: 'heinicus-settings-storage',\n      storage: createJSONStorage(() => AsyncStorage),\n      partialize: (state) => ({\n        availability: state.availability,\n        notifications: state.notifications,\n        pricing: state.pricing,\n        tools: state.tools,\n      }),\n    }\n  )\n);"
            }
          }
        },
        {
          "display": "here is the services folder code     [Pasted text #1 +192 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "// Firebase service layer for production use\n// This provides the interface for Firebase operations\n\nimport { firebaseConfig, COLLECTIONS } from '@/utils/firebase-config';\nimport { User } from '@/types/auth';\nimport { ServiceRequest, Quote, Vehicle, ChatMessage } from '@/types/service';\n\n// Mock implementation - replace with actual Firebase SDK calls in production\nexport class FirebaseService {\n  private static instance: FirebaseService;\n  \n  static getInstance(): FirebaseService {\n    if (!FirebaseService.instance) {\n      FirebaseService.instance = new FirebaseService();\n    }\n    return FirebaseService.instance;\n  }\n\n  // Authentication\n  async signUp(email: string, password: string, userData: Partial<User>): Promise<User> {\n    // Production logging\n    console.log('Firebase signup attempt:', { email, timestamp: new Date().toISOString() });\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const user: User = {\n      id: `user_${Date.now()}`,\n      email,\n      firstName: userData.firstName || '',\n      lastName: userData.lastName || '',\n      role: userData.role || 'customer',\n      phone: userData.phone,\n      createdAt: new Date(),\n      isActive: true,\n    };\n    \n    // In production: firebase.auth().createUserWithEmailAndPassword()\n    // Then: firestore.collection('users').doc(user.id).set(user)\n    \n    console.log('Firebase signup successful:', { userId: user.id, email: user.email });\n    return user;\n  }\n\n  async signIn(email: string, password: string): Promise<User | null> {\n    // Production logging\n    console.log('Firebase signin attempt:', { email, timestamp: new Date().toISOString() });\n    \n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // In production: firebase.auth().signInWithEmailAndPassword()\n    // Then: fetch user data from Firestore\n    \n    // Mock user lookup\n    if (email === 'customer@example.com') {\n      const user: User = {\n        id: 'customer-demo',\n        email,\n        firstName: 'Demo',\n        lastName: 'Customer',\n        role: 'customer',\n        phone: '(555) 123-4567',\n        createdAt: new Date(),\n        isActive: true,\n      };\n      \n      console.log('Firebase signin successful:', { userId: user.id, email: user.email });\n      return user;\n    }\n    \n    console.log('Firebase signin failed:', { email });\n    return null;\n  }\n\n  async signOut(): Promise<void> {\n    console.log('Firebase signout');\n    // In production: firebase.auth().signOut()\n  }\n\n  async resetPassword(email: string): Promise<boolean> {\n    console.log('Firebase password reset:', { email });\n    // In production: firebase.auth().sendPasswordResetEmail(email)\n    return true;\n  }\n\n  async updateProfile(userId: string, updates: Partial<User>): Promise<void> {\n    console.log('Firebase profile update:', { userId, updates });\n    // In production: firestore.collection('users').doc(userId).update(updates)\n  }\n\n  // Service Requests\n  async createServiceRequest(request: ServiceRequest): Promise<string> {\n    console.log('Firebase create service request:', { requestId: request.id });\n    // In production: firestore.collection(COLLECTIONS.SERVICE_REQUESTS).add(request)\n    return request.id;\n  }\n\n  async getServiceRequests(userId: string): Promise<ServiceRequest[]> {\n    console.log('Firebase get service requests:', { userId });\n    // In production: firestore.collection(COLLECTIONS.SERVICE_REQUESTS)\n    //   .where('userId', '==', userId).get()\n    return [];\n  }\n\n  async updateServiceRequest(requestId: string, updates: Partial<ServiceRequest>): Promise<void> {\n    console.log('Firebase update service request:', { requestId, updates });\n    // In production: firestore.collection(COLLECTIONS.SERVICE_REQUESTS)\n    //   .doc(requestId).update(updates)\n  }\n\n  // Quotes\n  async createQuote(quote: Quote): Promise<string> {\n    console.log('Firebase create quote:', { quoteId: quote.id });\n    // In production: firestore.collection(COLLECTIONS.QUOTES).add(quote)\n    return quote.id;\n  }\n\n  async getQuotes(serviceRequestId: string): Promise<Quote[]> {\n    console.log('Firebase get quotes:', { serviceRequestId });\n    // In production: firestore.collection(COLLECTIONS.QUOTES)\n    //   .where('serviceRequestId', '==', serviceRequestId).get()\n    return [];\n  }\n\n  // Chat Messages\n  async sendMessage(message: ChatMessage): Promise<string> {\n    console.log('Firebase send message:', { messageId: message.id });\n    // In production: firestore.collection(COLLECTIONS.CHAT_MESSAGES).add(message)\n    return message.id;\n  }\n\n  async getMessages(serviceRequestId: string): Promise<ChatMessage[]> {\n    console.log('Firebase get messages:', { serviceRequestId });\n    // In production: firestore.collection(COLLECTIONS.CHAT_MESSAGES)\n    //   .where('serviceRequestId', '==', serviceRequestId)\n    //   .orderBy('timestamp', 'asc').get()\n    return [];\n  }\n\n  // Real-time listeners\n  subscribeToMessages(serviceRequestId: string, callback: (messages: ChatMessage[]) => void): () => void {\n    console.log('Firebase subscribe to messages:', { serviceRequestId });\n    // In production: firestore.collection(COLLECTIONS.CHAT_MESSAGES)\n    //   .where('serviceRequestId', '==', serviceRequestId)\n    //   .onSnapshot(callback)\n    \n    // Return unsubscribe function\n    return () => {\n      console.log('Firebase unsubscribe from messages:', { serviceRequestId });\n    };\n  }\n\n  // File uploads\n  async uploadImage(file: File | Blob, path: string): Promise<string> {\n    console.log('Firebase upload image:', { path });\n    // In production: firebase.storage().ref(path).put(file)\n    // Then: get download URL\n    return 'https://example.com/uploaded-image.jpg';\n  }\n\n  // Push notifications\n  async sendNotification(userId: string, title: string, body: string, data?: any): Promise<void> {\n    console.log('Firebase send notification:', { userId, title, body, data });\n    // In production: use Firebase Cloud Messaging\n  }\n\n  // Customer management\n  async getCustomers(): Promise<User[]> {\n    console.log('Firebase get customers');\n    // In production: firestore.collection('users').where('role', '==', 'customer').get()\n    return [];\n  }\n\n  async updateCustomer(customerId: string, updates: Partial<User>): Promise<void> {\n    console.log('Firebase update customer:', { customerId, updates });\n    // In production: firestore.collection('users').doc(customerId).update(updates)\n  }\n\n  // Vehicle management\n  async saveVehicle(vehicle: Vehicle): Promise<string> {\n    console.log('Firebase save vehicle:', { vehicleId: vehicle.id });\n    // In production: firestore.collection(COLLECTIONS.VEHICLES).doc(vehicle.id).set(vehicle)\n    return vehicle.id;\n  }\n\n  async getVehicles(userId: string): Promise<Vehicle[]> {\n    console.log('Firebase get vehicles:', { userId });\n    // In production: firestore.collection(COLLECTIONS.VEHICLES)\n    //   .where('userId', '==', userId).get()\n    return [];\n  }\n}"
            }
          }
        },
        {
          "display": "here's the lib folder code     [Pasted text #1 +46 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { createTRPCReact } from \"@trpc/react-query\";\nimport { httpLink } from \"@trpc/client\";\nimport type { AppRouter } from \"@/backend/trpc/app-router\";\nimport superjson from \"superjson\";\n\nexport const trpc = createTRPCReact<AppRouter>();\n\nconst getBaseUrl = () => {\n  // Production API URL\n  if (process.env.EXPO_PUBLIC_RORK_API_BASE_URL) {\n    return process.env.EXPO_PUBLIC_RORK_API_BASE_URL;\n  }\n\n  // Development fallback\n  if (__DEV__) {\n    return 'http://localhost:3000'; // Local development server\n  }\n\n  throw new Error(\n    \"No base url found, please set EXPO_PUBLIC_RORK_API_BASE_URL\"\n  );\n};\n\nexport const trpcClient = trpc.createClient({\n  links: [\n    httpLink({\n      url: `${getBaseUrl()}/api/trpc`,\n      transformer: superjson,\n      // Add headers for production\n      headers: () => {\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n\n        // Add API key for production if available\n        if (process.env.EXPO_PUBLIC_API_KEY) {\n          headers['Authorization'] = `Bearer ${process.env.EXPO_PUBLIC_API_KEY}`;\n        }\n\n        // Add environment header\n        headers['X-Environment'] = __DEV__ ? 'development' : 'production';\n\n        return headers;\n      },\n    }),\n  ],\n});"
            }
          }
        },
        {
          "display": "here is the code from the hooks folder    [Pasted text #1 +136 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { useState, useEffect } from 'react';\nimport { FirebaseService } from '@/services/firebase-service';\nimport { User } from '@/types/auth';\nimport { ServiceRequest, Quote, ChatMessage } from '@/types/service';\n\nexport function useFirebaseAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const firebaseService = FirebaseService.getInstance();\n\n  useEffect(() => {\n    // In production: firebase.auth().onAuthStateChanged()\n    setLoading(false);\n  }, []);\n\n  const signUp = async (email: string, password: string, userData: Partial<User>) => {\n    try {\n      const user = await firebaseService.signUp(email, password, userData);\n      setUser(user);\n      return { success: true, user };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Sign up failed' };\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const user = await firebaseService.signIn(email, password);\n      setUser(user);\n      return { success: true, user };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Sign in failed' };\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      await firebaseService.signOut();\n      setUser(null);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Sign out failed' };\n    }\n  };\n\n  return {\n    user,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n  };\n}\n\nexport function useFirebaseServiceRequests(userId: string) {\n  const [requests, setRequests] = useState<ServiceRequest[]>([]);\n  const [loading, setLoading] = useState(true);\n  const firebaseService = FirebaseService.getInstance();\n\n  useEffect(() => {\n    if (userId) {\n      loadRequests();\n    }\n  }, [userId]);\n\n  const loadRequests = async () => {\n    try {\n      const requests = await firebaseService.getServiceRequests(userId);\n      setRequests(requests);\n    } catch (error) {\n      console.error('Failed to load service requests:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createRequest = async (request: ServiceRequest) => {\n    try {\n      const id = await firebaseService.createServiceRequest(request);\n      setRequests(prev => [...prev, { ...request, id }]);\n      return { success: true, id };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to create request' };\n    }\n  };\n\n  const updateRequest = async (requestId: string, updates: Partial<ServiceRequest>) => {\n    try {\n      await firebaseService.updateServiceRequest(requestId, updates);\n      setRequests(prev => prev.map(req => req.id === requestId ? { ...req, ...updates } : req));\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to update request' };\n    }\n  };\n\n  return {\n    requests,\n    loading,\n    createRequest,\n    updateRequest,\n    refreshRequests: loadRequests,\n  };\n}\n\nexport function useFirebaseChat(serviceRequestId: string) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [loading, setLoading] = useState(true);\n  const firebaseService = FirebaseService.getInstance();\n\n  useEffect(() => {\n    if (serviceRequestId) {\n      // Set up real-time listener\n      const unsubscribe = firebaseService.subscribeToMessages(serviceRequestId, (newMessages) => {\n        setMessages(newMessages);\n        setLoading(false);\n      });\n\n      return unsubscribe;\n    }\n  }, [serviceRequestId]);\n\n  const sendMessage = async (message: ChatMessage) => {\n    try {\n      const id = await firebaseService.sendMessage(message);\n      return { success: true, id };\n    } catch (error) {\n      return { success: false, error: error instanceof Error ? error.message : 'Failed to send message' };\n    }\n  };\n\n  return {\n    messages,\n    loading,\n    sendMessage,\n  };\n}"
            }
          }
        },
        {
          "display": "[Pasted text #1 +219 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { ServiceType, ServiceTool } from '@/types/service';\n\nexport interface ServiceCategory {\n  id: ServiceType;\n  title: string;\n  description: string;\n  icon: string;\n  estimatedTime: string;\n  basePrice: number;\n  requiredTools: ServiceTool[];\n}\n\n// Comprehensive tool definitions for each service type\nexport const SERVICE_TOOLS: { [key in ServiceType]: ServiceTool[] } = {\n  oil_change: [\n    { id: 'oil-drain-pan', name: 'Oil Drain Pan (5+ qt)', category: 'basic', required: true, description: 'Large capacity drain pan' },\n    { id: 'socket-set-metric', name: 'Socket Set (Metric)', category: 'basic', required: true, description: '10mm-19mm sockets' },\n    { id: 'socket-set-standard', name: 'Socket Set (Standard)', category: 'basic', required: true, description: '3/8\" to 3/4\" sockets' },\n    { id: 'oil-filter-wrench', name: 'Oil Filter Wrench', category: 'basic', required: true, description: 'Adjustable filter wrench' },\n    { id: 'funnel', name: 'Oil Funnel', category: 'basic', required: true, description: 'Wide mouth funnel' },\n    { id: 'jack-stands', name: 'Jack & Jack Stands', category: 'safety', required: true, description: 'Rated for vehicle weight' },\n    { id: 'shop-rags', name: 'Shop Rags/Towels', category: 'basic', required: true, description: 'Absorbent cleaning rags' },\n    { id: 'nitrile-gloves', name: 'Nitrile Gloves', category: 'safety', required: true, description: 'Chemical resistant gloves' },\n    { id: 'torque-wrench', name: 'Torque Wrench', category: 'specialized', required: false, description: 'For drain plug torque spec' },\n  ],\n  brake_service: [\n    { id: 'brake-caliper-tool', name: 'Brake Caliper Compression Tool', category: 'specialized', required: true, description: 'Piston compression tool' },\n    { id: 'c-clamp-large', name: 'Large C-Clamp', category: 'basic', required: true, description: '6\" or larger opening' },\n    { id: 'brake-fluid-dot3', name: 'DOT 3 Brake Fluid', category: 'basic', required: true, description: 'Fresh brake fluid' },\n    { id: 'brake-cleaner', name: 'Brake Parts Cleaner', category: 'basic', required: true, description: 'Non-chlorinated cleaner' },\n    { id: 'socket-set-brake', name: 'Socket Set (Brake Specific)', category: 'basic', required: true, description: '13mm, 14mm, 17mm common' },\n    { id: 'jack-stands-brake', name: 'Jack & Jack Stands', category: 'safety', required: true, description: 'Heavy duty stands' },\n    { id: 'safety-glasses', name: 'Safety Glasses', category: 'safety', required: true, description: 'Impact resistant' },\n    { id: 'wire-brush', name: 'Wire Brush', category: 'basic', required: false, description: 'For cleaning brake components' },\n    { id: 'brake-grease', name: 'Brake Caliper Grease', category: 'specialized', required: false, description: 'High-temp brake grease' },\n  ],\n  tire_service: [\n    { id: 'tire-iron', name: 'Tire Iron/Lug Wrench', category: 'basic', required: true, description: 'Cross pattern or telescoping' },\n    { id: 'jack-stands-tire', name: 'Jack & Jack Stands', category: 'safety', required: true, description: 'Proper lifting equipment' },\n    { id: 'tire-pressure-gauge', name: 'Digital Tire Pressure Gauge', category: 'basic', required: true, description: 'Accurate to 1 PSI' },\n    { id: 'valve-stem-tool', name: 'Valve Stem Tool', category: 'basic', required: true, description: 'Core removal tool' },\n    { id: 'tire-repair-kit', name: 'Tire Repair Kit', category: 'specialized', required: false, description: 'Plugs and patches' },\n    { id: 'torque-wrench-tire', name: 'Torque Wrench', category: 'specialized', required: true, description: 'For lug nut torque spec' },\n    { id: 'wheel-chocks', name: 'Wheel Chocks', category: 'safety', required: true, description: 'Prevent vehicle rolling' },\n    { id: 'tire-iron-breaker', name: 'Breaker Bar', category: 'basic', required: false, description: 'For stubborn lug nuts' },\n  ],\n  battery_service: [\n    { id: 'multimeter', name: 'Digital Multimeter', category: 'diagnostic', required: true, description: 'DC voltage measurement' },\n    { id: 'battery-tester', name: 'Battery Load Tester', category: 'diagnostic', required: true, description: 'Load testing capability' },\n    { id: 'terminal-cleaner', name: 'Battery Terminal Cleaner', category: 'basic', required: true, description: 'Wire brush or spray' },\n    { id: 'wire-brush-battery', name: 'Wire Brush Set', category: 'basic', required: true, description: 'Terminal cleaning brushes' },\n    { id: 'socket-set-battery', name: 'Socket Set', category: 'basic', required: true, description: '8mm, 10mm, 13mm common' },\n    { id: 'safety-glasses-battery', name: 'Safety Glasses', category: 'safety', required: true, description: 'Acid splash protection' },\n    { id: 'nitrile-gloves-battery', name: 'Nitrile Gloves', category: 'safety', required: true, description: 'Acid resistant gloves' },\n    { id: 'battery-carrier', name: 'Battery Carrier', category: 'basic', required: false, description: 'Safe battery handling' },\n  ],\n  engine_diagnostic: [\n    { id: 'obd2-scanner', name: 'OBD2 Scanner/Reader', category: 'diagnostic', required: true, description: 'Code reading capability' },\n    { id: 'multimeter-engine', name: 'Digital Multimeter', category: 'diagnostic', required: true, description: 'Voltage/resistance testing' },\n    { id: 'compression-tester', name: 'Compression Tester', category: 'diagnostic', required: false, description: 'Engine compression test' },\n    { id: 'fuel-pressure-gauge', name: 'Fuel Pressure Gauge', category: 'diagnostic', required: false, description: 'Fuel system testing' },\n    { id: 'socket-set-engine', name: 'Socket Set (Complete)', category: 'basic', required: true, description: 'Metric and standard' },\n    { id: 'screwdriver-set', name: 'Screwdriver Set', category: 'basic', required: true, description: 'Phillips and flathead' },\n    { id: 'flashlight-led', name: 'LED Flashlight/Headlamp', category: 'basic', required: true, description: 'Hands-free lighting' },\n    { id: 'test-light', name: 'Test Light', category: 'diagnostic', required: false, description: 'Circuit testing' },\n  ],\n  transmission: [\n    { id: 'transmission-jack', name: 'Transmission Jack', category: 'specialized', required: true, description: 'Heavy duty transmission jack' },\n    { id: 'socket-set-trans', name: 'Socket Set (Complete)', category: 'basic', required: true, description: 'Large socket set' },\n    { id: 'torque-wrench-trans', name: 'Torque Wrench Set', category: 'specialized', required: true, description: 'Multiple torque ranges' },\n    { id: 'drain-pan-large', name: 'Large Drain Pan (10+ qt)', category: 'basic', required: true, description: 'High capacity pan' },\n    { id: 'funnel-trans', name: 'Transmission Funnel', category: 'basic', required: true, description: 'Long neck funnel' },\n    { id: 'jack-stands-heavy', name: 'Heavy Duty Jack Stands', category: 'safety', required: true, description: 'High weight capacity' },\n    { id: 'safety-glasses-trans', name: 'Safety Glasses', category: 'safety', required: true, description: 'Impact protection' },\n    { id: 'gasket-scraper', name: 'Gasket Scraper', category: 'basic', required: false, description: 'Pan gasket removal' },\n  ],\n  ac_service: [\n    { id: 'ac-manifold-gauge', name: 'A/C Manifold Gauge Set', category: 'specialized', required: true, description: 'R134a/R1234yf compatible' },\n    { id: 'refrigerant-recovery', name: 'Refrigerant Recovery Unit', category: 'specialized', required: true, description: 'EPA certified equipment' },\n    { id: 'leak-detector', name: 'A/C Leak Detector', category: 'diagnostic', required: true, description: 'Electronic leak detector' },\n    { id: 'vacuum-pump', name: 'Vacuum Pump', category: 'specialized', required: true, description: 'System evacuation' },\n    { id: 'thermometer-digital', name: 'Digital Thermometer', category: 'diagnostic', required: true, description: 'Vent temperature measurement' },\n    { id: 'safety-glasses-ac', name: 'Safety Glasses', category: 'safety', required: true, description: 'Refrigerant protection' },\n    { id: 'nitrile-gloves-ac', name: 'Nitrile Gloves', category: 'safety', required: true, description: 'Chemical resistant' },\n    { id: 'uv-dye', name: 'UV Leak Detection Dye', category: 'diagnostic', required: false, description: 'Leak detection aid' },\n  ],\n  general_repair: [\n    { id: 'socket-set-complete', name: 'Complete Socket Set', category: 'basic', required: true, description: 'Metric and standard, all sizes' },\n    { id: 'wrench-set-complete', name: 'Complete Wrench Set', category: 'basic', required: true, description: 'Open end and box end' },\n    { id: 'screwdriver-set-complete', name: 'Complete Screwdriver Set', category: 'basic', required: true, description: 'Multiple sizes and types' },\n    { id: 'pliers-set', name: 'Pliers Set', category: 'basic', required: true, description: 'Needle nose, standard, wire cutters' },\n    { id: 'multimeter-general', name: 'Digital Multimeter', category: 'diagnostic', required: false, description: 'Basic electrical testing' },\n    { id: 'jack-stands-general', name: 'Jack & Jack Stands', category: 'safety', required: true, description: 'Vehicle lifting equipment' },\n    { id: 'flashlight-general', name: 'LED Flashlight', category: 'basic', required: true, description: 'Portable lighting' },\n    { id: 'extension-set', name: 'Socket Extension Set', category: 'basic', required: false, description: 'Various length extensions' },\n  ],\n  emergency_roadside: [\n    { id: 'jump-starter', name: 'Portable Jump Starter', category: 'specialized', required: true, description: 'High capacity jump pack' },\n    { id: 'tire-iron-emergency', name: 'Tire Iron', category: 'basic', required: true, description: 'Lug nut removal' },\n    { id: 'jack-emergency', name: 'Emergency Jack', category: 'safety', required: true, description: 'Portable vehicle jack' },\n    { id: 'tire-repair-emergency', name: 'Emergency Tire Repair Kit', category: 'specialized', required: true, description: 'Plugs and sealant' },\n    { id: 'lockout-tools', name: 'Vehicle Lockout Tools', category: 'specialized', required: false, description: 'Professional lockout kit' },\n    { id: 'flashlight-emergency', name: 'Emergency LED Flashlight', category: 'basic', required: true, description: 'High-powered flashlight' },\n    { id: 'safety-vest', name: 'High-Visibility Safety Vest', category: 'safety', required: true, description: 'ANSI compliant vest' },\n    { id: 'road-flares', name: 'Road Flares/Reflectors', category: 'safety', required: false, description: 'Traffic warning devices' },\n  ],\n};\n\nexport const SERVICE_CATEGORIES: ServiceCategory[] = [\n  {\n    id: 'oil_change',\n    title: 'Oil Change',\n    description: 'Full synthetic or conventional oil change service',\n    icon: 'droplets',\n    estimatedTime: '30-45 min',\n    basePrice: 45,\n    requiredTools: SERVICE_TOOLS.oil_change,\n  },\n  {\n    id: 'brake_service',\n    title: 'Brake Service',\n    description: 'Brake pad replacement, rotor service, brake fluid',\n    icon: 'disc',\n    estimatedTime: '1-2 hours',\n    basePrice: 150,\n    requiredTools: SERVICE_TOOLS.brake_service,\n  },\n  {\n    id: 'tire_service',\n    title: 'Tire Service',\n    description: 'Tire installation, rotation, balancing, repair',\n    icon: 'circle',\n    estimatedTime: '45-90 min',\n    basePrice: 80,\n    requiredTools: SERVICE_TOOLS.tire_service,\n  },\n  {\n    id: 'battery_service',\n    title: 'Battery Service',\n    description: 'Battery testing, replacement, charging system check',\n    icon: 'battery',\n    estimatedTime: '30-60 min',\n    basePrice: 120,\n    requiredTools: SERVICE_TOOLS.battery_service,\n  },\n  {\n    id: 'engine_diagnostic',\n    title: 'Engine Diagnostic',\n    description: 'Computer diagnostic, check engine light, performance issues',\n    icon: 'search',\n    estimatedTime: '1-2 hours',\n    basePrice: 100,\n    requiredTools: SERVICE_TOOLS.engine_diagnostic,\n  },\n  {\n    id: 'transmission',\n    title: 'Transmission',\n    description: 'Transmission service, fluid change, repair',\n    icon: 'settings',\n    estimatedTime: '2-4 hours',\n    basePrice: 200,\n    requiredTools: SERVICE_TOOLS.transmission,\n  },\n  {\n    id: 'ac_service',\n    title: 'A/C Service',\n    description: 'Air conditioning repair, recharge, leak detection',\n    icon: 'snowflake',\n    estimatedTime: '1-2 hours',\n    basePrice: 90,\n    requiredTools: SERVICE_TOOLS.ac_service,\n  },\n  {\n    id: 'general_repair',\n    title: 'General Repair',\n    description: 'Other automotive repairs and maintenance',\n    icon: 'wrench',\n    estimatedTime: 'Varies',\n    basePrice: 75,\n    requiredTools: SERVICE_TOOLS.general_repair,\n  },\n  {\n    id: 'emergency_roadside',\n    title: 'Emergency Roadside',\n    description: 'Jump start, lockout, flat tire, towing assistance',\n    icon: 'phone',\n    estimatedTime: '30-60 min',\n    basePrice: 65,\n    requiredTools: SERVICE_TOOLS.emergency_roadside,\n  },\n];\n\n// Helper function to get tools for a specific service\nexport function getToolsForService(serviceType: ServiceType): ServiceTool[] {\n  return SERVICE_TOOLS[serviceType] || [];\n}\n\n// Helper function to get required tools only\nexport function getRequiredToolsForService(serviceType: ServiceType): ServiceTool[] {\n  return SERVICE_TOOLS[serviceType]?.filter(tool => tool.required) || [];\n}\n\n// Helper function to validate tool completion\nexport function validateToolsCompletion(serviceType: ServiceType, checkedTools: { [toolId: string]: boolean }): {\n  isComplete: boolean;\n  missingRequired: ServiceTool[];\n  totalRequired: number;\n  totalChecked: number;\n} {\n  const requiredTools = getRequiredToolsForService(serviceType);\n  const missingRequired = requiredTools.filter(tool => !checkedTools[tool.id]);\n  const totalChecked = Object.values(checkedTools).filter(Boolean).length;\n  \n  return {\n    isComplete: missingRequired.length === 0,\n    missingRequired,\n    totalRequired: requiredTools.length,\n    totalChecked,\n  };\n}"
            }
          }
        },
        {
          "display": "[Pasted text #1 +113 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { ServiceType } from '@/types/service';\n\nexport interface ServicePricing {\n  basePrice: number;\n  laborRate: number; // per hour\n  estimatedHours: number;\n  commonParts: {\n    name: string;\n    price: number;\n  }[];\n  priceRange: {\n    min: number;\n    max: number;\n  };\n}\n\nexport const SERVICE_PRICING: Record<ServiceType, ServicePricing> = {\n  oil_change: {\n    basePrice: 45,\n    laborRate: 75,\n    estimatedHours: 0.5,\n    commonParts: [\n      { name: 'Conventional Oil (5qt)', price: 25 },\n      { name: 'Synthetic Oil (5qt)', price: 45 },\n      { name: 'Oil Filter', price: 15 },\n    ],\n    priceRange: { min: 75, max: 95 },\n  },\n  brake_service: {\n    basePrice: 150,\n    laborRate: 85,\n    estimatedHours: 2,\n    commonParts: [\n      { name: 'Brake Pads (Front)', price: 80 },\n      { name: 'Brake Pads (Rear)', price: 70 },\n      { name: 'Brake Rotors (Pair)', price: 120 },\n      { name: 'Brake Fluid', price: 15 },\n    ],\n    priceRange: { min: 150, max: 400 },\n  },\n  tire_service: {\n    basePrice: 80,\n    laborRate: 75,\n    estimatedHours: 1,\n    commonParts: [\n      { name: 'Tire (Each)', price: 100 },\n      { name: 'Valve Stem', price: 5 },\n      { name: 'Wheel Weight', price: 3 },\n    ],\n    priceRange: { min: 80, max: 500 },\n  },\n  battery_service: {\n    basePrice: 120,\n    laborRate: 75,\n    estimatedHours: 0.75,\n    commonParts: [\n      { name: 'Car Battery', price: 120 },\n      { name: 'Battery Terminal', price: 15 },\n      { name: 'Battery Cable', price: 25 },\n    ],\n    priceRange: { min: 120, max: 200 },\n  },\n  engine_diagnostic: {\n    basePrice: 100,\n    laborRate: 85,\n    estimatedHours: 1.5,\n    commonParts: [\n      { name: 'Diagnostic Fee', price: 100 },\n      { name: 'Computer Scan', price: 50 },\n    ],\n    priceRange: { min: 100, max: 250 },\n  },\n  transmission: {\n    basePrice: 200,\n    laborRate: 95,\n    estimatedHours: 3,\n    commonParts: [\n      { name: 'Transmission Fluid', price: 35 },\n      { name: 'Transmission Filter', price: 45 },\n      { name: 'Gasket Set', price: 60 },\n    ],\n    priceRange: { min: 200, max: 800 },\n  },\n  ac_service: {\n    basePrice: 90,\n    laborRate: 85,\n    estimatedHours: 1.5,\n    commonParts: [\n      { name: 'Refrigerant (R134a)', price: 40 },\n      { name: 'AC Filter', price: 25 },\n      { name: 'AC Compressor Oil', price: 20 },\n    ],\n    priceRange: { min: 90, max: 300 },\n  },\n  general_repair: {\n    basePrice: 75,\n    laborRate: 85,\n    estimatedHours: 2,\n    commonParts: [\n      { name: 'Miscellaneous Parts', price: 50 },\n    ],\n    priceRange: { min: 75, max: 500 },\n  },\n  emergency_roadside: {\n    basePrice: 65,\n    laborRate: 95,\n    estimatedHours: 1,\n    commonParts: [\n      { name: 'Emergency Service Fee', price: 65 },\n      { name: 'Towing (per mile)', price: 3 },\n    ],\n    priceRange: { min: 65, max: 200 },\n  },\n};"
            }
          }
        },
        {
          "display": "ill add the other 2 code chunks from constants, then push those to github, then well paste some more till ive pasted everything i can",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +43 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "export const Colors = {\n  // Primary brand colors (matching logo)\n  primary: '#00BFFF', // Bright blue from logo\n  primaryDark: '#0099CC',\n  secondary: '#1E90FF', // Slightly different blue\n  \n  // Dark theme (matching logo background)\n  background: '#000000', // Pure black like logo\n  surface: '#1a1a1a', // Slightly lighter black\n  card: '#2a2a2a', // Card backgrounds\n  border: '#333333', // Subtle borders\n  \n  // Text colors\n  text: '#FFFFFF', // White text on black\n  textSecondary: '#CCCCCC', // Light gray\n  textMuted: '#888888', // Muted gray\n  \n  // Status colors\n  success: '#00FF88',\n  warning: '#FFB800',\n  error: '#FF4444',\n  \n  // Utility colors\n  white: '#FFFFFF',\n  black: '#000000',\n  \n  // Role-specific colors\n  customer: '#00BFFF', // Blue for customer\n  mechanic: '#FF6B35', // Orange for mechanic distinction\n  \n  // Production environment indicator\n  production: '#00FF88', // Green for production mode\n  development: '#FFB800', // Yellow for development mode\n};\n\nexport default {\n  light: {\n    text: Colors.text,\n    background: Colors.background,\n    tint: Colors.primary,\n    tabIconDefault: Colors.textMuted,\n    tabIconSelected: Colors.primary,\n  },\n};"
            }
          }
        },
        {
          "display": "im going to paste in the code for the constants folder for you next",
          "pastedContents": {}
        },
        {
          "display": "yes acess my github repo and determin whats missing according to the folder structures",
          "pastedContents": {}
        },
        {
          "display": "npm i -g @anthropic-ai/claude-code",
          "pastedContents": {}
        },
        {
          "display": "/doctor ",
          "pastedContents": {}
        },
        {
          "display": "/compact ",
          "pastedContents": {}
        },
        {
          "display": "/add-dir ",
          "pastedContents": {}
        },
        {
          "display": "what claude model are you?",
          "pastedContents": {}
        },
        {
          "display": "where did you get to in the push to github",
          "pastedContents": {}
        },
        {
          "display": "my github repo is  https://github.com/GrizzlyRooster34/mobile-mechanic-app",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +487 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, Alert, TextInput } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { useAppStore } from '@/stores/app-store';\nimport { JobLog } from '@/types/service';\nimport { PRODUCTION_CONFIG } from '@/utils/firebase-config';\nimport * as Icons from 'lucide-react-native';\n\ninterface WorkTimerProps {\n  jobId: string;\n  jobTitle: string;\n  onWorkComplete: (jobId: string, workLog: JobLog) => void;\n}\n\nexport function WorkTimer({ jobId, jobTitle, onWorkComplete }: WorkTimerProps) {\n  const { getActiveJobTimer, addJobLog, updateJobLog, logEvent } = useAppStore();\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [notes, setNotes] = useState('');\n  const [isPaused, setIsPaused] = useState(false);\n  const [pausedTime, setPausedTime] = useState(0);\n\n  const activeTimer = getActiveJobTimer(jobId);\n  const isTimerActive = !!activeTimer && !isPaused;\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (isTimerActive) {\n      interval = setInterval(() => {\n        setCurrentTime(new Date());\n      }, 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isTimerActive]);\n\n  const formatDuration = (startTime: Date, endTime: Date = new Date(), pausedDuration: number = 0) => {\n    const diffMs = endTime.getTime() - startTime.getTime() - pausedDuration;\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const hours = Math.floor(diffMinutes / 60);\n    const minutes = diffMinutes % 60;\n    const seconds = Math.floor((diffMs % (1000 * 60)) / 1000);\n    \n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n    }\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const getTotalDuration = () => {\n    if (!activeTimer) return 0;\n    const now = new Date();\n    return Math.floor((now.getTime() - activeTimer.startTime.getTime() - pausedTime) / (1000 * 60));\n  };\n\n  const handleStartTimer = () => {\n    // Production validation\n    if (PRODUCTION_CONFIG.requireWorkTimer) {\n      logEvent('work_timer_started', { \n        jobId, \n        mechanicId: 'mechanic-cody',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    const newLog: JobLog = {\n      id: `${jobId}-${Date.now()}`,\n      jobId,\n      mechanicId: 'mechanic-cody', // Production: Cody only\n      mechanicName: 'Cody Owner', // Production: Cody only\n      startTime: new Date(),\n      createdAt: new Date(),\n    };\n\n    addJobLog(newLog);\n    setIsPaused(false);\n    setPausedTime(0);\n    Alert.alert('Timer Started', 'Work timer has been started for this job.');\n  };\n\n  const handlePauseTimer = () => {\n    if (!activeTimer) return;\n    \n    setIsPaused(true);\n    logEvent('work_timer_paused', { \n      jobId, \n      mechanicId: 'mechanic-cody',\n      duration: getTotalDuration()\n    });\n    Alert.alert('Timer Paused', 'Work timer has been paused. Press resume to continue.');\n  };\n\n  const handleResumeTimer = () => {\n    if (!activeTimer) return;\n    \n    setIsPaused(false);\n    logEvent('work_timer_resumed', { \n      jobId, \n      mechanicId: 'mechanic-cody',\n      duration: getTotalDuration()\n    });\n    Alert.alert('Timer Resumed', 'Work timer has been resumed.');\n  };\n\n  const handleStopTimer = () => {\n    if (!activeTimer) return;\n\n    const duration = getTotalDuration();\n    \n    // Production validation: Minimum work time\n    if (PRODUCTION_CONFIG.strictValidation && duration < 5) {\n      Alert.alert(\n        'Minimum Work Time',\n        'Work timer must run for at least 5 minutes to ensure accurate labor tracking.',\n        [{ text: 'Continue Working' }]\n      );\n      return;\n    }\n\n    Alert.alert(\n      'Stop Timer',\n      `Stop work timer? Total time: ${duration} minutes`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Stop Timer',\n          style: 'destructive',\n          onPress: () => {\n            const endTime = new Date();\n            \n            const updatedLog: Partial<JobLog> = {\n              endTime,\n              duration,\n              description: notes.trim() || undefined,\n            };\n\n            updateJobLog(activeTimer.id, updatedLog);\n            \n            const completedLog: JobLog = {\n              ...activeTimer,\n              ...updatedLog,\n            } as JobLog;\n\n            logEvent('work_timer_stopped', { \n              jobId, \n              mechanicId: 'mechanic-cody',\n              duration,\n              totalTime: duration\n            });\n\n            onWorkComplete(jobId, completedLog);\n          }\n        }\n      ]\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Icons.Timer size={24} color={Colors.mechanic} />\n        <Text style={styles.title}>Work Timer</Text>\n        {PRODUCTION_CONFIG.requireWorkTimer && (\n          <View style={styles.requiredBadge}>\n            <Text style={styles.requiredText}>REQUIRED</Text>\n          </View>\n        )}\n      </View>\n\n      <View style={styles.jobInfo}>\n        <Text style={styles.jobTitle}>{jobTitle}</Text>\n        <Text style={styles.jobId}>Job ID: {jobId}</Text>\n        <Text style={styles.mechanicInfo}>Mechanic: Cody Owner</Text>\n      </View>\n\n      {/* Timer Display */}\n      <View style={[styles.timerDisplay, isPaused && styles.pausedTimerDisplay]}>\n        {activeTimer ? (\n          <>\n            <Text style={styles.timerLabel}>\n              {isPaused ? 'Paused' : 'Time Elapsed'}\n            </Text>\n            <Text style={[styles.timerValue, isPaused && styles.pausedTimerValue]}>\n              {formatDuration(activeTimer.startTime, currentTime, pausedTime)}\n            </Text>\n            <Text style={styles.startedAt}>\n              Started at {activeTimer.startTime.toLocaleTimeString()}\n              {isPaused && ' • Timer Paused'}\n            </Text>\n          </>\n        ) : (\n          <>\n            <Text style={styles.timerLabel}>Ready to Start</Text>\n            <Text style={styles.timerValue}>0:00</Text>\n            <Text style={styles.readyText}>\n              {PRODUCTION_CONFIG.requireWorkTimer \n                ? 'Work timer is required to complete this job'\n                : 'Press start to begin timing work'\n              }\n            </Text>\n          </>\n        )}\n      </View>\n\n      {/* Timer Controls */}\n      <View style={styles.controls}>\n        {!activeTimer ? (\n          <Button\n            title=\"Start Work Timer\"\n            onPress={handleStartTimer}\n            style={styles.startButton}\n          />\n        ) : (\n          <View style={styles.activeControls}>\n            {isPaused ? (\n              <Button\n                title=\"Resume\"\n                onPress={handleResumeTimer}\n                style={styles.resumeButton}\n              />\n            ) : (\n              <Button\n                title=\"Pause\"\n                variant=\"outline\"\n                onPress={handlePauseTimer}\n                style={styles.pauseButton}\n              />\n            )}\n            <Button\n              title=\"Stop Timer\"\n              onPress={handleStopTimer}\n              style={styles.stopButton}\n            />\n          </View>\n        )}\n      </View>\n\n      {/* Work Notes */}\n      {activeTimer && (\n        <View style={styles.notesSection}>\n          <Text style={styles.notesLabel}>Work Notes (Optional)</Text>\n          <TextInput\n            style={styles.notesInput}\n            value={notes}\n            onChangeText={setNotes}\n            placeholder=\"Add notes about the work performed...\"\n            placeholderTextColor={Colors.textMuted}\n            multiline\n            numberOfLines={3}\n            textAlignVertical=\"top\"\n          />\n        </View>\n      )}\n\n      {/* Time Summary */}\n      {activeTimer && (\n        <View style={styles.timeSummary}>\n          <View style={styles.summaryRow}>\n            <Text style={styles.summaryLabel}>Total Duration:</Text>\n            <Text style={styles.summaryValue}>{getTotalDuration()} minutes</Text>\n          </View>\n          <View style={styles.summaryRow}>\n            <Text style={styles.summaryLabel}>Status:</Text>\n            <Text style={[styles.summaryValue, { color: isPaused ? Colors.warning : Colors.success }]}>\n              {isPaused ? 'Paused' : 'Active'}\n            </Text>\n          </View>\n          <View style={styles.summaryRow}>\n            <Text style={styles.summaryLabel}>Mechanic:</Text>\n            <Text style={styles.summaryValue}>Cody Owner</Text>\n          </View>\n        </View>\n      )}\n\n      {/* Production Requirements */}\n      {PRODUCTION_CONFIG.requireWorkTimer && (\n        <View style={styles.requirementsCard}>\n          <Icons.AlertCircle size={16} color={Colors.warning} />\n          <Text style={styles.requirementsText}>\n            Work timer is required for job completion and accurate labor billing.\n            {activeTimer ? ' Timer is running.' : ' Please start timer before beginning work.'}\n          </Text>\n        </View>\n      )}\n\n      {/* Instructions */}\n      <View style={styles.instructions}>\n        <Icons.Info size={16} color={Colors.textMuted} />\n        <Text style={styles.instructionsText}>\n          {!activeTimer \n            ? 'Start the timer when you begin working on this job. This helps track labor time accurately for billing.'\n            : isPaused\n            ? 'Timer is paused. Resume when you continue working or stop to complete the job.'\n            : 'Timer is running. You can pause if needed or stop when work is complete to proceed to customer signature.'\n          }\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  requiredBadge: {\n    backgroundColor: Colors.error,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  requiredText: {\n    color: Colors.white,\n    fontSize: 10,\n    fontWeight: '600',\n  },\n  jobInfo: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 32,\n  },\n  jobTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  jobId: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  mechanicInfo: {\n    fontSize: 14,\n    color: Colors.mechanic,\n    fontWeight: '500',\n  },\n  timerDisplay: {\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 32,\n    borderRadius: 16,\n    marginBottom: 32,\n    borderWidth: 2,\n    borderColor: Colors.success + '30',\n  },\n  pausedTimerDisplay: {\n    borderColor: Colors.warning + '30',\n    backgroundColor: Colors.warning + '10',\n  },\n  timerLabel: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  timerValue: {\n    fontSize: 48,\n    fontWeight: '700',\n    color: Colors.mechanic,\n    marginBottom: 8,\n    fontFamily: 'monospace',\n  },\n  pausedTimerValue: {\n    color: Colors.warning,\n  },\n  startedAt: {\n    fontSize: 14,\n    color: Colors.textMuted,\n    textAlign: 'center',\n  },\n  readyText: {\n    fontSize: 14,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  controls: {\n    marginBottom: 24,\n  },\n  startButton: {\n    backgroundColor: Colors.mechanic,\n    paddingVertical: 16,\n  },\n  activeControls: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  pauseButton: {\n    flex: 1,\n  },\n  resumeButton: {\n    flex: 1,\n    backgroundColor: Colors.success,\n  },\n  stopButton: {\n    flex: 2,\n    backgroundColor: Colors.error,\n  },\n  notesSection: {\n    marginBottom: 24,\n  },\n  notesLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  notesInput: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 14,\n    minHeight: 80,\n  },\n  timeSummary: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 24,\n  },\n  summaryRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  summaryLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  summaryValue: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  requirementsCard: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    backgroundColor: Colors.warning + '10',\n    borderWidth: 1,\n    borderColor: Colors.warning + '30',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  requirementsText: {\n    flex: 1,\n    fontSize: 12,\n    color: Colors.warning,\n    lineHeight: 16,\n  },\n  instructions: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 8,\n  },\n  instructionsText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.textMuted,\n    lineHeight: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +466 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TextInput, Alert, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { VinData } from '@/types/service';\nimport * as Icons from 'lucide-react-native';\n\ninterface VinScannerProps {\n  onVinScanned: (vinData: VinData) => void;\n  onClose: () => void;\n}\n\nexport function VinScanner({ onVinScanned, onClose }: VinScannerProps) {\n  const [vinInput, setVinInput] = useState('');\n  const [isDecoding, setIsDecoding] = useState(false);\n  const [decodedData, setDecodedData] = useState<VinData | null>(null);\n\n  const validateVin = (vin: string): boolean => {\n    // Basic VIN validation - 17 characters, alphanumeric except I, O, Q\n    const vinRegex = /^[A-HJ-NPR-Z0-9]{17}$/;\n    return vinRegex.test(vin.toUpperCase());\n  };\n\n  const decodeVin = async (vin: string) => {\n    if (!validateVin(vin)) {\n      Alert.alert('Invalid VIN', 'Please enter a valid 17-character VIN number.');\n      return;\n    }\n\n    setIsDecoding(true);\n    setDecodedData(null);\n\n    try {\n      // Use NHTSA VIN Decoder API\n      const response = await fetch(\n        `https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVin/${vin.toUpperCase()}?format=json`\n      );\n\n      if (!response.ok) {\n        throw new Error('VIN decoder service unavailable');\n      }\n\n      const data = await response.json();\n      \n      if (!data.Results || data.Results.length === 0) {\n        throw new Error('No vehicle data found for this VIN');\n      }\n\n      // Extract relevant information from NHTSA response\n      const results = data.Results;\n      const getValue = (variableName: string) => {\n        const result = results.find((r: any) => r.Variable === variableName);\n        return result?.Value || '';\n      };\n\n      const make = getValue('Make');\n      const model = getValue('Model');\n      const year = parseInt(getValue('Model Year')) || new Date().getFullYear();\n      \n      if (!make || !model) {\n        throw new Error('Unable to decode vehicle information from VIN');\n      }\n\n      const vinData: VinData = {\n        vin: vin.toUpperCase(),\n        make,\n        model,\n        year,\n        trim: getValue('Trim') || undefined,\n        engine: getValue('Engine Model') || getValue('Engine Configuration') || undefined,\n        transmission: getValue('Transmission Style') || undefined,\n        bodyStyle: getValue('Body Class') || undefined,\n        fuelType: getValue('Fuel Type - Primary') || undefined,\n        driveType: getValue('Drive Type') || undefined,\n      };\n\n      setDecodedData(vinData);\n    } catch (error) {\n      console.error('VIN decode error:', error);\n      \n      // Fallback to basic VIN parsing for demo purposes\n      const fallbackData = generateFallbackVinData(vin);\n      if (fallbackData) {\n        setDecodedData(fallbackData);\n        Alert.alert(\n          'Limited VIN Data',\n          'VIN decoder service is unavailable. Using basic VIN information. Please verify vehicle details.',\n          [{ text: 'OK' }]\n        );\n      } else {\n        Alert.alert(\n          'VIN Decode Failed',\n          'Unable to decode VIN. Please check the VIN number and try again, or enter vehicle information manually.',\n          [{ text: 'OK' }]\n        );\n      }\n    } finally {\n      setIsDecoding(false);\n    }\n  };\n\n  const generateFallbackVinData = (vin: string): VinData | null => {\n    try {\n      // Basic VIN year decoding (10th character)\n      const yearChar = vin.charAt(9).toUpperCase();\n      const yearMap: Record<string, number> = {\n        'A': 2010, 'B': 2011, 'C': 2012, 'D': 2013, 'E': 2014,\n        'F': 2015, 'G': 2016, 'H': 2017, 'J': 2018, 'K': 2019,\n        'L': 2020, 'M': 2021, 'N': 2022, 'P': 2023, 'R': 2024,\n        '1': 2001, '2': 2002, '3': 2003, '4': 2004, '5': 2005,\n        '6': 2006, '7': 2007, '8': 2008, '9': 2009,\n      };\n\n      const year = yearMap[yearChar] || new Date().getFullYear();\n\n      // Basic manufacturer code mapping (first 3 characters - WMI)\n      const wmi = vin.substring(0, 3);\n      const manufacturerMap: Record<string, string> = {\n        '1G1': 'Chevrolet', '1G6': 'Cadillac', '1GC': 'Chevrolet',\n        '1FA': 'Ford', '1FB': 'Ford', '1FC': 'Ford', '1FD': 'Ford',\n        '1FT': 'Ford', '1FU': 'Ford', '1FV': 'Ford',\n        '1HG': 'Honda', '1HT': 'Honda',\n        '1J4': 'Jeep', '1J8': 'Jeep',\n        '1N4': 'Nissan', '1N6': 'Nissan',\n        '2C3': 'Chrysler', '2C4': 'Chrysler',\n        '2G1': 'Chevrolet', '2G2': 'Pontiac',\n        '2T1': 'Toyota', '2T2': 'Toyota',\n        '3FA': 'Ford', '3FE': 'Ford',\n        '4F2': 'Mazda', '4F4': 'Mazda',\n        '4T1': 'Toyota', '4T3': 'Toyota',\n        '5NP': 'Hyundai', '5TD': 'Toyota',\n        'JH4': 'Acura', 'JHM': 'Honda',\n        'JM1': 'Mazda', 'JM3': 'Mazda',\n        'JN1': 'Nissan', 'JN8': 'Nissan',\n        'JT2': 'Toyota', 'JT3': 'Toyota',\n        'KM8': 'Hyundai', 'KNA': 'Kia',\n        'WBA': 'BMW', 'WBS': 'BMW',\n        'WDB': 'Mercedes-Benz', 'WDD': 'Mercedes-Benz',\n        'WVW': 'Volkswagen', 'WV1': 'Volkswagen',\n      };\n\n      const make = manufacturerMap[wmi] || 'Unknown';\n\n      return {\n        vin: vin.toUpperCase(),\n        make,\n        model: 'Unknown Model',\n        year,\n        trim: undefined,\n        engine: undefined,\n        transmission: undefined,\n        bodyStyle: undefined,\n        fuelType: undefined,\n        driveType: undefined,\n      };\n    } catch (error) {\n      return null;\n    }\n  };\n\n  const handleConfirm = () => {\n    if (decodedData) {\n      onVinScanned(decodedData);\n    }\n  };\n\n  const handleManualEntry = () => {\n    // For now, just close and let user enter manually\n    Alert.alert(\n      'Manual Entry',\n      'Please add your vehicle information manually in the vehicle selection section.',\n      [{ text: 'OK', onPress: onClose }]\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>VIN Scanner</Text>\n        <Button\n          title=\"Close\"\n          variant=\"outline\"\n          size=\"small\"\n          onPress={onClose}\n        />\n      </View>\n\n      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Enter VIN Number</Text>\n          <Text style={styles.sectionSubtitle}>\n            Enter the 17-character VIN found on your vehicle's dashboard or door frame\n          </Text>\n          \n          <TextInput\n            style={styles.vinInput}\n            value={vinInput}\n            onChangeText={(text) => setVinInput(text.toUpperCase())}\n            placeholder=\"Enter 17-character VIN\"\n            placeholderTextColor={Colors.textMuted}\n            maxLength={17}\n            autoCapitalize=\"characters\"\n            autoCorrect={false}\n          />\n\n          <View style={styles.vinActions}>\n            <Button\n              title=\"Decode VIN\"\n              onPress={() => decodeVin(vinInput)}\n              disabled={vinInput.length !== 17 || isDecoding}\n              style={styles.decodeButton}\n            />\n            <Button\n              title=\"Enter Manually\"\n              variant=\"outline\"\n              onPress={handleManualEntry}\n              style={styles.manualButton}\n            />\n          </View>\n        </View>\n\n        {isDecoding && (\n          <View style={styles.loadingSection}>\n            <LoadingSpinner />\n            <Text style={styles.loadingText}>Decoding VIN...</Text>\n          </View>\n        )}\n\n        {decodedData && (\n          <View style={styles.resultsSection}>\n            <Text style={styles.sectionTitle}>Vehicle Information</Text>\n            \n            <View style={styles.resultCard}>\n              <View style={styles.resultHeader}>\n                <Icons.Car size={24} color={Colors.primary} />\n                <Text style={styles.resultTitle}>\n                  {decodedData.year} {decodedData.make} {decodedData.model}\n                </Text>\n              </View>\n\n              <View style={styles.resultDetails}>\n                <View style={styles.resultRow}>\n                  <Text style={styles.resultLabel}>VIN:</Text>\n                  <Text style={styles.resultValue}>{decodedData.vin}</Text>\n                </View>\n                <View style={styles.resultRow}>\n                  <Text style={styles.resultLabel}>Year:</Text>\n                  <Text style={styles.resultValue}>{decodedData.year}</Text>\n                </View>\n                <View style={styles.resultRow}>\n                  <Text style={styles.resultLabel}>Make:</Text>\n                  <Text style={styles.resultValue}>{decodedData.make}</Text>\n                </View>\n                <View style={styles.resultRow}>\n                  <Text style={styles.resultLabel}>Model:</Text>\n                  <Text style={styles.resultValue}>{decodedData.model}</Text>\n                </View>\n                {decodedData.trim && (\n                  <View style={styles.resultRow}>\n                    <Text style={styles.resultLabel}>Trim:</Text>\n                    <Text style={styles.resultValue}>{decodedData.trim}</Text>\n                  </View>\n                )}\n                {decodedData.engine && (\n                  <View style={styles.resultRow}>\n                    <Text style={styles.resultLabel}>Engine:</Text>\n                    <Text style={styles.resultValue}>{decodedData.engine}</Text>\n                  </View>\n                )}\n                {decodedData.transmission && (\n                  <View style={styles.resultRow}>\n                    <Text style={styles.resultLabel}>Transmission:</Text>\n                    <Text style={styles.resultValue}>{decodedData.transmission}</Text>\n                  </View>\n                )}\n                {decodedData.fuelType && (\n                  <View style={styles.resultRow}>\n                    <Text style={styles.resultLabel}>Fuel Type:</Text>\n                    <Text style={styles.resultValue}>{decodedData.fuelType}</Text>\n                  </View>\n                )}\n              </View>\n\n              <View style={styles.resultActions}>\n                <Button\n                  title=\"Use This Vehicle\"\n                  onPress={handleConfirm}\n                  style={styles.confirmButton}\n                />\n                <Button\n                  title=\"Try Different VIN\"\n                  variant=\"outline\"\n                  onPress={() => {\n                    setDecodedData(null);\n                    setVinInput('');\n                  }}\n                  style={styles.retryButton}\n                />\n              </View>\n            </View>\n          </View>\n        )}\n\n        <View style={styles.helpSection}>\n          <Text style={styles.helpTitle}>Where to find your VIN:</Text>\n          <View style={styles.helpItem}>\n            <Icons.Eye size={16} color={Colors.textSecondary} />\n            <Text style={styles.helpText}>Dashboard (visible through windshield)</Text>\n          </View>\n          <View style={styles.helpItem}>\n            <Icons.DoorOpen size={16} color={Colors.textSecondary} />\n            <Text style={styles.helpText}>Driver's side door frame</Text>\n          </View>\n          <View style={styles.helpItem}>\n            <Icons.FileText size={16} color={Colors.textSecondary} />\n            <Text style={styles.helpText}>Vehicle registration or insurance documents</Text>\n          </View>\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  content: {\n    flex: 1,\n    padding: 20,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  sectionSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    lineHeight: 20,\n  },\n  vinInput: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    fontSize: 16,\n    color: Colors.text,\n    fontFamily: 'monospace',\n    letterSpacing: 1,\n    marginBottom: 16,\n  },\n  vinActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  decodeButton: {\n    flex: 2,\n  },\n  manualButton: {\n    flex: 1,\n  },\n  loadingSection: {\n    alignItems: 'center',\n    padding: 24,\n  },\n  loadingText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginTop: 12,\n  },\n  resultsSection: {\n    marginBottom: 24,\n  },\n  resultCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  resultHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n    marginBottom: 16,\n  },\n  resultTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  resultDetails: {\n    marginBottom: 20,\n  },\n  resultRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  resultLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  resultValue: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '600',\n  },\n  resultActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  confirmButton: {\n    flex: 2,\n  },\n  retryButton: {\n    flex: 1,\n  },\n  helpSection: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginTop: 24,\n  },\n  helpTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  helpItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  helpText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +723 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView, TextInput, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\nimport { ServiceTool, ServiceType } from '@/types/service';\nimport { SERVICE_TOOLS } from '@/constants/services';\n\ninterface ToolsEquipmentSettingsProps {\n  onSettingsChange: (settings: ToolsSettings) => void;\n}\n\ninterface ToolsSettings {\n  availableTools: { [toolId: string]: boolean };\n  customTools: ServiceTool[];\n  toolConditions: { [toolId: string]: 'excellent' | 'good' | 'fair' | 'needs_replacement' };\n  toolNotes: { [toolId: string]: string };\n}\n\nexport function ToolsEquipmentSettings({ onSettingsChange }: ToolsEquipmentSettingsProps) {\n  const [settings, setSettings] = useState<ToolsSettings>({\n    availableTools: {},\n    customTools: [],\n    toolConditions: {},\n    toolNotes: {},\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState<ServiceType>('oil_change');\n  const [showAddTool, setShowAddTool] = useState(false);\n  const [newTool, setNewTool] = useState<Partial<ServiceTool>>({\n    name: '',\n    category: 'basic',\n    required: false,\n    description: '',\n  });\n\n  const updateToolAvailability = (toolId: string, available: boolean) => {\n    const newSettings = {\n      ...settings,\n      availableTools: {\n        ...settings.availableTools,\n        [toolId]: available,\n      },\n    };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const updateToolCondition = (toolId: string, condition: ToolsSettings['toolConditions'][string]) => {\n    const newSettings = {\n      ...settings,\n      toolConditions: {\n        ...settings.toolConditions,\n        [toolId]: condition,\n      },\n    };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const updateToolNotes = (toolId: string, notes: string) => {\n    const newSettings = {\n      ...settings,\n      toolNotes: {\n        ...settings.toolNotes,\n        [toolId]: notes,\n      },\n    };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const addCustomTool = () => {\n    if (!newTool.name) {\n      Alert.alert('Error', 'Please enter a tool name');\n      return;\n    }\n\n    const tool: ServiceTool = {\n      id: `custom-${Date.now()}`,\n      name: newTool.name,\n      category: newTool.category || 'basic',\n      required: newTool.required || false,\n      description: newTool.description || '',\n    };\n\n    const newSettings = {\n      ...settings,\n      customTools: [...settings.customTools, tool],\n      availableTools: {\n        ...settings.availableTools,\n        [tool.id]: true,\n      },\n    };\n\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n    setNewTool({ name: '', category: 'basic', required: false, description: '' });\n    setShowAddTool(false);\n  };\n\n  const removeCustomTool = (toolId: string) => {\n    Alert.alert(\n      'Remove Tool',\n      'Are you sure you want to remove this custom tool?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Remove',\n          style: 'destructive',\n          onPress: () => {\n            const newSettings = {\n              ...settings,\n              customTools: settings.customTools.filter(tool => tool.id !== toolId),\n              availableTools: { ...settings.availableTools },\n              toolConditions: { ...settings.toolConditions },\n              toolNotes: { ...settings.toolNotes },\n            };\n            delete newSettings.availableTools[toolId];\n            delete newSettings.toolConditions[toolId];\n            delete newSettings.toolNotes[toolId];\n            setSettings(newSettings);\n            onSettingsChange(newSettings);\n          },\n        },\n      ]\n    );\n  };\n\n  const serviceCategories = [\n    { key: 'oil_change', title: 'Oil Change', icon: 'Droplets' },\n    { key: 'brake_service', title: 'Brake Service', icon: 'Disc' },\n    { key: 'tire_service', title: 'Tire Service', icon: 'Circle' },\n    { key: 'battery_service', title: 'Battery Service', icon: 'Battery' },\n    { key: 'engine_diagnostic', title: 'Engine Diagnostic', icon: 'Search' },\n    { key: 'transmission', title: 'Transmission', icon: 'Settings' },\n    { key: 'ac_service', title: 'A/C Service', icon: 'Snowflake' },\n    { key: 'general_repair', title: 'General Repair', icon: 'Wrench' },\n    { key: 'emergency_roadside', title: 'Emergency Roadside', icon: 'Phone' },\n  ];\n\n  const conditionColors = {\n    excellent: Colors.success,\n    good: Colors.primary,\n    fair: Colors.warning,\n    needs_replacement: Colors.error,\n  };\n\n  const conditionLabels = {\n    excellent: 'Excellent',\n    good: 'Good',\n    fair: 'Fair',\n    needs_replacement: 'Needs Replacement',\n  };\n\n  const currentTools = SERVICE_TOOLS[selectedCategory] || [];\n  const availableCount = currentTools.filter(tool => settings.availableTools[tool.id]).length;\n  const totalCount = currentTools.length;\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* Category Selector */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Service Categories</Text>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryScroll}>\n          {serviceCategories.map((category) => {\n            const IconComponent = Icons[category.icon as keyof typeof Icons] as any;\n            const isSelected = selectedCategory === category.key;\n            \n            return (\n              <TouchableOpacity\n                key={category.key}\n                style={[styles.categoryButton, isSelected && styles.categoryButtonSelected]}\n                onPress={() => setSelectedCategory(category.key as ServiceType)}\n              >\n                {IconComponent && (\n                  <IconComponent \n                    size={20} \n                    color={isSelected ? Colors.primary : Colors.textMuted} \n                  />\n                )}\n                <Text style={[\n                  styles.categoryButtonText,\n                  isSelected && styles.categoryButtonTextSelected\n                ]}>\n                  {category.title}\n                </Text>\n              </TouchableOpacity>\n            );\n          })}\n        </ScrollView>\n      </View>\n\n      {/* Tools Overview */}\n      <View style={styles.overviewCard}>\n        <View style={styles.overviewHeader}>\n          <Icons.Wrench size={20} color={Colors.primary} />\n          <Text style={styles.overviewTitle}>\n            {serviceCategories.find(c => c.key === selectedCategory)?.title} Tools\n          </Text>\n        </View>\n        <Text style={styles.overviewText}>\n          {availableCount} of {totalCount} tools available\n        </Text>\n        <View style={styles.progressBar}>\n          <View \n            style={[\n              styles.progressFill, \n              { width: `${totalCount > 0 ? (availableCount / totalCount) * 100 : 0}%` }\n            ]} \n          />\n        </View>\n      </View>\n\n      {/* Tools List */}\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Text style={styles.sectionTitle}>Tools & Equipment</Text>\n          <TouchableOpacity \n            style={styles.addButton}\n            onPress={() => setShowAddTool(true)}\n          >\n            <Icons.Plus size={16} color={Colors.primary} />\n            <Text style={styles.addButtonText}>Add Tool</Text>\n          </TouchableOpacity>\n        </View>\n\n        {currentTools.map((tool) => {\n          const isAvailable = settings.availableTools[tool.id];\n          const condition = settings.toolConditions[tool.id] || 'good';\n          const notes = settings.toolNotes[tool.id] || '';\n\n          return (\n            <View key={tool.id} style={styles.toolCard}>\n              <View style={styles.toolHeader}>\n                <View style={styles.toolInfo}>\n                  <View style={[\n                    styles.toolIcon,\n                    { backgroundColor: isAvailable ? Colors.success + '20' : Colors.textMuted + '20' }\n                  ]}>\n                    <Icons.Wrench \n                      size={16} \n                      color={isAvailable ? Colors.success : Colors.textMuted} \n                    />\n                  </View>\n                  <View style={styles.toolContent}>\n                    <Text style={styles.toolName}>{tool.name}</Text>\n                    <Text style={styles.toolDescription}>{tool.description}</Text>\n                    {tool.required && (\n                      <View style={styles.requiredBadge}>\n                        <Text style={styles.requiredText}>Required</Text>\n                      </View>\n                    )}\n                  </View>\n                </View>\n                <TouchableOpacity\n                  style={[\n                    styles.availabilityButton,\n                    isAvailable && styles.availabilityButtonActive\n                  ]}\n                  onPress={() => updateToolAvailability(tool.id, !isAvailable)}\n                >\n                  <Text style={[\n                    styles.availabilityButtonText,\n                    isAvailable && styles.availabilityButtonTextActive\n                  ]}>\n                    {isAvailable ? 'Available' : 'Not Available'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n\n              {isAvailable && (\n                <View style={styles.toolDetails}>\n                  <View style={styles.conditionRow}>\n                    <Text style={styles.conditionLabel}>Condition:</Text>\n                    <View style={styles.conditionButtons}>\n                      {Object.entries(conditionLabels).map(([key, label]) => (\n                        <TouchableOpacity\n                          key={key}\n                          style={[\n                            styles.conditionButton,\n                            condition === key && { \n                              backgroundColor: conditionColors[key as keyof typeof conditionColors] + '20',\n                              borderColor: conditionColors[key as keyof typeof conditionColors]\n                            }\n                          ]}\n                          onPress={() => updateToolCondition(tool.id, key as keyof typeof conditionLabels)}\n                        >\n                          <Text style={[\n                            styles.conditionButtonText,\n                            condition === key && { \n                              color: conditionColors[key as keyof typeof conditionColors] \n                            }\n                          ]}>\n                            {label}\n                          </Text>\n                        </TouchableOpacity>\n                      ))}\n                    </View>\n                  </View>\n\n                  <View style={styles.notesRow}>\n                    <Text style={styles.notesLabel}>Notes:</Text>\n                    <TextInput\n                      style={styles.notesInput}\n                      value={notes}\n                      onChangeText={(text) => updateToolNotes(tool.id, text)}\n                      placeholder=\"Add notes about this tool...\"\n                      multiline\n                    />\n                  </View>\n                </View>\n              )}\n            </View>\n          );\n        })}\n\n        {/* Custom Tools */}\n        {settings.customTools.length > 0 && (\n          <View style={styles.customToolsSection}>\n            <Text style={styles.customToolsTitle}>Custom Tools</Text>\n            {settings.customTools.map((tool) => (\n              <View key={tool.id} style={[styles.toolCard, styles.customToolCard]}>\n                <View style={styles.toolHeader}>\n                  <View style={styles.toolInfo}>\n                    <View style={styles.toolIcon}>\n                      <Icons.Plus size={16} color={Colors.primary} />\n                    </View>\n                    <View style={styles.toolContent}>\n                      <Text style={styles.toolName}>{tool.name}</Text>\n                      <Text style={styles.toolDescription}>{tool.description}</Text>\n                    </View>\n                  </View>\n                  <TouchableOpacity\n                    style={styles.removeButton}\n                    onPress={() => removeCustomTool(tool.id)}\n                  >\n                    <Icons.Trash2 size={16} color={Colors.error} />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            ))}\n          </View>\n        )}\n      </View>\n\n      {/* Add Tool Modal */}\n      {showAddTool && (\n        <View style={styles.modal}>\n          <View style={styles.modalContent}>\n            <View style={styles.modalHeader}>\n              <Text style={styles.modalTitle}>Add Custom Tool</Text>\n              <TouchableOpacity onPress={() => setShowAddTool(false)}>\n                <Icons.X size={24} color={Colors.textMuted} />\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.modalBody}>\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Tool Name</Text>\n                <TextInput\n                  style={styles.textInput}\n                  value={newTool.name}\n                  onChangeText={(text) => setNewTool({ ...newTool, name: text })}\n                  placeholder=\"Enter tool name\"\n                />\n              </View>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Description</Text>\n                <TextInput\n                  style={[styles.textInput, styles.textArea]}\n                  value={newTool.description}\n                  onChangeText={(text) => setNewTool({ ...newTool, description: text })}\n                  placeholder=\"Enter tool description\"\n                  multiline\n                />\n              </View>\n\n              <View style={styles.modalActions}>\n                <TouchableOpacity \n                  style={styles.cancelButton}\n                  onPress={() => setShowAddTool(false)}\n                >\n                  <Text style={styles.cancelButtonText}>Cancel</Text>\n                </TouchableOpacity>\n                <TouchableOpacity \n                  style={styles.addToolButton}\n                  onPress={addCustomTool}\n                >\n                  <Text style={styles.addToolButtonText}>Add Tool</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </View>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  addButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 6,\n    backgroundColor: Colors.primary + '20',\n  },\n  addButtonText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  categoryScroll: {\n    marginBottom: 8,\n  },\n  categoryButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    marginRight: 8,\n    borderRadius: 20,\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  categoryButtonSelected: {\n    backgroundColor: Colors.primary + '20',\n    borderColor: Colors.primary,\n  },\n  categoryButtonText: {\n    fontSize: 14,\n    color: Colors.textMuted,\n    fontWeight: '500',\n  },\n  categoryButtonTextSelected: {\n    color: Colors.primary,\n  },\n  overviewCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  overviewHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  overviewTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  overviewText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n  },\n  progressBar: {\n    height: 4,\n    backgroundColor: Colors.border,\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: Colors.success,\n  },\n  toolCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  customToolCard: {\n    borderColor: Colors.primary + '30',\n    backgroundColor: Colors.primary + '05',\n  },\n  toolHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 16,\n  },\n  toolInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  toolIcon: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  toolContent: {\n    flex: 1,\n  },\n  toolName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  toolDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  requiredBadge: {\n    alignSelf: 'flex-start',\n    backgroundColor: Colors.error + '20',\n    borderWidth: 1,\n    borderColor: Colors.error,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  requiredText: {\n    fontSize: 10,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  availabilityButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 6,\n    backgroundColor: Colors.textMuted + '20',\n    borderWidth: 1,\n    borderColor: Colors.textMuted,\n  },\n  availabilityButtonActive: {\n    backgroundColor: Colors.success + '20',\n    borderColor: Colors.success,\n  },\n  availabilityButtonText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontWeight: '500',\n  },\n  availabilityButtonTextActive: {\n    color: Colors.success,\n  },\n  toolDetails: {\n    padding: 16,\n    paddingTop: 0,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  conditionRow: {\n    marginBottom: 12,\n  },\n  conditionLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  conditionButtons: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  conditionButton: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  conditionButtonText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  notesRow: {\n    marginTop: 8,\n  },\n  notesLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  notesInput: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 14,\n    color: Colors.text,\n    minHeight: 60,\n    textAlignVertical: 'top',\n  },\n  customToolsSection: {\n    marginTop: 24,\n    paddingTop: 24,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  customToolsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  removeButton: {\n    padding: 8,\n  },\n  modal: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1000,\n  },\n  modalContent: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    margin: 20,\n    maxWidth: 400,\n    width: '100%',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  modalBody: {\n    padding: 20,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  textInput: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 14,\n    color: Colors.text,\n  },\n  textArea: {\n    minHeight: 80,\n    textAlignVertical: 'top',\n  },\n  modalActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginTop: 8,\n  },\n  cancelButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: Colors.textMuted + '20',\n    alignItems: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    color: Colors.textMuted,\n    fontWeight: '500',\n  },\n  addToolButton: {\n    flex: 1,\n    paddingVertical: 12,\n    borderRadius: 8,\n    backgroundColor: Colors.primary,\n    alignItems: 'center',\n  },\n  addToolButtonText: {\n    fontSize: 16,\n    color: Colors.white,\n    fontWeight: '500',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +236 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Alert, TouchableOpacity } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { Quote } from '@/types/service';\nimport * as Icons from 'lucide-react-native';\n\ninterface StripePaymentProps {\n  quote: Quote;\n  onSuccess: (paymentIntentId: string) => void;\n  onCancel: () => void;\n}\n\nexport function StripePayment({ quote, onSuccess, onCancel }: StripePaymentProps) {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState<'card' | 'apple_pay' | 'google_pay'>('card');\n\n  const handleStripePayment = async () => {\n    setIsProcessing(true);\n    \n    try {\n      // In production, this would integrate with Stripe SDK\n      // For now, we'll simulate the payment process\n      \n      // 1. Create payment intent on your backend\n      const paymentIntent = await createPaymentIntent(quote);\n      \n      // 2. Confirm payment with Stripe\n      const result = await confirmPayment(paymentIntent.client_secret, paymentMethod);\n      \n      if (result.success) {\n        onSuccess(result.paymentIntentId);\n      } else {\n        Alert.alert('Payment Failed', result.error || 'Please try again.');\n      }\n    } catch (error) {\n      Alert.alert('Payment Error', 'An unexpected error occurred. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Mock functions - replace with actual Stripe integration\n  const createPaymentIntent = async (quote: Quote) => {\n    // This would call your backend to create a Stripe PaymentIntent\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return {\n      client_secret: 'pi_mock_client_secret',\n      amount: quote.totalCost * 100, // Stripe uses cents\n    };\n  };\n\n  const confirmPayment = async (clientSecret: string, method: string) => {\n    // This would use Stripe SDK to confirm the payment\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    // 90% success rate for demo\n    const success = Math.random() > 0.1;\n    \n    if (success) {\n      return {\n        success: true,\n        paymentIntentId: 'pi_' + Date.now(),\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Your card was declined. Please try a different payment method.',\n      };\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Secure Payment</Text>\n        <TouchableOpacity onPress={onCancel}>\n          <Icons.X size={24} color={Colors.text} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Payment Amount */}\n      <View style={styles.amountSection}>\n        <Text style={styles.amountLabel}>Total Amount</Text>\n        <Text style={styles.amountValue}>${quote.totalCost}</Text>\n      </View>\n\n      {/* Payment Methods */}\n      <View style={styles.paymentMethods}>\n        <Text style={styles.sectionTitle}>Payment Method</Text>\n        \n        <TouchableOpacity\n          style={[styles.paymentOption, paymentMethod === 'card' && styles.selectedOption]}\n          onPress={() => setPaymentMethod('card')}\n        >\n          <Icons.CreditCard size={20} color={Colors.primary} />\n          <Text style={styles.paymentOptionText}>Credit/Debit Card</Text>\n          {paymentMethod === 'card' && <Icons.Check size={16} color={Colors.success} />}\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.paymentOption, paymentMethod === 'apple_pay' && styles.selectedOption]}\n          onPress={() => setPaymentMethod('apple_pay')}\n        >\n          <Icons.Smartphone size={20} color={Colors.primary} />\n          <Text style={styles.paymentOptionText}>Apple Pay</Text>\n          {paymentMethod === 'apple_pay' && <Icons.Check size={16} color={Colors.success} />}\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.paymentOption, paymentMethod === 'google_pay' && styles.selectedOption]}\n          onPress={() => setPaymentMethod('google_pay')}\n        >\n          <Icons.Wallet size={20} color={Colors.primary} />\n          <Text style={styles.paymentOptionText}>Google Pay</Text>\n          {paymentMethod === 'google_pay' && <Icons.Check size={16} color={Colors.success} />}\n        </TouchableOpacity>\n      </View>\n\n      {/* Security Notice */}\n      <View style={styles.securityNotice}>\n        <Icons.Shield size={16} color={Colors.success} />\n        <Text style={styles.securityText}>\n          Payments are processed securely by Stripe with 256-bit SSL encryption\n        </Text>\n      </View>\n\n      {/* Payment Button */}\n      <View style={styles.actions}>\n        <Button\n          title=\"Cancel\"\n          variant=\"outline\"\n          onPress={onCancel}\n          style={styles.cancelButton}\n          disabled={isProcessing}\n        />\n        <Button\n          title={isProcessing ? 'Processing...' : `Pay $${quote.totalCost}`}\n          onPress={handleStripePayment}\n          style={styles.payButton}\n          disabled={isProcessing}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.background,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    padding: 20,\n    minHeight: 400,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  amountSection: {\n    alignItems: 'center',\n    marginBottom: 32,\n    padding: 20,\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n  },\n  amountLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  amountValue: {\n    fontSize: 32,\n    fontWeight: '700',\n    color: Colors.primary,\n  },\n  paymentMethods: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  paymentOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  selectedOption: {\n    borderColor: Colors.primary,\n    backgroundColor: Colors.primary + '10',\n  },\n  paymentOptionText: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    marginLeft: 12,\n  },\n  securityNotice: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.success + '20',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 24,\n    gap: 8,\n  },\n  securityText: {\n    fontSize: 12,\n    color: Colors.success,\n    flex: 1,\n  },\n  actions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  cancelButton: {\n    flex: 1,\n  },\n  payButton: {\n    flex: 2,\n  },\n});"
            }
          }
        },
        {
          "display": "have for left to go, then i need you to push them to my github, and then we'll continue with the rest",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +561 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useRef } from 'react';\nimport { View, Text, StyleSheet, Alert, Dimensions, PanResponder, Animated } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { PRODUCTION_CONFIG, logProductionEvent } from '@/utils/firebase-config';\nimport * as Icons from 'lucide-react-native';\nimport { Platform } from 'react-native';\n\ninterface SignatureCaptureProps {\n  jobId: string;\n  jobTitle: string;\n  onSignatureComplete: (jobId: string, signatureData: string) => void;\n  onCancel: () => void;\n}\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nexport function SignatureCapture({ jobId, jobTitle, onSignatureComplete, onCancel }: SignatureCaptureProps) {\n  const [hasSignature, setHasSignature] = useState(false);\n  const [customerName, setCustomerName] = useState('');\n  const [signaturePaths, setSignaturePaths] = useState<Array<{ x: number; y: number }[]>>([]);\n  const [currentPath, setCurrentPath] = useState<{ x: number; y: number }[]>([]);\n  \n  const canvasRef = useRef<View>(null);\n\n  // Create PanResponder for signature capture\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onMoveShouldSetPanResponder: () => true,\n    \n    onPanResponderGrant: (evt) => {\n      const { locationX, locationY } = evt.nativeEvent;\n      setCurrentPath([{ x: locationX, y: locationY }]);\n      \n      // Production logging\n      logProductionEvent('signature_started', {\n        jobId,\n        mechanicId: 'mechanic-cody',\n        platform: Platform.OS\n      });\n    },\n    \n    onPanResponderMove: (evt) => {\n      const { locationX, locationY } = evt.nativeEvent;\n      setCurrentPath(prev => [...prev, { x: locationX, y: locationY }]);\n    },\n    \n    onPanResponderRelease: () => {\n      if (currentPath.length > 1) {\n        setSignaturePaths(prev => [...prev, currentPath]);\n        setCurrentPath([]);\n        setHasSignature(true);\n        setCustomerName('Customer'); // In production, this would come from job data\n        \n        // Production logging\n        logProductionEvent('signature_drawn', {\n          jobId,\n          mechanicId: 'mechanic-cody',\n          pathLength: currentPath.length\n        });\n      }\n    },\n  });\n\n  const handleClearSignature = () => {\n    setSignaturePaths([]);\n    setCurrentPath([]);\n    setHasSignature(false);\n    setCustomerName('');\n    \n    logProductionEvent('signature_cleared', {\n      jobId,\n      mechanicId: 'mechanic-cody'\n    });\n    \n    Alert.alert('Signature Cleared', 'Please sign again.');\n  };\n\n  const handleMockSign = () => {\n    // Production: Simulate signing with a simple path for demo/testing\n    const mockPath = [\n      { x: 50, y: 100 },\n      { x: 100, y: 80 },\n      { x: 150, y: 120 },\n      { x: 200, y: 90 },\n      { x: 250, y: 110 },\n    ];\n    \n    setSignaturePaths([mockPath]);\n    setHasSignature(true);\n    setCustomerName('Customer');\n    \n    logProductionEvent('signature_simulated', {\n      jobId,\n      mechanicId: 'mechanic-cody',\n      reason: 'demo_signature'\n    });\n    \n    Alert.alert('Signature Captured', 'Customer signature has been recorded.');\n  };\n\n  const generateSignatureData = () => {\n    // In production, this would convert the signature paths to an image\n    // For now, we'll create a mock base64 string with signature metadata\n    const signatureMetadata = {\n      jobId,\n      timestamp: new Date().toISOString(),\n      mechanicId: 'mechanic-cody',\n      customerName,\n      pathCount: signaturePaths.length,\n      platform: Platform.OS,\n    };\n    \n    // Mock base64 signature data\n    const mockSignatureData = `data:image/png;base64,${btoa(JSON.stringify(signatureMetadata))}`;\n    return mockSignatureData;\n  };\n\n  const handleComplete = () => {\n    if (!hasSignature) {\n      Alert.alert('Signature Required', 'Please capture customer signature before completing.');\n      return;\n    }\n\n    // Production validation\n    if (PRODUCTION_CONFIG.requireSignature && !hasSignature) {\n      Alert.alert(\n        'Signature Required',\n        'Customer signature is required to complete this job in production mode.',\n        [{ text: 'OK' }]\n      );\n      return;\n    }\n\n    Alert.alert(\n      'Complete Job',\n      'Confirm job completion with customer signature?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Complete',\n          onPress: () => {\n            const signatureData = generateSignatureData();\n            \n            logProductionEvent('signature_completed', {\n              jobId,\n              mechanicId: 'mechanic-cody',\n              customerName,\n              signatureLength: signatureData.length\n            });\n            \n            onSignatureComplete(jobId, signatureData);\n          }\n        }\n      ]\n    );\n  };\n\n  const renderSignaturePaths = () => {\n    if (Platform.OS === 'web') {\n      // For web, we'll show a simplified signature representation\n      return hasSignature ? (\n        <View style={styles.webSignature}>\n          <Text style={styles.webSignatureText}>✓ Signature Captured</Text>\n        </View>\n      ) : null;\n    }\n\n    // For mobile, render the actual signature paths\n    return (\n      <View style={styles.signaturePaths}>\n        {signaturePaths.map((path, pathIndex) => (\n          <View key={pathIndex}>\n            {path.map((point, pointIndex) => (\n              <View\n                key={pointIndex}\n                style={[\n                  styles.signaturePoint,\n                  {\n                    left: point.x - 2,\n                    top: point.y - 2,\n                  }\n                ]}\n              />\n            ))}\n          </View>\n        ))}\n        {currentPath.map((point, pointIndex) => (\n          <View\n            key={`current-${pointIndex}`}\n            style={[\n              styles.signaturePoint,\n              styles.currentSignaturePoint,\n              {\n                left: point.x - 2,\n                top: point.y - 2,\n              }\n            ]}\n          />\n        ))}\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Customer Signature</Text>\n        <Text style={styles.subtitle}>{jobTitle}</Text>\n        {PRODUCTION_CONFIG.requireSignature && (\n          <View style={styles.requiredBadge}>\n            <Text style={styles.requiredText}>REQUIRED</Text>\n          </View>\n        )}\n      </View>\n\n      {/* Job Summary */}\n      <View style={styles.jobSummary}>\n        <Text style={styles.summaryTitle}>Work Completed</Text>\n        <Text style={styles.summaryText}>\n          Service has been completed according to the agreed specifications. \n          Customer signature confirms satisfaction with the work performed.\n        </Text>\n        <Text style={styles.mechanicInfo}>Completed by: Cody Owner</Text>\n      </View>\n\n      {/* Signature Canvas Area */}\n      <View style={styles.signatureArea}>\n        <Text style={styles.signatureLabel}>Customer Signature</Text>\n        \n        <View\n          ref={canvasRef}\n          style={[\n            styles.signatureCanvas,\n            hasSignature && styles.signatureCanvasWithSignature\n          ]}\n          {...(Platform.OS !== 'web' ? panResponder.panHandlers : {})}\n        >\n          {hasSignature ? (\n            <View style={styles.signaturePreview}>\n              <Icons.CheckCircle size={32} color={Colors.success} />\n              <Text style={styles.signatureText}>Signature Captured</Text>\n              <Text style={styles.customerNameText}>{customerName}</Text>\n              {renderSignaturePaths()}\n            </View>\n          ) : (\n            <View style={styles.signaturePlaceholder}>\n              <Icons.Edit3 size={32} color={Colors.textMuted} />\n              <Text style={styles.placeholderText}>\n                {Platform.OS === 'web' \n                  ? 'Click \"Simulate Signature\" to capture signature'\n                  : 'Draw customer signature here'\n                }\n              </Text>\n              <Text style={styles.instructionText}>\n                {Platform.OS === 'web'\n                  ? 'Signature capture requires mobile device in production'\n                  : 'Use finger or stylus to sign'\n                }\n              </Text>\n            </View>\n          )}\n          \n          {renderSignaturePaths()}\n        </View>\n\n        {/* Signature Controls */}\n        <View style={styles.signatureControls}>\n          {!hasSignature ? (\n            <>\n              <Button\n                title=\"Simulate Signature\"\n                onPress={handleMockSign}\n                style={styles.signButton}\n              />\n              {Platform.OS !== 'web' && (\n                <Text style={styles.signatureHint}>\n                  Or draw signature in the area above\n                </Text>\n              )}\n            </>\n          ) : (\n            <Button\n              title=\"Clear Signature\"\n              variant=\"outline\"\n              onPress={handleClearSignature}\n              style={styles.clearButton}\n            />\n          )}\n        </View>\n      </View>\n\n      {/* Agreement Text */}\n      <View style={styles.agreementSection}>\n        <Text style={styles.agreementText}>\n          By signing above, the customer acknowledges that:\n        </Text>\n        <Text style={styles.agreementItem}>• Work has been completed satisfactorily</Text>\n        <Text style={styles.agreementItem}>• All services have been explained</Text>\n        <Text style={styles.agreementItem}>• Payment terms are understood</Text>\n        <Text style={styles.agreementItem}>• Service performed by Cody Owner</Text>\n      </View>\n\n      {/* Production Requirements */}\n      {PRODUCTION_CONFIG.requireSignature && (\n        <View style={styles.requirementsCard}>\n          <Icons.AlertCircle size={16} color={Colors.error} />\n          <Text style={styles.requirementsText}>\n            Customer signature is required for job completion in production mode.\n            {hasSignature ? ' Signature captured successfully.' : ' Please capture signature to proceed.'}\n          </Text>\n        </View>\n      )}\n\n      {/* Action Buttons */}\n      <View style={styles.actions}>\n        <Button\n          title=\"Cancel\"\n          variant=\"outline\"\n          onPress={onCancel}\n          style={styles.cancelButton}\n        />\n        <Button\n          title=\"Complete Job\"\n          onPress={handleComplete}\n          disabled={!hasSignature}\n          style={[\n            styles.completeButton,\n            !hasSignature && styles.completeButtonDisabled\n          ]}\n        />\n      </View>\n\n      {/* Footer Info */}\n      <View style={styles.footer}>\n        <Icons.Shield size={16} color={Colors.textMuted} />\n        <Text style={styles.footerText}>\n          Digital signature is legally binding and securely stored\n        </Text>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  requiredBadge: {\n    backgroundColor: Colors.error,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    alignSelf: 'flex-start',\n  },\n  requiredText: {\n    color: Colors.white,\n    fontSize: 10,\n    fontWeight: '600',\n  },\n  jobSummary: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 24,\n  },\n  summaryTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  summaryText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    lineHeight: 20,\n    marginBottom: 8,\n  },\n  mechanicInfo: {\n    fontSize: 14,\n    color: Colors.mechanic,\n    fontWeight: '500',\n  },\n  signatureArea: {\n    marginBottom: 24,\n  },\n  signatureLabel: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  signatureCanvas: {\n    backgroundColor: Colors.card,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    borderStyle: 'dashed',\n    borderRadius: 12,\n    height: 200,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 16,\n    position: 'relative',\n    overflow: 'hidden',\n  },\n  signatureCanvasWithSignature: {\n    borderColor: Colors.success,\n    borderStyle: 'solid',\n    backgroundColor: Colors.success + '10',\n  },\n  signaturePreview: {\n    alignItems: 'center',\n    zIndex: 2,\n  },\n  signatureText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.success,\n    marginTop: 8,\n  },\n  customerNameText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginTop: 4,\n  },\n  signaturePlaceholder: {\n    alignItems: 'center',\n    padding: 20,\n  },\n  placeholderText: {\n    fontSize: 16,\n    color: Colors.textMuted,\n    marginTop: 12,\n    textAlign: 'center',\n  },\n  instructionText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  signaturePaths: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  signaturePoint: {\n    position: 'absolute',\n    width: 4,\n    height: 4,\n    backgroundColor: Colors.primary,\n    borderRadius: 2,\n  },\n  currentSignaturePoint: {\n    backgroundColor: Colors.secondary,\n  },\n  webSignature: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: [{ translateX: -50 }, { translateY: -50 }],\n  },\n  webSignatureText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.success,\n  },\n  signatureControls: {\n    alignItems: 'center',\n  },\n  signButton: {\n    backgroundColor: Colors.primary,\n    paddingHorizontal: 32,\n  },\n  clearButton: {\n    paddingHorizontal: 32,\n  },\n  signatureHint: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  agreementSection: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 16,\n  },\n  agreementText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  agreementItem: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n    paddingLeft: 8,\n  },\n  requirementsCard: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    backgroundColor: Colors.error + '10',\n    borderWidth: 1,\n    borderColor: Colors.error + '30',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  requirementsText: {\n    flex: 1,\n    fontSize: 12,\n    color: Colors.error,\n    lineHeight: 16,\n  },\n  actions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 16,\n  },\n  cancelButton: {\n    flex: 1,\n  },\n  completeButton: {\n    flex: 2,\n    backgroundColor: Colors.success,\n  },\n  completeButtonDisabled: {\n    backgroundColor: Colors.textMuted,\n  },\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    justifyContent: 'center',\n  },\n  footerText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +546 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView, TextInput, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\nimport { ServiceType } from '@/types/service';\nimport { SERVICE_PRICING } from '@/constants/pricing';\n\ninterface ServicePricingSettingsProps {\n  onSettingsChange: (settings: PricingSettings) => void;\n}\n\ninterface PricingSettings {\n  laborRate: number;\n  emergencyRate: number;\n  travelFee: number;\n  minimumCharge: number;\n  servicePricing: {\n    [key in ServiceType]: {\n      basePrice: number;\n      laborRate: number;\n      estimatedHours: number;\n    };\n  };\n  discounts: {\n    seniorDiscount: number;\n    militaryDiscount: number;\n    repeatCustomerDiscount: number;\n  };\n}\n\nexport function ServicePricingSettings({ onSettingsChange }: ServicePricingSettingsProps) {\n  const [settings, setSettings] = useState<PricingSettings>({\n    laborRate: 85,\n    emergencyRate: 125,\n    travelFee: 25,\n    minimumCharge: 50,\n    servicePricing: {\n      oil_change: { basePrice: 45, laborRate: 75, estimatedHours: 0.5 },\n      brake_service: { basePrice: 150, laborRate: 85, estimatedHours: 2 },\n      tire_service: { basePrice: 80, laborRate: 75, estimatedHours: 1 },\n      battery_service: { basePrice: 120, laborRate: 75, estimatedHours: 0.75 },\n      engine_diagnostic: { basePrice: 100, laborRate: 85, estimatedHours: 1.5 },\n      transmission: { basePrice: 200, laborRate: 95, estimatedHours: 3 },\n      ac_service: { basePrice: 90, laborRate: 85, estimatedHours: 1.5 },\n      general_repair: { basePrice: 75, laborRate: 85, estimatedHours: 2 },\n      emergency_roadside: { basePrice: 65, laborRate: 95, estimatedHours: 1 },\n    },\n    discounts: {\n      seniorDiscount: 10,\n      militaryDiscount: 15,\n      repeatCustomerDiscount: 5,\n    },\n  });\n\n  const [editingService, setEditingService] = useState<ServiceType | null>(null);\n\n  const updateGeneralSetting = (key: keyof Omit<PricingSettings, 'servicePricing' | 'discounts'>, value: number) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const updateServicePricing = (serviceType: ServiceType, field: keyof PricingSettings['servicePricing'][ServiceType], value: number) => {\n    const newSettings = {\n      ...settings,\n      servicePricing: {\n        ...settings.servicePricing,\n        [serviceType]: {\n          ...settings.servicePricing[serviceType],\n          [field]: value,\n        },\n      },\n    };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const updateDiscount = (discountType: keyof PricingSettings['discounts'], value: number) => {\n    const newSettings = {\n      ...settings,\n      discounts: {\n        ...settings.discounts,\n        [discountType]: value,\n      },\n    };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const serviceTypes = [\n    { key: 'oil_change', title: 'Oil Change', icon: 'Droplets' },\n    { key: 'brake_service', title: 'Brake Service', icon: 'Disc' },\n    { key: 'tire_service', title: 'Tire Service', icon: 'Circle' },\n    { key: 'battery_service', title: 'Battery Service', icon: 'Battery' },\n    { key: 'engine_diagnostic', title: 'Engine Diagnostic', icon: 'Search' },\n    { key: 'transmission', title: 'Transmission', icon: 'Settings' },\n    { key: 'ac_service', title: 'A/C Service', icon: 'Snowflake' },\n    { key: 'general_repair', title: 'General Repair', icon: 'Wrench' },\n    { key: 'emergency_roadside', title: 'Emergency Roadside', icon: 'Phone' },\n  ];\n\n  const resetToDefaults = () => {\n    Alert.alert(\n      'Reset to Defaults',\n      'This will reset all pricing to default values. Are you sure?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Reset',\n          style: 'destructive',\n          onPress: () => {\n            const defaultSettings: PricingSettings = {\n              laborRate: 85,\n              emergencyRate: 125,\n              travelFee: 25,\n              minimumCharge: 50,\n              servicePricing: Object.fromEntries(\n                Object.entries(SERVICE_PRICING).map(([key, value]) => [\n                  key,\n                  {\n                    basePrice: value.basePrice,\n                    laborRate: value.laborRate,\n                    estimatedHours: value.estimatedHours,\n                  },\n                ])\n              ) as PricingSettings['servicePricing'],\n              discounts: {\n                seniorDiscount: 10,\n                militaryDiscount: 15,\n                repeatCustomerDiscount: 5,\n              },\n            };\n            setSettings(defaultSettings);\n            onSettingsChange(defaultSettings);\n          },\n        },\n      ]\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* General Rates */}\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Text style={styles.sectionTitle}>General Rates</Text>\n          <TouchableOpacity onPress={resetToDefaults} style={styles.resetButton}>\n            <Icons.RotateCcw size={16} color={Colors.primary} />\n            <Text style={styles.resetText}>Reset</Text>\n          </TouchableOpacity>\n        </View>\n\n        <View style={styles.rateCard}>\n          <View style={styles.rateItem}>\n            <Text style={styles.rateLabel}>Standard Labor Rate</Text>\n            <View style={styles.rateInput}>\n              <Text style={styles.dollarSign}>$</Text>\n              <TextInput\n                style={styles.rateValue}\n                value={settings.laborRate.toString()}\n                onChangeText={(text) => updateGeneralSetting('laborRate', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"85\"\n              />\n              <Text style={styles.rateUnit}>/hr</Text>\n            </View>\n          </View>\n\n          <View style={styles.rateItem}>\n            <Text style={styles.rateLabel}>Emergency Rate</Text>\n            <View style={styles.rateInput}>\n              <Text style={styles.dollarSign}>$</Text>\n              <TextInput\n                style={styles.rateValue}\n                value={settings.emergencyRate.toString()}\n                onChangeText={(text) => updateGeneralSetting('emergencyRate', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"125\"\n              />\n              <Text style={styles.rateUnit}>/hr</Text>\n            </View>\n          </View>\n\n          <View style={styles.rateItem}>\n            <Text style={styles.rateLabel}>Travel Fee</Text>\n            <View style={styles.rateInput}>\n              <Text style={styles.dollarSign}>$</Text>\n              <TextInput\n                style={styles.rateValue}\n                value={settings.travelFee.toString()}\n                onChangeText={(text) => updateGeneralSetting('travelFee', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"25\"\n              />\n            </View>\n          </View>\n\n          <View style={styles.rateItem}>\n            <Text style={styles.rateLabel}>Minimum Charge</Text>\n            <View style={styles.rateInput}>\n              <Text style={styles.dollarSign}>$</Text>\n              <TextInput\n                style={styles.rateValue}\n                value={settings.minimumCharge.toString()}\n                onChangeText={(text) => updateGeneralSetting('minimumCharge', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"50\"\n              />\n            </View>\n          </View>\n        </View>\n      </View>\n\n      {/* Service-Specific Pricing */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Service-Specific Pricing</Text>\n        {serviceTypes.map((service) => {\n          const IconComponent = Icons[service.icon as keyof typeof Icons] as any;\n          const pricing = settings.servicePricing[service.key as ServiceType];\n          \n          return (\n            <View key={service.key} style={styles.serviceCard}>\n              <TouchableOpacity\n                style={styles.serviceHeader}\n                onPress={() => setEditingService(editingService === service.key as ServiceType ? null : service.key as ServiceType)}\n              >\n                <View style={styles.serviceInfo}>\n                  <View style={styles.serviceIcon}>\n                    {IconComponent && <IconComponent size={20} color={Colors.primary} />}\n                  </View>\n                  <View style={styles.serviceContent}>\n                    <Text style={styles.serviceTitle}>{service.title}</Text>\n                    <Text style={styles.servicePrice}>\n                      Base: ${pricing.basePrice} • Labor: ${pricing.laborRate}/hr • {pricing.estimatedHours}h\n                    </Text>\n                  </View>\n                </View>\n                <Icons.ChevronDown \n                  size={20} \n                  color={Colors.textMuted}\n                  style={[\n                    styles.chevron,\n                    editingService === service.key && styles.chevronRotated\n                  ]}\n                />\n              </TouchableOpacity>\n\n              {editingService === service.key && (\n                <View style={styles.serviceDetails}>\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Base Price</Text>\n                    <View style={styles.detailInput}>\n                      <Text style={styles.dollarSign}>$</Text>\n                      <TextInput\n                        style={styles.detailValue}\n                        value={pricing.basePrice.toString()}\n                        onChangeText={(text) => updateServicePricing(service.key as ServiceType, 'basePrice', parseFloat(text) || 0)}\n                        keyboardType=\"numeric\"\n                      />\n                    </View>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Labor Rate</Text>\n                    <View style={styles.detailInput}>\n                      <Text style={styles.dollarSign}>$</Text>\n                      <TextInput\n                        style={styles.detailValue}\n                        value={pricing.laborRate.toString()}\n                        onChangeText={(text) => updateServicePricing(service.key as ServiceType, 'laborRate', parseFloat(text) || 0)}\n                        keyboardType=\"numeric\"\n                      />\n                      <Text style={styles.rateUnit}>/hr</Text>\n                    </View>\n                  </View>\n\n                  <View style={styles.detailRow}>\n                    <Text style={styles.detailLabel}>Estimated Hours</Text>\n                    <View style={styles.detailInput}>\n                      <TextInput\n                        style={styles.detailValue}\n                        value={pricing.estimatedHours.toString()}\n                        onChangeText={(text) => updateServicePricing(service.key as ServiceType, 'estimatedHours', parseFloat(text) || 0)}\n                        keyboardType=\"numeric\"\n                      />\n                      <Text style={styles.rateUnit}>hrs</Text>\n                    </View>\n                  </View>\n                </View>\n              )}\n            </View>\n          );\n        })}\n      </View>\n\n      {/* Discounts */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Customer Discounts</Text>\n        <View style={styles.discountCard}>\n          <View style={styles.discountItem}>\n            <Text style={styles.discountLabel}>Senior Discount</Text>\n            <View style={styles.discountInput}>\n              <TextInput\n                style={styles.discountValue}\n                value={settings.discounts.seniorDiscount.toString()}\n                onChangeText={(text) => updateDiscount('seniorDiscount', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"10\"\n              />\n              <Text style={styles.percentSign}>%</Text>\n            </View>\n          </View>\n\n          <View style={styles.discountItem}>\n            <Text style={styles.discountLabel}>Military Discount</Text>\n            <View style={styles.discountInput}>\n              <TextInput\n                style={styles.discountValue}\n                value={settings.discounts.militaryDiscount.toString()}\n                onChangeText={(text) => updateDiscount('militaryDiscount', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"15\"\n              />\n              <Text style={styles.percentSign}>%</Text>\n            </View>\n          </View>\n\n          <View style={styles.discountItem}>\n            <Text style={styles.discountLabel}>Repeat Customer</Text>\n            <View style={styles.discountInput}>\n              <TextInput\n                style={styles.discountValue}\n                value={settings.discounts.repeatCustomerDiscount.toString()}\n                onChangeText={(text) => updateDiscount('repeatCustomerDiscount', parseFloat(text) || 0)}\n                keyboardType=\"numeric\"\n                placeholder=\"5\"\n              />\n              <Text style={styles.percentSign}>%</Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  resetButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 6,\n    backgroundColor: Colors.primary + '20',\n  },\n  resetText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  rateCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  rateItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  rateLabel: {\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  rateInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  dollarSign: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginRight: 4,\n  },\n  rateValue: {\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '600',\n    minWidth: 40,\n    textAlign: 'center',\n  },\n  rateUnit: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginLeft: 4,\n  },\n  serviceCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  serviceHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: 16,\n  },\n  serviceInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  serviceIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.primary + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  serviceContent: {\n    flex: 1,\n  },\n  serviceTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  servicePrice: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  chevron: {\n    transform: [{ rotate: '0deg' }],\n  },\n  chevronRotated: {\n    transform: [{ rotate: '180deg' }],\n  },\n  serviceDetails: {\n    padding: 16,\n    paddingTop: 0,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  detailLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  detailInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 6,\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  detailValue: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    minWidth: 30,\n    textAlign: 'center',\n  },\n  discountCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  discountItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 12,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  discountLabel: {\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  discountInput: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  discountValue: {\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '600',\n    minWidth: 30,\n    textAlign: 'center',\n  },\n  percentSign: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginLeft: 4,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +80 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { ServiceCategory } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\n\ninterface ServiceCardProps {\n  service: ServiceCategory;\n  onPress: () => void;\n}\n\nexport function ServiceCard({ service, onPress }: ServiceCardProps) {\n  const IconComponent = Icons[service.icon as keyof typeof Icons] as any;\n  \n  return (\n    <TouchableOpacity style={styles.container} onPress={onPress}>\n      <View style={styles.iconContainer}>\n        {IconComponent && <IconComponent size={24} color={Colors.primary} />}\n      </View>\n      \n      <View style={styles.content}>\n        <Text style={styles.title}>{service.title}</Text>\n        <Text style={styles.description}>{service.description}</Text>\n        \n        <View style={styles.footer}>\n          <Text style={styles.time}>{service.estimatedTime}</Text>\n          <Text style={styles.price}>From ${service.basePrice}</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  iconContainer: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.surface,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 12,\n  },\n  content: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  description: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  time: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  price: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +502 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\nimport { useAppStore } from '@/stores/app-store';\n\ninterface ReportsAnalyticsProps {\n  mechanicId: string;\n}\n\nexport function ReportsAnalytics({ mechanicId }: ReportsAnalyticsProps) {\n  const { serviceRequests, quotes, jobLogs, getTotalRevenue, getPaymentHistory } = useAppStore();\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter' | 'year'>('month');\n\n  // Calculate date ranges\n  const now = new Date();\n  const getDateRange = (period: typeof selectedPeriod) => {\n    const end = new Date(now);\n    const start = new Date(now);\n    \n    switch (period) {\n      case 'week':\n        start.setDate(start.getDate() - 7);\n        break;\n      case 'month':\n        start.setMonth(start.getMonth() - 1);\n        break;\n      case 'quarter':\n        start.setMonth(start.getMonth() - 3);\n        break;\n      case 'year':\n        start.setFullYear(start.getFullYear() - 1);\n        break;\n    }\n    \n    return { start, end };\n  };\n\n  const { start: periodStart, end: periodEnd } = getDateRange(selectedPeriod);\n\n  // Calculate metrics\n  const completedJobs = serviceRequests.filter(r => \n    r.status === 'completed' && \n    r.completedAt && \n    r.completedAt >= periodStart && \n    r.completedAt <= periodEnd\n  );\n\n  const totalRevenue = getTotalRevenue(periodStart, periodEnd);\n  const averageJobValue = completedJobs.length > 0 ? totalRevenue / completedJobs.length : 0;\n\n  const totalWorkTime = jobLogs\n    .filter(log => \n      log.mechanicId === mechanicId &&\n      log.startTime >= periodStart && \n      log.startTime <= periodEnd &&\n      log.endTime\n    )\n    .reduce((total, log) => {\n      if (log.endTime) {\n        return total + (log.endTime.getTime() - log.startTime.getTime());\n      }\n      return total;\n    }, 0);\n\n  const averageJobTime = completedJobs.length > 0 ? totalWorkTime / completedJobs.length : 0;\n\n  // Service type breakdown\n  const serviceBreakdown = completedJobs.reduce((acc, job) => {\n    acc[job.type] = (acc[job.type] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const topServices = Object.entries(serviceBreakdown)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5);\n\n  // Customer satisfaction (mock data for now)\n  const customerRating = 4.8;\n  const totalReviews = completedJobs.length;\n\n  const periods = [\n    { key: 'week', label: 'Week' },\n    { key: 'month', label: 'Month' },\n    { key: 'quarter', label: 'Quarter' },\n    { key: 'year', label: 'Year' },\n  ];\n\n  const formatTime = (milliseconds: number) => {\n    const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n    return `${hours}h ${minutes}m`;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* Period Selector */}\n      <View style={styles.periodSelector}>\n        {periods.map((period) => (\n          <TouchableOpacity\n            key={period.key}\n            style={[\n              styles.periodButton,\n              selectedPeriod === period.key && styles.periodButtonActive\n            ]}\n            onPress={() => setSelectedPeriod(period.key as typeof selectedPeriod)}\n          >\n            <Text style={[\n              styles.periodButtonText,\n              selectedPeriod === period.key && styles.periodButtonTextActive\n            ]}>\n              {period.label}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Key Metrics */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Key Metrics</Text>\n        <View style={styles.metricsGrid}>\n          <View style={styles.metricCard}>\n            <View style={styles.metricIcon}>\n              <Icons.DollarSign size={24} color={Colors.success} />\n            </View>\n            <Text style={styles.metricValue}>{formatCurrency(totalRevenue)}</Text>\n            <Text style={styles.metricLabel}>Total Revenue</Text>\n          </View>\n\n          <View style={styles.metricCard}>\n            <View style={styles.metricIcon}>\n              <Icons.CheckCircle size={24} color={Colors.primary} />\n            </View>\n            <Text style={styles.metricValue}>{completedJobs.length}</Text>\n            <Text style={styles.metricLabel}>Jobs Completed</Text>\n          </View>\n\n          <View style={styles.metricCard}>\n            <View style={styles.metricIcon}>\n              <Icons.TrendingUp size={24} color={Colors.warning} />\n            </View>\n            <Text style={styles.metricValue}>{formatCurrency(averageJobValue)}</Text>\n            <Text style={styles.metricLabel}>Avg Job Value</Text>\n          </View>\n\n          <View style={styles.metricCard}>\n            <View style={styles.metricIcon}>\n              <Icons.Clock size={24} color={Colors.mechanic} />\n            </View>\n            <Text style={styles.metricValue}>{formatTime(averageJobTime)}</Text>\n            <Text style={styles.metricLabel}>Avg Job Time</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Performance Overview */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Performance Overview</Text>\n        <View style={styles.performanceCard}>\n          <View style={styles.performanceRow}>\n            <View style={styles.performanceItem}>\n              <Icons.Star size={20} color={Colors.warning} />\n              <View style={styles.performanceContent}>\n                <Text style={styles.performanceValue}>{customerRating}</Text>\n                <Text style={styles.performanceLabel}>Customer Rating</Text>\n              </View>\n            </View>\n            <View style={styles.performanceItem}>\n              <Icons.MessageSquare size={20} color={Colors.primary} />\n              <View style={styles.performanceContent}>\n                <Text style={styles.performanceValue}>{totalReviews}</Text>\n                <Text style={styles.performanceLabel}>Total Reviews</Text>\n              </View>\n            </View>\n          </View>\n\n          <View style={styles.performanceRow}>\n            <View style={styles.performanceItem}>\n              <Icons.Clock size={20} color={Colors.success} />\n              <View style={styles.performanceContent}>\n                <Text style={styles.performanceValue}>{formatTime(totalWorkTime)}</Text>\n                <Text style={styles.performanceLabel}>Total Work Time</Text>\n              </View>\n            </View>\n            <View style={styles.performanceItem}>\n              <Icons.Target size={20} color={Colors.mechanic} />\n              <View style={styles.performanceContent}>\n                <Text style={styles.performanceValue}>95%</Text>\n                <Text style={styles.performanceLabel}>On-Time Rate</Text>\n              </View>\n            </View>\n          </View>\n        </View>\n      </View>\n\n      {/* Top Services */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Top Services</Text>\n        <View style={styles.servicesCard}>\n          {topServices.length > 0 ? (\n            topServices.map(([serviceType, count], index) => (\n              <View key={serviceType} style={styles.serviceRow}>\n                <View style={styles.serviceRank}>\n                  <Text style={styles.serviceRankText}>{index + 1}</Text>\n                </View>\n                <View style={styles.serviceContent}>\n                  <Text style={styles.serviceName}>\n                    {serviceType.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </Text>\n                  <Text style={styles.serviceCount}>{count} jobs</Text>\n                </View>\n                <View style={styles.serviceBar}>\n                  <View \n                    style={[\n                      styles.serviceBarFill,\n                      { width: `${(count / Math.max(...topServices.map(([,c]) => c))) * 100}%` }\n                    ]}\n                  />\n                </View>\n              </View>\n            ))\n          ) : (\n            <View style={styles.emptyState}>\n              <Icons.BarChart3 size={48} color={Colors.textMuted} />\n              <Text style={styles.emptyStateText}>No completed jobs in this period</Text>\n            </View>\n          )}\n        </View>\n      </View>\n\n      {/* Revenue Trend */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Revenue Breakdown</Text>\n        <View style={styles.revenueCard}>\n          <View style={styles.revenueRow}>\n            <View style={styles.revenueItem}>\n              <Text style={styles.revenueLabel}>Labor</Text>\n              <Text style={styles.revenueValue}>{formatCurrency(totalRevenue * 0.7)}</Text>\n            </View>\n            <View style={styles.revenueItem}>\n              <Text style={styles.revenueLabel}>Parts</Text>\n              <Text style={styles.revenueValue}>{formatCurrency(totalRevenue * 0.3)}</Text>\n            </View>\n          </View>\n          <View style={styles.revenueRow}>\n            <View style={styles.revenueItem}>\n              <Text style={styles.revenueLabel}>Travel Fees</Text>\n              <Text style={styles.revenueValue}>{formatCurrency(completedJobs.length * 25)}</Text>\n            </View>\n            <View style={styles.revenueItem}>\n              <Text style={styles.revenueLabel}>Emergency</Text>\n              <Text style={styles.revenueValue}>{formatCurrency(totalRevenue * 0.1)}</Text>\n            </View>\n          </View>\n        </View>\n      </View>\n\n      {/* Export Options */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Export Reports</Text>\n        <View style={styles.exportCard}>\n          <TouchableOpacity style={styles.exportButton}>\n            <Icons.FileText size={20} color={Colors.primary} />\n            <Text style={styles.exportButtonText}>Export PDF Report</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.exportButton}>\n            <Icons.Download size={20} color={Colors.primary} />\n            <Text style={styles.exportButtonText}>Download CSV Data</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n\n          <TouchableOpacity style={styles.exportButton}>\n            <Icons.Share size={20} color={Colors.primary} />\n            <Text style={styles.exportButtonText}>Share Summary</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  periodSelector: {\n    flexDirection: 'row',\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 4,\n    marginBottom: 24,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  periodButton: {\n    flex: 1,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  periodButtonActive: {\n    backgroundColor: Colors.primary,\n  },\n  periodButtonText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  periodButtonTextActive: {\n    color: Colors.white,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  metricCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  metricIcon: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.background,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 12,\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n  },\n  performanceCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  performanceRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  performanceItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    gap: 12,\n  },\n  performanceContent: {\n    flex: 1,\n  },\n  performanceValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  performanceLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  servicesCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  serviceRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 16,\n    gap: 12,\n  },\n  serviceRank: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: Colors.primary,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  serviceRankText: {\n    fontSize: 12,\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  serviceContent: {\n    flex: 1,\n  },\n  serviceName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  serviceCount: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  serviceBar: {\n    width: 60,\n    height: 4,\n    backgroundColor: Colors.border,\n    borderRadius: 2,\n    overflow: 'hidden',\n  },\n  serviceBarFill: {\n    height: '100%',\n    backgroundColor: Colors.primary,\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 32,\n  },\n  emptyStateText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginTop: 12,\n  },\n  revenueCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  revenueRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  revenueItem: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  revenueLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  revenueValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  exportCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  exportButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    gap: 12,\n  },\n  exportButtonText: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +226 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Image, Alert, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Icons from 'lucide-react-native';\nimport { Platform } from 'react-native';\n\ninterface PhotoUploadProps {\n  photos: string[];\n  onPhotosChange: (photos: string[]) => void;\n  maxPhotos?: number;\n}\n\nexport function PhotoUpload({ photos, onPhotosChange, maxPhotos = 5 }: PhotoUploadProps) {\n  const [isUploading, setIsUploading] = useState(false);\n\n  const requestPermissions = async () => {\n    if (Platform.OS === 'web') {\n      return true; // Web doesn't need permissions for file input\n    }\n\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      Alert.alert('Permission Required', 'Please grant camera roll permissions to upload photos.');\n      return false;\n    }\n    return true;\n  };\n\n  const pickImage = async () => {\n    if (photos.length >= maxPhotos) {\n      Alert.alert('Limit Reached', `You can only upload up to ${maxPhotos} photos.`);\n      return;\n    }\n\n    const hasPermission = await requestPermissions();\n    if (!hasPermission) return;\n\n    setIsUploading(true);\n\n    try {\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        const newPhoto = result.assets[0].uri;\n        onPhotosChange([...photos, newPhoto]);\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to pick image. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const takePhoto = async () => {\n    if (photos.length >= maxPhotos) {\n      Alert.alert('Limit Reached', `You can only upload up to ${maxPhotos} photos.`);\n      return;\n    }\n\n    if (Platform.OS === 'web') {\n      // Web fallback to image picker\n      pickImage();\n      return;\n    }\n\n    const { status } = await ImagePicker.requestCameraPermissionsAsync();\n    if (status !== 'granted') {\n      Alert.alert('Permission Required', 'Please grant camera permissions to take photos.');\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const result = await ImagePicker.launchCameraAsync({\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 0.8,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        const newPhoto = result.assets[0].uri;\n        onPhotosChange([...photos, newPhoto]);\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to take photo. Please try again.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const removePhoto = (index: number) => {\n    const newPhotos = photos.filter((_, i) => i !== index);\n    onPhotosChange(newPhotos);\n  };\n\n  const showPhotoOptions = () => {\n    if (Platform.OS === 'web') {\n      pickImage();\n      return;\n    }\n\n    Alert.alert(\n      'Add Photo',\n      'Choose how you would like to add a photo',\n      [\n        { text: 'Camera', onPress: takePhoto },\n        { text: 'Photo Library', onPress: pickImage },\n        { text: 'Cancel', style: 'cancel' },\n      ]\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Text style={styles.title}>Photos ({photos.length}/{maxPhotos})</Text>\n        <Text style={styles.subtitle}>\n          Add photos to help us understand the issue better\n        </Text>\n      </View>\n\n      {photos.length > 0 && (\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.photosContainer}>\n          {photos.map((photo, index) => (\n            <View key={index} style={styles.photoWrapper}>\n              <Image source={{ uri: photo }} style={styles.photo} />\n              <TouchableOpacity\n                style={styles.removeButton}\n                onPress={() => removePhoto(index)}\n              >\n                <Icons.X size={16} color={Colors.white} />\n              </TouchableOpacity>\n            </View>\n          ))}\n        </ScrollView>\n      )}\n\n      <TouchableOpacity\n        style={[styles.addButton, isUploading && styles.addButtonDisabled]}\n        onPress={showPhotoOptions}\n        disabled={isUploading || photos.length >= maxPhotos}\n      >\n        <Icons.Camera size={24} color={photos.length >= maxPhotos ? Colors.textMuted : Colors.primary} />\n        <Text style={[\n          styles.addButtonText,\n          photos.length >= maxPhotos && styles.addButtonTextDisabled\n        ]}>\n          {isUploading ? 'Uploading...' : photos.length >= maxPhotos ? 'Photo limit reached' : 'Add Photo'}\n        </Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 16,\n  },\n  header: {\n    marginBottom: 12,\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  photosContainer: {\n    marginBottom: 12,\n  },\n  photoWrapper: {\n    position: 'relative',\n    marginRight: 12,\n  },\n  photo: {\n    width: 80,\n    height: 80,\n    borderRadius: 8,\n    backgroundColor: Colors.card,\n  },\n  removeButton: {\n    position: 'absolute',\n    top: -6,\n    right: -6,\n    backgroundColor: Colors.error,\n    borderRadius: 12,\n    width: 24,\n    height: 24,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  addButton: {\n    backgroundColor: Colors.card,\n    borderWidth: 2,\n    borderColor: Colors.primary,\n    borderStyle: 'dashed',\n    borderRadius: 8,\n    padding: 16,\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    gap: 8,\n  },\n  addButtonDisabled: {\n    borderColor: Colors.textMuted,\n    backgroundColor: Colors.surface,\n  },\n  addButtonText: {\n    fontSize: 16,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  addButtonTextDisabled: {\n    color: Colors.textMuted,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +61 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\nimport { Platform } from 'react-native';\n\nexport function OfflineIndicator() {\n  const [isOnline, setIsOnline] = useState(true);\n\n  useEffect(() => {\n    if (Platform.OS === 'web') {\n      const handleOnline = () => setIsOnline(true);\n      const handleOffline = () => setIsOnline(false);\n\n      window.addEventListener('online', handleOnline);\n      window.addEventListener('offline', handleOffline);\n\n      // Check initial state\n      setIsOnline(navigator.onLine);\n\n      return () => {\n        window.removeEventListener('online', handleOnline);\n        window.removeEventListener('offline', handleOffline);\n      };\n    } else {\n      // For mobile, you would use NetInfo from @react-native-community/netinfo\n      // import NetInfo from '@react-native-community/netinfo';\n      // const unsubscribe = NetInfo.addEventListener(state => {\n      //   setIsOnline(state.isConnected);\n      // });\n      // return unsubscribe;\n    }\n  }, []);\n\n  if (isOnline) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Icons.WifiOff size={16} color={Colors.white} />\n      <Text style={styles.text}>You are offline</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.error,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    gap: 8,\n  },\n  text: {\n    color: Colors.white,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +221 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Switch, TouchableOpacity } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\n\ninterface NotificationSettingsProps {\n  onSettingsChange: (settings: NotificationSettings) => void;\n}\n\ninterface NotificationSettings {\n  pushNotifications: boolean;\n  emailNotifications: boolean;\n  smsNotifications: boolean;\n  jobUpdates: boolean;\n  maintenanceReminders: boolean;\n  promotionalOffers: boolean;\n  emergencyAlerts: boolean;\n}\n\nexport function NotificationSettings({ onSettingsChange }: NotificationSettingsProps) {\n  const [settings, setSettings] = useState<NotificationSettings>({\n    pushNotifications: true,\n    emailNotifications: true,\n    smsNotifications: false,\n    jobUpdates: true,\n    maintenanceReminders: true,\n    promotionalOffers: false,\n    emergencyAlerts: true,\n  });\n\n  const updateSetting = (key: keyof NotificationSettings, value: boolean) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const notificationTypes = [\n    {\n      key: 'pushNotifications' as keyof NotificationSettings,\n      title: 'Push Notifications',\n      description: 'Receive notifications on your device',\n      icon: 'Bell',\n    },\n    {\n      key: 'emailNotifications' as keyof NotificationSettings,\n      title: 'Email Notifications',\n      description: 'Receive updates via email',\n      icon: 'Mail',\n    },\n    {\n      key: 'smsNotifications' as keyof NotificationSettings,\n      title: 'SMS Notifications',\n      description: 'Receive text message updates',\n      icon: 'MessageSquare',\n    },\n  ];\n\n  const contentTypes = [\n    {\n      key: 'jobUpdates' as keyof NotificationSettings,\n      title: 'Job Updates',\n      description: 'Status changes, quotes, and completion notices',\n      icon: 'Briefcase',\n    },\n    {\n      key: 'maintenanceReminders' as keyof NotificationSettings,\n      title: 'Maintenance Reminders',\n      description: 'Scheduled service and maintenance alerts',\n      icon: 'Clock',\n    },\n    {\n      key: 'promotionalOffers' as keyof NotificationSettings,\n      title: 'Promotional Offers',\n      description: 'Special deals and discounts',\n      icon: 'Tag',\n    },\n    {\n      key: 'emergencyAlerts' as keyof NotificationSettings,\n      title: 'Emergency Alerts',\n      description: 'Urgent service notifications',\n      icon: 'AlertTriangle',\n    },\n  ];\n\n  return (\n    <View style={styles.container}>\n      {/* Notification Methods */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Notification Methods</Text>\n        {notificationTypes.map((type) => {\n          const IconComponent = Icons[type.icon as keyof typeof Icons] as any;\n          return (\n            <View key={type.key} style={styles.settingItem}>\n              <View style={styles.settingInfo}>\n                <View style={styles.settingIcon}>\n                  {IconComponent && <IconComponent size={20} color={Colors.primary} />}\n                </View>\n                <View style={styles.settingContent}>\n                  <Text style={styles.settingTitle}>{type.title}</Text>\n                  <Text style={styles.settingDescription}>{type.description}</Text>\n                </View>\n              </View>\n              <Switch\n                value={settings[type.key]}\n                onValueChange={(value) => updateSetting(type.key, value)}\n                trackColor={{ false: Colors.border, true: Colors.primary + '40' }}\n                thumbColor={settings[type.key] ? Colors.primary : Colors.textMuted}\n              />\n            </View>\n          );\n        })}\n      </View>\n\n      {/* Content Types */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>What to Notify About</Text>\n        {contentTypes.map((type) => {\n          const IconComponent = Icons[type.icon as keyof typeof Icons] as any;\n          return (\n            <View key={type.key} style={styles.settingItem}>\n              <View style={styles.settingInfo}>\n                <View style={styles.settingIcon}>\n                  {IconComponent && <IconComponent size={20} color={Colors.primary} />}\n                </View>\n                <View style={styles.settingContent}>\n                  <Text style={styles.settingTitle}>{type.title}</Text>\n                  <Text style={styles.settingDescription}>{type.description}</Text>\n                </View>\n              </View>\n              <Switch\n                value={settings[type.key]}\n                onValueChange={(value) => updateSetting(type.key, value)}\n                trackColor={{ false: Colors.border, true: Colors.primary + '40' }}\n                thumbColor={settings[type.key] ? Colors.primary : Colors.textMuted}\n              />\n            </View>\n          );\n        })}\n      </View>\n\n      {/* Quiet Hours */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Quiet Hours</Text>\n        <TouchableOpacity style={styles.quietHoursButton}>\n          <View style={styles.settingInfo}>\n            <View style={styles.settingIcon}>\n              <Icons.Moon size={20} color={Colors.primary} />\n            </View>\n            <View style={styles.settingContent}>\n              <Text style={styles.settingTitle}>Do Not Disturb</Text>\n              <Text style={styles.settingDescription}>10:00 PM - 8:00 AM</Text>\n            </View>\n          </View>\n          <Icons.ChevronRight size={20} color={Colors.textMuted} />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  settingInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  settingIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.primary + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  quietHoursButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +530 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { calculateMaintenanceDue, getMaintenanceIntervals } from '@/utils/quote-generator';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\nimport { router } from 'expo-router';\n\nexport function MaintenanceReminders() {\n  const { vehicles, addMaintenanceReminder, maintenanceReminders } = useAppStore();\n\n  const getMaintenanceReminders = () => {\n    const reminders: Array<{\n      vehicleId: string;\n      vehicleName: string;\n      serviceType: string;\n      serviceTypeId: string;\n      dueDate: Date;\n      isOverdue: boolean;\n      daysDue: number;\n      priority: 'low' | 'medium' | 'high';\n      dueMileage?: number;\n      reason: string;\n    }> = [];\n\n    vehicles.forEach(vehicle => {\n      const intervals = getMaintenanceIntervals();\n      const currentMileage = vehicle.mileage || 0;\n      const vehicleAge = new Date().getFullYear() - vehicle.year;\n      \n      intervals.forEach(interval => {\n        // Check if we have maintenance history for this service type\n        const lastService = vehicle.maintenanceHistory?.find(\n          record => record.serviceType === interval.serviceType\n        );\n\n        let dueDate: Date | null = null;\n        let reason = '';\n        let dueMileage: number | undefined;\n\n        if (lastService) {\n          // Calculate based on last service\n          dueDate = calculateMaintenanceDue(lastService.performedAt, interval.serviceType, currentMileage);\n          reason = `Last ${interval.description.toLowerCase()} was ${Math.floor((new Date().getTime() - lastService.performedAt.getTime()) / (1000 * 60 * 60 * 24))} days ago`;\n          \n          if (interval.intervalMiles && lastService.mileage) {\n            dueMileage = lastService.mileage + interval.intervalMiles;\n            if (currentMileage >= dueMileage) {\n              dueDate = new Date(); // Due now based on mileage\n              reason = `${currentMileage - dueMileage} miles overdue`;\n            }\n          }\n        } else if (vehicle.lastServiceDate) {\n          // Calculate based on general last service date\n          dueDate = calculateMaintenanceDue(vehicle.lastServiceDate, interval.serviceType, currentMileage);\n          reason = `No record of ${interval.description.toLowerCase()}`;\n          \n          if (interval.intervalMiles) {\n            dueMileage = currentMileage + interval.intervalMiles;\n          }\n        } else {\n          // For vehicles without service history, create reminders based on age/mileage\n          const shouldRemind = (\n            (vehicleAge >= 2 && interval.serviceType === 'oil_change') ||\n            (vehicleAge >= 3 && ['brake_service', 'tire_service'].includes(interval.serviceType)) ||\n            (currentMileage > 30000 && interval.serviceType === 'transmission') ||\n            (currentMileage > 50000 && ['engine_diagnostic', 'ac_service'].includes(interval.serviceType)) ||\n            (vehicleAge >= 5)\n          );\n\n          if (shouldRemind) {\n            dueDate = new Date();\n            dueDate.setDate(dueDate.getDate() + Math.floor(Math.random() * 30)); // Due within 30 days\n            reason = `Recommended for ${vehicle.year} vehicle with ${currentMileage.toLocaleString()} miles`;\n            \n            if (interval.intervalMiles) {\n              dueMileage = currentMileage + interval.intervalMiles;\n            }\n          }\n        }\n        \n        if (dueDate) {\n          const today = new Date();\n          const daysDiff = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n          \n          // Show reminders for items due within 45 days or overdue\n          if (daysDiff <= 45) {\n            const serviceCategory = SERVICE_CATEGORIES.find(s => s.id === interval.serviceType);\n            \n            // Determine priority based on service type and how overdue\n            let priority: 'low' | 'medium' | 'high' = 'low';\n            if (daysDiff < -14 || ['brake_service', 'engine_diagnostic'].includes(interval.serviceType)) {\n              priority = 'high';\n            } else if (daysDiff < 0 || ['oil_change', 'battery_service'].includes(interval.serviceType)) {\n              priority = 'medium';\n            }\n            \n            reminders.push({\n              vehicleId: vehicle.id,\n              vehicleName: `${vehicle.year} ${vehicle.make} ${vehicle.model}`,\n              serviceType: serviceCategory?.title || interval.description,\n              serviceTypeId: interval.serviceType,\n              dueDate,\n              isOverdue: daysDiff < 0,\n              daysDue: Math.abs(daysDiff),\n              priority,\n              dueMileage,\n              reason,\n            });\n          }\n        }\n      });\n    });\n\n    return reminders.sort((a, b) => {\n      // Sort by priority first, then by due date\n      const priorityOrder = { high: 3, medium: 2, low: 1 };\n      if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      }\n      return a.dueDate.getTime() - b.dueDate.getTime();\n    });\n  };\n\n  const handleScheduleService = (serviceTypeId: string, vehicleId: string) => {\n    router.push({\n      pathname: '/request',\n      params: { \n        serviceType: serviceTypeId,\n        vehicleId: vehicleId\n      }\n    });\n  };\n\n  const handleDismissReminder = (vehicleId: string, serviceType: string) => {\n    // Add to dismissed reminders or mark as acknowledged\n    const reminder = {\n      id: `${vehicleId}-${serviceType}-${Date.now()}`,\n      vehicleId,\n      serviceType: serviceType as any,\n      dueDate: new Date(),\n      dueMileage: undefined,\n      isOverdue: false,\n      reminderSent: true,\n      priority: 'low' as const,\n    };\n    \n    addMaintenanceReminder(reminder);\n  };\n\n  const handleViewAllMaintenance = () => {\n    router.push('/profile');\n  };\n\n  const reminders = getMaintenanceReminders();\n\n  if (reminders.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.CheckCircle size={24} color={Colors.success} />\n        <Text style={styles.emptyTitle}>All Caught Up!</Text>\n        <Text style={styles.emptyText}>\n          No maintenance reminders at this time. We will notify you when services are due.\n        </Text>\n        <TouchableOpacity style={styles.addVehicleButton} onPress={() => router.push('/profile')}>\n          <Icons.Plus size={16} color={Colors.primary} />\n          <Text style={styles.addVehicleText}>Add Vehicle</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Icons.Clock size={20} color={Colors.warning} />\n        <Text style={styles.title}>Maintenance Reminders</Text>\n        <View style={styles.headerActions}>\n          <View style={styles.badge}>\n            <Text style={styles.badgeText}>{reminders.length}</Text>\n          </View>\n          <TouchableOpacity onPress={handleViewAllMaintenance} style={styles.viewAllButton}>\n            <Text style={styles.viewAllText}>View All</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.remindersList}>\n        {reminders.slice(0, 5).map((reminder, index) => (\n          <View\n            key={`${reminder.vehicleId}-${reminder.serviceTypeId}-${index}`}\n            style={[\n              styles.reminderCard,\n              reminder.isOverdue && styles.overdueCard,\n              reminder.priority === 'high' && styles.highPriorityCard\n            ]}\n          >\n            <View style={styles.reminderHeader}>\n              <Text style={[\n                styles.reminderTitle,\n                reminder.isOverdue && styles.overdueText\n              ]}>\n                {reminder.serviceType}\n              </Text>\n              <TouchableOpacity\n                onPress={() => handleDismissReminder(reminder.vehicleId, reminder.serviceTypeId)}\n                style={styles.dismissButton}\n              >\n                <Icons.X size={16} color={Colors.textMuted} />\n              </TouchableOpacity>\n            </View>\n            \n            <Text style={styles.vehicleName}>{reminder.vehicleName}</Text>\n            \n            <View style={styles.dueDateRow}>\n              {reminder.isOverdue ? (\n                <Icons.AlertTriangle size={16} color={Colors.error} />\n              ) : (\n                <Icons.Clock size={16} color={Colors.warning} />\n              )}\n              <Text style={[\n                styles.dueText,\n                reminder.isOverdue && styles.overdueText\n              ]}>\n                {reminder.isOverdue \n                  ? `${reminder.daysDue} days overdue`\n                  : `Due in ${reminder.daysDue} days`\n                }\n              </Text>\n            </View>\n\n            {reminder.dueMileage && (\n              <Text style={styles.mileageText}>\n                Due at {reminder.dueMileage.toLocaleString()} miles\n              </Text>\n            )}\n\n            <Text style={styles.reasonText} numberOfLines={2}>\n              {reminder.reason}\n            </Text>\n\n            <TouchableOpacity\n              style={[\n                styles.scheduleButton,\n                reminder.isOverdue && styles.overdueScheduleButton\n              ]}\n              onPress={() => handleScheduleService(reminder.serviceTypeId, reminder.vehicleId)}\n            >\n              <Text style={[\n                styles.scheduleButtonText,\n                reminder.isOverdue && styles.overdueScheduleButtonText\n              ]}>\n                Schedule Service\n              </Text>\n              <Icons.ChevronRight size={14} color={\n                reminder.isOverdue ? Colors.error : Colors.primary\n              } />\n            </TouchableOpacity>\n\n            {/* Priority Indicator */}\n            <View style={[\n              styles.priorityIndicator,\n              { backgroundColor: getPriorityColor(reminder.priority) }\n            ]} />\n          </View>\n        ))}\n        \n        {reminders.length > 5 && (\n          <TouchableOpacity style={styles.viewMoreCard} onPress={handleViewAllMaintenance}>\n            <Icons.MoreHorizontal size={32} color={Colors.primary} />\n            <Text style={styles.viewMoreText}>View {reminders.length - 5} More</Text>\n          </TouchableOpacity>\n        )}\n      </ScrollView>\n\n      {/* Quick Actions */}\n      <View style={styles.quickActions}>\n        <TouchableOpacity\n          style={styles.quickActionButton}\n          onPress={() => router.push('/profile')}\n        >\n          <Icons.Plus size={16} color={Colors.primary} />\n          <Text style={styles.quickActionText}>Add Vehicle</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n          style={styles.quickActionButton}\n          onPress={() => router.push('/request')}\n        >\n          <Icons.Wrench size={16} color={Colors.primary} />\n          <Text style={styles.quickActionText}>Request Service</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction getPriorityColor(priority: 'low' | 'medium' | 'high'): string {\n  switch (priority) {\n    case 'high': return Colors.error;\n    case 'medium': return Colors.warning;\n    default: return Colors.success;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 24,\n  },\n  emptyContainer: {\n    backgroundColor: Colors.card,\n    padding: 24,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginHorizontal: 20,\n    marginBottom: 24,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 12,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 20,\n    marginBottom: 16,\n  },\n  addVehicleButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n  },\n  addVehicleText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    paddingHorizontal: 20,\n    marginBottom: 12,\n  },\n  title: {\n    flex: 1,\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  headerActions: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  badge: {\n    backgroundColor: Colors.warning,\n    borderRadius: 12,\n    paddingHorizontal: 8,\n    paddingVertical: 2,\n    minWidth: 24,\n    alignItems: 'center',\n  },\n  badgeText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  viewAllButton: {\n    paddingVertical: 4,\n    paddingHorizontal: 8,\n  },\n  viewAllText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  remindersList: {\n    paddingLeft: 20,\n    marginBottom: 16,\n  },\n  reminderCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.warning + '40',\n    borderRadius: 12,\n    padding: 16,\n    marginRight: 12,\n    width: 240,\n    position: 'relative',\n  },\n  overdueCard: {\n    borderColor: Colors.error + '40',\n    backgroundColor: Colors.error + '10',\n  },\n  highPriorityCard: {\n    borderWidth: 2,\n  },\n  reminderHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  reminderTitle: {\n    flex: 1,\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    lineHeight: 20,\n  },\n  overdueText: {\n    color: Colors.error,\n  },\n  dismissButton: {\n    padding: 4,\n    marginLeft: 8,\n  },\n  vehicleName: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  dueDateRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    marginBottom: 4,\n  },\n  dueText: {\n    fontSize: 12,\n    color: Colors.warning,\n    fontWeight: '500',\n  },\n  mileageText: {\n    fontSize: 11,\n    color: Colors.textMuted,\n    marginBottom: 8,\n  },\n  reasonText: {\n    fontSize: 11,\n    color: Colors.textMuted,\n    marginBottom: 12,\n    lineHeight: 14,\n  },\n  scheduleButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 8,\n    marginTop: 8,\n  },\n  overdueScheduleButton: {\n    backgroundColor: Colors.error + '20',\n    borderColor: Colors.error,\n  },\n  scheduleButtonText: {\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  overdueScheduleButtonText: {\n    color: Colors.error,\n  },\n  priorityIndicator: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    width: 4,\n    height: '100%',\n    borderTopRightRadius: 12,\n    borderBottomRightRadius: 12,\n  },\n  viewMoreCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 32,\n    marginRight: 12,\n    width: 160,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  viewMoreText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '600',\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  quickActions: {\n    flexDirection: 'row',\n    gap: 12,\n    paddingHorizontal: 20,\n  },\n  quickActionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.primary + '40',\n    paddingVertical: 12,\n    paddingHorizontal: 16,\n    borderRadius: 8,\n  },\n  quickActionText: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +51 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, StyleSheet, ActivityIndicator } from 'react-native';\nimport { Colors } from '@/constants/colors';\n\ninterface LoadingSpinnerProps {\n  size?: 'small' | 'large';\n  color?: string;\n  overlay?: boolean;\n}\n\nexport function LoadingSpinner({ size = 'large', color = Colors.primary, overlay = false }: LoadingSpinnerProps) {\n  if (overlay) {\n    return (\n      <View style={styles.overlay}>\n        <View style={styles.spinnerContainer}>\n          <ActivityIndicator size={size} color={color} />\n        </View>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size={size} color={color} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundColor: Colors.black + '50',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 1000,\n  },\n  spinnerContainer: {\n    backgroundColor: Colors.card,\n    padding: 20,\n    borderRadius: 12,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +272 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect, useRef } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TextInput, TouchableOpacity, KeyboardAvoidingView, Platform } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { ChatMessage } from '@/types/service';\nimport { useAppStore } from '@/stores/app-store';\nimport * as Icons from 'lucide-react-native';\n\ninterface ChatComponentProps {\n  serviceRequestId: string;\n  currentUserId: string;\n  currentUserName: string;\n  currentUserType: 'customer' | 'mechanic';\n}\n\nexport function ChatComponent({ serviceRequestId, currentUserId, currentUserName, currentUserType }: ChatComponentProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const scrollViewRef = useRef<ScrollView>(null);\n\n  // Mock messages for demo - in real app this would come from Firestore\n  useEffect(() => {\n    const mockMessages: ChatMessage[] = [\n      {\n        id: '1',\n        serviceRequestId,\n        senderId: 'mechanic-1',\n        senderName: 'Mike (Mechanic)',\n        senderType: 'mechanic',\n        message: 'Hi! I received your service request. I can be there within 2 hours. Does that work for you?',\n        timestamp: new Date(Date.now() - 3600000), // 1 hour ago\n        isRead: true,\n      },\n      {\n        id: '2',\n        serviceRequestId,\n        senderId: currentUserId,\n        senderName: currentUserName,\n        senderType: currentUserType,\n        message: 'Yes, that works perfectly! Thank you.',\n        timestamp: new Date(Date.now() - 3000000), // 50 minutes ago\n        isRead: true,\n      },\n      {\n        id: '3',\n        serviceRequestId,\n        senderId: 'mechanic-1',\n        senderName: 'Mike (Mechanic)',\n        senderType: 'mechanic',\n        message: 'Great! I am on my way. I will send you a message when I arrive.',\n        timestamp: new Date(Date.now() - 2400000), // 40 minutes ago\n        isRead: true,\n      },\n    ];\n    setMessages(mockMessages);\n  }, [serviceRequestId, currentUserId, currentUserName, currentUserType]);\n\n  const sendMessage = async () => {\n    if (!newMessage.trim() || isSending) return;\n\n    setIsSending(true);\n    \n    const message: ChatMessage = {\n      id: Date.now().toString(),\n      serviceRequestId,\n      senderId: currentUserId,\n      senderName: currentUserName,\n      senderType: currentUserType,\n      message: newMessage.trim(),\n      timestamp: new Date(),\n      isRead: false,\n    };\n\n    setMessages(prev => [...prev, message]);\n    setNewMessage('');\n    \n    // Scroll to bottom\n    setTimeout(() => {\n      scrollViewRef.current?.scrollToEnd({ animated: true });\n    }, 100);\n\n    setIsSending(false);\n  };\n\n  const formatTime = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    }).format(date);\n  };\n\n  const isMyMessage = (message: ChatMessage) => {\n    return message.senderId === currentUserId;\n  };\n\n  return (\n    <KeyboardAvoidingView \n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <View style={styles.header}>\n        <Icons.MessageCircle size={20} color={Colors.primary} />\n        <Text style={styles.headerTitle}>Chat with Mechanic</Text>\n      </View>\n\n      <ScrollView \n        ref={scrollViewRef}\n        style={styles.messagesContainer}\n        showsVerticalScrollIndicator={false}\n        onContentSizeChange={() => scrollViewRef.current?.scrollToEnd({ animated: true })}\n      >\n        {messages.map((message) => (\n          <View\n            key={message.id}\n            style={[\n              styles.messageWrapper,\n              isMyMessage(message) ? styles.myMessageWrapper : styles.otherMessageWrapper,\n            ]}\n          >\n            <View\n              style={[\n                styles.messageBubble,\n                isMyMessage(message) ? styles.myMessage : styles.otherMessage,\n              ]}\n            >\n              {!isMyMessage(message) && (\n                <Text style={styles.senderName}>{message.senderName}</Text>\n              )}\n              <Text style={[\n                styles.messageText,\n                isMyMessage(message) ? styles.myMessageText : styles.otherMessageText,\n              ]}>\n                {message.message}\n              </Text>\n              <Text style={[\n                styles.messageTime,\n                isMyMessage(message) ? styles.myMessageTime : styles.otherMessageTime,\n              ]}>\n                {formatTime(message.timestamp)}\n              </Text>\n            </View>\n          </View>\n        ))}\n      </ScrollView>\n\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.textInput}\n          value={newMessage}\n          onChangeText={setNewMessage}\n          placeholder=\"Type a message...\"\n          placeholderTextColor={Colors.textMuted}\n          multiline\n          maxLength={500}\n        />\n        <TouchableOpacity\n          style={[styles.sendButton, (!newMessage.trim() || isSending) && styles.sendButtonDisabled]}\n          onPress={sendMessage}\n          disabled={!newMessage.trim() || isSending}\n        >\n          <Icons.Send size={20} color={(!newMessage.trim() || isSending) ? Colors.textMuted : Colors.white} />\n        </TouchableOpacity>\n      </View>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    gap: 8,\n  },\n  headerTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  messagesContainer: {\n    flex: 1,\n    padding: 16,\n  },\n  messageWrapper: {\n    marginBottom: 12,\n  },\n  myMessageWrapper: {\n    alignItems: 'flex-end',\n  },\n  otherMessageWrapper: {\n    alignItems: 'flex-start',\n  },\n  messageBubble: {\n    maxWidth: '80%',\n    padding: 12,\n    borderRadius: 16,\n  },\n  myMessage: {\n    backgroundColor: Colors.primary,\n    borderBottomRightRadius: 4,\n  },\n  otherMessage: {\n    backgroundColor: Colors.card,\n    borderBottomLeftRadius: 4,\n  },\n  senderName: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  messageText: {\n    fontSize: 16,\n    lineHeight: 20,\n  },\n  myMessageText: {\n    color: Colors.black,\n  },\n  otherMessageText: {\n    color: Colors.text,\n  },\n  messageTime: {\n    fontSize: 11,\n    marginTop: 4,\n  },\n  myMessageTime: {\n    color: Colors.black,\n    opacity: 0.7,\n  },\n  otherMessageTime: {\n    color: Colors.textMuted,\n  },\n  inputContainer: {\n    flexDirection: 'row',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    alignItems: 'flex-end',\n    gap: 12,\n  },\n  textInput: {\n    flex: 1,\n    backgroundColor: Colors.surface,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n    color: Colors.text,\n    fontSize: 16,\n    maxHeight: 100,\n  },\n  sendButton: {\n    backgroundColor: Colors.primary,\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  sendButtonDisabled: {\n    backgroundColor: Colors.surface,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +104 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { TouchableOpacity, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';\nimport { Colors } from '@/constants/colors';\n\ninterface ButtonProps {\n  title: string;\n  onPress: () => void;\n  variant?: 'primary' | 'secondary' | 'outline';\n  size?: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\nexport function Button({ \n  title, \n  onPress, \n  variant = 'primary', \n  size = 'medium',\n  disabled = false,\n  style,\n  textStyle \n}: ButtonProps) {\n  return (\n    <TouchableOpacity\n      style={[\n        styles.base,\n        styles[variant],\n        styles[size],\n        disabled && styles.disabled,\n        style,\n      ]}\n      onPress={onPress}\n      disabled={disabled}\n    >\n      <Text style={[\n        styles.baseText,\n        styles[`${variant}Text`],\n        styles[`${size}Text`],\n        disabled && styles.disabledText,\n        textStyle,\n      ]}>\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  base: {\n    borderRadius: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  primary: {\n    backgroundColor: Colors.primary,\n  },\n  secondary: {\n    backgroundColor: Colors.card,\n  },\n  outline: {\n    backgroundColor: 'transparent',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  small: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n  },\n  medium: {\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  large: {\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n  },\n  disabled: {\n    backgroundColor: Colors.textMuted,\n  },\n  baseText: {\n    fontWeight: '600',\n  },\n  primaryText: {\n    color: Colors.black,\n  },\n  secondaryText: {\n    color: Colors.text,\n  },\n  outlineText: {\n    color: Colors.primary,\n  },\n  smallText: {\n    fontSize: 14,\n  },\n  mediumText: {\n    fontSize: 16,\n  },\n  largeText: {\n    fontSize: 18,\n  },\n  disabledText: {\n    color: Colors.textSecondary,\n  },\n});"
            }
          }
        },
        {
          "display": "keep it in holding while i paste in more code from the componets folder for the app",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +344 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, Switch, TouchableOpacity, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\n\ninterface AvailabilitySettingsProps {\n  onSettingsChange: (settings: AvailabilitySettings) => void;\n}\n\ninterface AvailabilitySettings {\n  isAvailable: boolean;\n  workingDays: {\n    monday: boolean;\n    tuesday: boolean;\n    wednesday: boolean;\n    thursday: boolean;\n    friday: boolean;\n    saturday: boolean;\n    sunday: boolean;\n  };\n  workingHours: {\n    start: string;\n    end: string;\n  };\n  emergencyAvailable: boolean;\n  maxJobsPerDay: number;\n  travelRadius: number; // in miles\n  autoAcceptJobs: boolean;\n}\n\nexport function AvailabilitySettings({ onSettingsChange }: AvailabilitySettingsProps) {\n  const [settings, setSettings] = useState<AvailabilitySettings>({\n    isAvailable: true,\n    workingDays: {\n      monday: true,\n      tuesday: true,\n      wednesday: true,\n      thursday: true,\n      friday: true,\n      saturday: true,\n      sunday: false,\n    },\n    workingHours: {\n      start: '08:00',\n      end: '18:00',\n    },\n    emergencyAvailable: true,\n    maxJobsPerDay: 8,\n    travelRadius: 25,\n    autoAcceptJobs: false,\n  });\n\n  const updateSetting = <K extends keyof AvailabilitySettings>(\n    key: K,\n    value: AvailabilitySettings[K]\n  ) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n    onSettingsChange(newSettings);\n  };\n\n  const updateWorkingDay = (day: keyof AvailabilitySettings['workingDays'], value: boolean) => {\n    const newWorkingDays = { ...settings.workingDays, [day]: value };\n    updateSetting('workingDays', newWorkingDays);\n  };\n\n  const daysOfWeek = [\n    { key: 'monday', label: 'Monday' },\n    { key: 'tuesday', label: 'Tuesday' },\n    { key: 'wednesday', label: 'Wednesday' },\n    { key: 'thursday', label: 'Thursday' },\n    { key: 'friday', label: 'Friday' },\n    { key: 'saturday', label: 'Saturday' },\n    { key: 'sunday', label: 'Sunday' },\n  ];\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* Overall Availability */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>General Availability</Text>\n        \n        <View style={styles.settingItem}>\n          <View style={styles.settingInfo}>\n            <View style={styles.settingIcon}>\n              <Icons.Power size={20} color={settings.isAvailable ? Colors.success : Colors.textMuted} />\n            </View>\n            <View style={styles.settingContent}>\n              <Text style={styles.settingTitle}>Available for Jobs</Text>\n              <Text style={styles.settingDescription}>\n                {settings.isAvailable ? 'Currently accepting new jobs' : 'Not accepting new jobs'}\n              </Text>\n            </View>\n          </View>\n          <Switch\n            value={settings.isAvailable}\n            onValueChange={(value) => updateSetting('isAvailable', value)}\n            trackColor={{ false: Colors.border, true: Colors.success + '40' }}\n            thumbColor={settings.isAvailable ? Colors.success : Colors.textMuted}\n          />\n        </View>\n\n        <View style={styles.settingItem}>\n          <View style={styles.settingInfo}>\n            <View style={styles.settingIcon}>\n              <Icons.AlertTriangle size={20} color={Colors.warning} />\n            </View>\n            <View style={styles.settingContent}>\n              <Text style={styles.settingTitle}>Emergency Services</Text>\n              <Text style={styles.settingDescription}>Available for emergency roadside assistance</Text>\n            </View>\n          </View>\n          <Switch\n            value={settings.emergencyAvailable}\n            onValueChange={(value) => updateSetting('emergencyAvailable', value)}\n            trackColor={{ false: Colors.border, true: Colors.warning + '40' }}\n            thumbColor={settings.emergencyAvailable ? Colors.warning : Colors.textMuted}\n          />\n        </View>\n      </View>\n\n      {/* Working Days */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Working Days</Text>\n        {daysOfWeek.map((day) => (\n          <View key={day.key} style={styles.dayItem}>\n            <Text style={styles.dayLabel}>{day.label}</Text>\n            <Switch\n              value={settings.workingDays[day.key as keyof typeof settings.workingDays]}\n              onValueChange={(value) => updateWorkingDay(day.key as keyof typeof settings.workingDays, value)}\n              trackColor={{ false: Colors.border, true: Colors.primary + '40' }}\n              thumbColor={settings.workingDays[day.key as keyof typeof settings.workingDays] ? Colors.primary : Colors.textMuted}\n            />\n          </View>\n        ))}\n      </View>\n\n      {/* Working Hours */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Working Hours</Text>\n        <View style={styles.hoursContainer}>\n          <TouchableOpacity style={styles.timeButton}>\n            <Icons.Clock size={20} color={Colors.primary} />\n            <View style={styles.timeContent}>\n              <Text style={styles.timeLabel}>Start Time</Text>\n              <Text style={styles.timeValue}>{settings.workingHours.start}</Text>\n            </View>\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.timeButton}>\n            <Icons.Clock size={20} color={Colors.primary} />\n            <View style={styles.timeContent}>\n              <Text style={styles.timeLabel}>End Time</Text>\n              <Text style={styles.timeValue}>{settings.workingHours.end}</Text>\n            </View>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Job Limits */}\n      <View style={styles.section}>\n        <Text style={styles.sectionTitle}>Job Management</Text>\n        \n        <TouchableOpacity style={styles.settingItem}>\n          <View style={styles.settingInfo}>\n            <View style={styles.settingIcon}>\n              <Icons.Calendar size={20} color={Colors.primary} />\n            </View>\n            <View style={styles.settingContent}>\n              <Text style={styles.settingTitle}>Max Jobs Per Day</Text>\n              <Text style={styles.settingDescription}>{settings.maxJobsPerDay} jobs maximum</Text>\n            </View>\n          </View>\n          <Icons.ChevronRight size={20} color={Colors.textMuted} />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.settingItem}>\n          <View style={styles.settingInfo}>\n            <View style={styles.settingIcon}>\n              <Icons.MapPin size={20} color={Colors.primary} />\n            </View>\n            <View style={styles.settingContent}>\n              <Text style={styles.settingTitle}>Travel Radius</Text>\n              <Text style={styles.settingDescription}>{settings.travelRadius} miles from base location</Text>\n            </View>\n          </View>\n          <Icons.ChevronRight size={20} color={Colors.textMuted} />\n        </TouchableOpacity>\n\n        <View style={styles.settingItem}>\n          <View style={styles.settingInfo}>\n            <View style={styles.settingIcon}>\n              <Icons.Zap size={20} color={Colors.primary} />\n            </View>\n            <View style={styles.settingContent}>\n              <Text style={styles.settingTitle}>Auto-Accept Jobs</Text>\n              <Text style={styles.settingDescription}>Automatically accept jobs within criteria</Text>\n            </View>\n          </View>\n          <Switch\n            value={settings.autoAcceptJobs}\n            onValueChange={(value) => updateSetting('autoAcceptJobs', value)}\n            trackColor={{ false: Colors.border, true: Colors.primary + '40' }}\n            thumbColor={settings.autoAcceptJobs ? Colors.primary : Colors.textMuted}\n          />\n        </View>\n      </View>\n\n      {/* Status Summary */}\n      <View style={styles.statusCard}>\n        <View style={styles.statusHeader}>\n          <Icons.Info size={20} color={Colors.primary} />\n          <Text style={styles.statusTitle}>Current Status</Text>\n        </View>\n        <Text style={styles.statusText}>\n          {settings.isAvailable \n            ? `Available for jobs • ${Object.values(settings.workingDays).filter(Boolean).length} days/week • ${settings.workingHours.start} - ${settings.workingHours.end}`\n            : 'Currently unavailable for new jobs'\n          }\n        </Text>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  settingInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  settingIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.primary + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  settingDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  dayItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  dayLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n  },\n  hoursContainer: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  timeButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 12,\n  },\n  timeContent: {\n    flex: 1,\n  },\n  timeLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 2,\n  },\n  timeValue: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statusCard: {\n    backgroundColor: Colors.primary + '10',\n    borderWidth: 1,\n    borderColor: Colors.primary + '30',\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 20,\n  },\n  statusHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n    gap: 8,\n  },\n  statusTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  statusText: {\n    fontSize: 14,\n    color: Colors.text,\n    lineHeight: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "we're going to continue coding the mobile mechanic app from me pasting in code",
          "pastedContents": {}
        },
        {
          "display": "push to github",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +247 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\n\ninterface AvailabilityCalendarProps {\n  onDateSelect: (date: Date, timeSlot: string) => void;\n  selectedDate?: Date;\n  selectedTime?: string;\n}\n\nexport function AvailabilityCalendar({ onDateSelect, selectedDate, selectedTime }: AvailabilityCalendarProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const timeSlots = [\n    '8:00 AM', '9:00 AM', '10:00 AM', '11:00 AM',\n    '12:00 PM', '1:00 PM', '2:00 PM', '3:00 PM',\n    '4:00 PM', '5:00 PM', '6:00 PM'\n  ];\n\n  const getDaysInMonth = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const daysInMonth = lastDay.getDate();\n    const startingDayOfWeek = firstDay.getDay();\n\n    const days = [];\n    \n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < startingDayOfWeek; i++) {\n      days.push(null);\n    }\n    \n    // Add all days of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      days.push(new Date(year, month, day));\n    }\n    \n    return days;\n  };\n\n  const isDateAvailable = (date: Date) => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return date >= today;\n  };\n\n  const isDateSelected = (date: Date) => {\n    if (!selectedDate) return false;\n    return date.toDateString() === selectedDate.toDateString();\n  };\n\n  const formatMonth = (date: Date) => {\n    return date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n  };\n\n  const navigateMonth = (direction: 'prev' | 'next') => {\n    const newMonth = new Date(currentMonth);\n    if (direction === 'prev') {\n      newMonth.setMonth(newMonth.getMonth() - 1);\n    } else {\n      newMonth.setMonth(newMonth.getMonth() + 1);\n    }\n    setCurrentMonth(newMonth);\n  };\n\n  const days = getDaysInMonth(currentMonth);\n  const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  return (\n    <View style={styles.container}>\n      {/* Calendar Header */}\n      <View style={styles.calendarHeader}>\n        <TouchableOpacity onPress={() => navigateMonth('prev')}>\n          <Icons.ChevronLeft size={24} color={Colors.text} />\n        </TouchableOpacity>\n        <Text style={styles.monthTitle}>{formatMonth(currentMonth)}</Text>\n        <TouchableOpacity onPress={() => navigateMonth('next')}>\n          <Icons.ChevronRight size={24} color={Colors.text} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Week Days */}\n      <View style={styles.weekDaysRow}>\n        {weekDays.map((day) => (\n          <Text key={day} style={styles.weekDayText}>{day}</Text>\n        ))}\n      </View>\n\n      {/* Calendar Grid */}\n      <View style={styles.calendarGrid}>\n        {days.map((date, index) => (\n          <TouchableOpacity\n            key={index}\n            style={[\n              styles.dayCell,\n              !date && styles.emptyCell,\n              date && !isDateAvailable(date) && styles.unavailableCell,\n              date && isDateSelected(date) && styles.selectedCell,\n            ]}\n            onPress={() => date && isDateAvailable(date) && onDateSelect(date, selectedTime || '')}\n            disabled={!date || !isDateAvailable(date)}\n          >\n            {date && (\n              <Text style={[\n                styles.dayText,\n                !isDateAvailable(date) && styles.unavailableText,\n                isDateSelected(date) && styles.selectedText,\n              ]}>\n                {date.getDate()}\n              </Text>\n            )}\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Time Slots */}\n      {selectedDate && (\n        <View style={styles.timeSlotsSection}>\n          <Text style={styles.timeSlotsTitle}>Available Times</Text>\n          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.timeSlotsList}>\n            {timeSlots.map((time) => (\n              <TouchableOpacity\n                key={time}\n                style={[\n                  styles.timeSlot,\n                  selectedTime === time && styles.selectedTimeSlot\n                ]}\n                onPress={() => onDateSelect(selectedDate, time)}\n              >\n                <Text style={[\n                  styles.timeSlotText,\n                  selectedTime === time && styles.selectedTimeSlotText\n                ]}>\n                  {time}\n                </Text>\n              </TouchableOpacity>\n            ))}\n          </ScrollView>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  calendarHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  monthTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  weekDaysRow: {\n    flexDirection: 'row',\n    marginBottom: 8,\n  },\n  weekDayText: {\n    flex: 1,\n    textAlign: 'center',\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontWeight: '500',\n  },\n  calendarGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginBottom: 16,\n  },\n  dayCell: {\n    width: '14.28%',\n    aspectRatio: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 8,\n    marginBottom: 4,\n  },\n  emptyCell: {\n    // Empty cells for padding\n  },\n  unavailableCell: {\n    backgroundColor: Colors.surface,\n  },\n  selectedCell: {\n    backgroundColor: Colors.primary,\n  },\n  dayText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  unavailableText: {\n    color: Colors.textMuted,\n  },\n  selectedText: {\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  timeSlotsSection: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 16,\n  },\n  timeSlotsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  timeSlotsList: {\n    flexDirection: 'row',\n  },\n  timeSlot: {\n    backgroundColor: Colors.surface,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 6,\n    marginRight: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  selectedTimeSlot: {\n    backgroundColor: Colors.primary,\n    borderColor: Colors.primary,\n  },\n  timeSlotText: {\n    fontSize: 12,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  selectedTimeSlotText: {\n    color: Colors.white,\n    fontWeight: '600',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +561 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, StyleSheet, TextInput, ScrollView, Alert, TouchableOpacity } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { trpc } from '@/lib/trpc';\nimport { Vehicle, DiagnosticResult, ServiceType } from '@/types/service';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\nimport { router } from 'expo-router';\n\ninterface AIAssistantProps {\n  vehicle?: Vehicle;\n  onDiagnosisComplete?: (diagnosis: DiagnosticResult) => void;\n  initialSymptoms?: string;\n}\n\nexport function AIAssistant({ vehicle, onDiagnosisComplete, initialSymptoms = '' }: AIAssistantProps) {\n  const [symptoms, setSymptoms] = useState(initialSymptoms);\n  const [additionalContext, setAdditionalContext] = useState('');\n  const [diagnosis, setDiagnosis] = useState<DiagnosticResult | null>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n\n  const diagnosisMutation = trpc.diagnosis.diagnose.useMutation({\n    onSuccess: (result: DiagnosticResult) => {\n      setDiagnosis(result);\n      onDiagnosisComplete?.(result);\n      setIsAnalyzing(false);\n    },\n    onError: (error: any) => {\n      Alert.alert(\n        'Analysis Failed', \n        error.message || 'Unable to analyze symptoms. Please try again or contact support.',\n        [{ text: 'OK' }]\n      );\n      setIsAnalyzing(false);\n    },\n  });\n\n  const handleAnalyze = async () => {\n    if (!vehicle) {\n      Alert.alert('Vehicle Required', 'Please select or add a vehicle first.');\n      return;\n    }\n\n    if (!symptoms.trim()) {\n      Alert.alert('Symptoms Required', 'Please describe the issue you are experiencing.');\n      return;\n    }\n\n    setIsAnalyzing(true);\n    setDiagnosis(null);\n\n    diagnosisMutation.mutate({\n      vehicleInfo: {\n        make: vehicle.make,\n        model: vehicle.model,\n        year: vehicle.year,\n        mileage: vehicle.mileage,\n        engine: vehicle.engine,\n        vin: vehicle.vin,\n      },\n      symptoms: symptoms.trim(),\n      additionalContext: additionalContext.trim() || undefined,\n    });\n  };\n\n  const handleRequestService = (serviceType: string) => {\n    if (!vehicle) return;\n    \n    router.push({\n      pathname: '/request',\n      params: {\n        serviceType,\n        vehicleId: vehicle.id,\n        symptoms: symptoms.trim(),\n        aiDiagnosis: JSON.stringify(diagnosis),\n        urgent: diagnosis?.urgencyLevel === 'emergency' ? 'true' : 'false',\n      }\n    });\n  };\n\n  const handleCreateQuote = () => {\n    if (!diagnosis || !vehicle) return;\n    \n    // Navigate to request with pre-filled AI diagnosis data\n    router.push({\n      pathname: '/request',\n      params: {\n        serviceType: diagnosis.recommendedServiceTypes?.[0] || 'general_repair',\n        vehicleId: vehicle.id,\n        symptoms: symptoms.trim(),\n        aiDiagnosis: JSON.stringify(diagnosis),\n        urgent: diagnosis.urgencyLevel === 'emergency' ? 'true' : 'false',\n        autoQuote: 'true', // Flag to auto-generate quote\n      }\n    });\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency': return Colors.error;\n      case 'high': return Colors.warning;\n      case 'medium': return Colors.primary;\n      default: return Colors.success;\n    }\n  };\n\n  const getConfidenceIcon = (confidence: string) => {\n    switch (confidence) {\n      case 'high': return <Icons.CheckCircle size={16} color={Colors.success} />;\n      case 'medium': return <Icons.AlertCircle size={16} color={Colors.warning} />;\n      default: return <Icons.HelpCircle size={16} color={Colors.textMuted} />;\n    }\n  };\n\n  const getServiceTitle = (serviceType: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === serviceType)?.title || serviceType;\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Icons.Brain size={24} color={Colors.primary} />\n        <Text style={styles.title}>AI Diagnostic Assistant</Text>\n      </View>\n\n      <Text style={styles.subtitle}>\n        Describe your vehicle's symptoms and get AI-powered diagnostic suggestions\n      </Text>\n\n      {/* Vehicle Info Display */}\n      {vehicle && (\n        <View style={styles.vehicleInfo}>\n          <Text style={styles.vehicleText}>\n            {vehicle.year} {vehicle.make} {vehicle.model}\n            {vehicle.mileage && ` • ${vehicle.mileage.toLocaleString()} miles`}\n          </Text>\n        </View>\n      )}\n\n      {/* Symptoms Input */}\n      <View style={styles.inputSection}>\n        <Text style={styles.inputLabel}>Describe the Problem *</Text>\n        <TextInput\n          style={styles.textArea}\n          value={symptoms}\n          onChangeText={setSymptoms}\n          placeholder=\"Example: Engine makes a grinding noise when starting, especially in cold weather. The noise lasts about 5 seconds then stops...\"\n          placeholderTextColor={Colors.textMuted}\n          multiline\n          numberOfLines={4}\n          textAlignVertical=\"top\"\n        />\n      </View>\n\n      {/* Additional Context */}\n      <View style={styles.inputSection}>\n        <Text style={styles.inputLabel}>Additional Context (Optional)</Text>\n        <TextInput\n          style={styles.textInput}\n          value={additionalContext}\n          onChangeText={setAdditionalContext}\n          placeholder=\"When did it start? Any recent repairs? Driving conditions?\"\n          placeholderTextColor={Colors.textMuted}\n          multiline\n        />\n      </View>\n\n      {/* Analyze Button */}\n      <Button\n        title={isAnalyzing ? 'Analyzing...' : 'Analyze Issue'}\n        onPress={handleAnalyze}\n        disabled={isAnalyzing || !symptoms.trim() || !vehicle}\n        style={styles.analyzeButton}\n      />\n\n      {/* Loading State */}\n      {isAnalyzing && (\n        <View style={styles.loadingContainer}>\n          <LoadingSpinner />\n          <Text style={styles.loadingText}>AI is analyzing your vehicle's symptoms...</Text>\n          <Text style={styles.loadingSubtext}>This may take a few moments</Text>\n        </View>\n      )}\n\n      {/* Diagnosis Results */}\n      {diagnosis && (\n        <ScrollView style={styles.resultsContainer} showsVerticalScrollIndicator={false}>\n          <View style={styles.resultsHeader}>\n            <Text style={styles.resultsTitle}>Diagnostic Analysis Complete</Text>\n            <View style={styles.confidenceRow}>\n              {getConfidenceIcon(diagnosis.confidence)}\n              <Text style={styles.confidenceText}>\n                {diagnosis.confidence.charAt(0).toUpperCase() + diagnosis.confidence.slice(1)} Confidence\n              </Text>\n            </View>\n          </View>\n\n          {/* Urgency Level */}\n          <View style={[styles.urgencyBadge, { borderColor: getUrgencyColor(diagnosis.urgencyLevel) }]}>\n            <Icons.AlertTriangle size={16} color={getUrgencyColor(diagnosis.urgencyLevel)} />\n            <Text style={[styles.urgencyText, { color: getUrgencyColor(diagnosis.urgencyLevel) }]}>\n              {diagnosis.urgencyLevel.toUpperCase()} PRIORITY\n            </Text>\n          </View>\n\n          {/* Quick Actions */}\n          <View style={styles.quickActionsHeader}>\n            <Text style={styles.sectionTitle}>Quick Actions</Text>\n          </View>\n          <View style={styles.quickActions}>\n            <Button\n              title=\"Get Quote Now\"\n              onPress={handleCreateQuote}\n              style={styles.primaryAction}\n            />\n            <Button\n              title=\"Request Service\"\n              variant=\"outline\"\n              onPress={() => handleRequestService(diagnosis.recommendedServiceTypes?.[0] || 'general_repair')}\n              style={styles.secondaryAction}\n            />\n          </View>\n\n          {/* Likely Causes */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Most Likely Causes</Text>\n            {diagnosis.likelyCauses.map((cause, index) => (\n              <View key={index} style={styles.listItem}>\n                <View style={styles.causeNumber}>\n                  <Text style={styles.causeNumberText}>{index + 1}</Text>\n                </View>\n                <Text style={styles.listText}>{cause}</Text>\n              </View>\n            ))}\n          </View>\n\n          {/* Diagnostic Steps */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Recommended Diagnostic Steps</Text>\n            {diagnosis.diagnosticSteps.map((step, index) => (\n              <View key={index} style={styles.listItem}>\n                <Icons.CheckSquare size={16} color={Colors.primary} />\n                <Text style={styles.listText}>{step}</Text>\n              </View>\n            ))}\n          </View>\n\n          {/* Recommended Services */}\n          {diagnosis.recommendedServiceTypes && diagnosis.recommendedServiceTypes.length > 0 && (\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Recommended Services</Text>\n              {diagnosis.recommendedServiceTypes.map((serviceType, index) => (\n                <TouchableOpacity\n                  key={index}\n                  style={styles.serviceRecommendation}\n                  onPress={() => handleRequestService(serviceType)}\n                >\n                  <View style={styles.serviceInfo}>\n                    <Icons.Wrench size={16} color={Colors.primary} />\n                    <Text style={styles.serviceTitle}>{getServiceTitle(serviceType)}</Text>\n                  </View>\n                  <View style={styles.serviceAction}>\n                    <Text style={styles.serviceActionText}>Request</Text>\n                    <Icons.ChevronRight size={16} color={Colors.primary} />\n                  </View>\n                </TouchableOpacity>\n              ))}\n            </View>\n          )}\n\n          {/* Matched Services */}\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Related Services</Text>\n            {diagnosis.matchedServices.map((service, index) => (\n              <View key={index} style={styles.serviceItem}>\n                <Icons.Settings size={16} color={Colors.secondary} />\n                <Text style={styles.serviceText}>{service}</Text>\n              </View>\n            ))}\n          </View>\n\n          {/* Estimated Cost */}\n          {diagnosis.estimatedCost && (\n            <View style={styles.costSection}>\n              <Text style={styles.sectionTitle}>Estimated Cost Range</Text>\n              <View style={styles.costDisplay}>\n                <Text style={styles.costText}>\n                  ${diagnosis.estimatedCost.min} - ${diagnosis.estimatedCost.max}\n                </Text>\n                <Text style={styles.costNote}>\n                  *Actual costs may vary based on parts availability and labor requirements\n                </Text>\n              </View>\n            </View>\n          )}\n\n          <View style={styles.disclaimer}>\n            <Icons.Info size={16} color={Colors.textMuted} />\n            <Text style={styles.disclaimerText}>\n              This AI analysis is for informational purposes only. Professional diagnosis is recommended for accurate assessment and safety.\n            </Text>\n          </View>\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    lineHeight: 20,\n  },\n  vehicleInfo: {\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  vehicleText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  inputSection: {\n    marginBottom: 16,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  textArea: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 14,\n    minHeight: 80,\n  },\n  textInput: {\n    backgroundColor: Colors.background,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 14,\n    minHeight: 40,\n  },\n  analyzeButton: {\n    marginBottom: 16,\n  },\n  loadingContainer: {\n    alignItems: 'center',\n    padding: 20,\n  },\n  loadingText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginTop: 12,\n    textAlign: 'center',\n  },\n  loadingSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  resultsContainer: {\n    maxHeight: 600,\n  },\n  resultsHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  resultsTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  confidenceRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  confidenceText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  urgencyBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    borderWidth: 1,\n    borderRadius: 6,\n    paddingVertical: 6,\n    paddingHorizontal: 10,\n    alignSelf: 'flex-start',\n    marginBottom: 16,\n  },\n  urgencyText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  quickActionsHeader: {\n    marginBottom: 8,\n  },\n  quickActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 20,\n  },\n  primaryAction: {\n    flex: 1,\n  },\n  secondaryAction: {\n    flex: 1,\n  },\n  section: {\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  listItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    marginBottom: 6,\n  },\n  causeNumber: {\n    backgroundColor: Colors.primary,\n    borderRadius: 10,\n    width: 20,\n    height: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 1,\n  },\n  causeNumberText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  listText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n    lineHeight: 20,\n  },\n  serviceRecommendation: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.primary + '10',\n    borderWidth: 1,\n    borderColor: Colors.primary + '30',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  serviceInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    flex: 1,\n  },\n  serviceTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  serviceAction: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  serviceActionText: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.primary,\n  },\n  serviceItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.background,\n    padding: 8,\n    borderRadius: 6,\n    marginBottom: 4,\n  },\n  serviceText: {\n    fontSize: 14,\n    color: Colors.text,\n  },\n  costSection: {\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  costDisplay: {\n    alignItems: 'center',\n  },\n  costText: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.primary,\n    marginBottom: 4,\n  },\n  costNote: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontStyle: 'italic',\n    textAlign: 'center',\n  },\n  disclaimer: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    backgroundColor: Colors.background,\n    padding: 12,\n    borderRadius: 8,\n    marginTop: 8,\n  },\n  disclaimerText: {\n    flex: 1,\n    fontSize: 12,\n    color: Colors.textMuted,\n    lineHeight: 16,\n  },\n});"
            }
          }
        },
        {
          "display": "now do the push to github",
          "pastedContents": {}
        },
        {
          "display": "import { Hono } from \"hono\";\nimport { trpcServer } from \"@hono/trpc-server\";\nimport { cors } from \"hono/cors\";\nimport { appRouter } from \"./trpc/app-router\";\nimport { createContext } from \"./trpc/create-context\";\n\n// app will be mounted at /api\nconst app = new Hono();\n\n// Enable CORS for all routes\napp.use(\"*\", cors());\n\n// Mount tRPC router at /trpc\napp.use(\n  \"/trpc/*\",\n  trpcServer({\n    endpoint: \"/api/trpc\",\n    router: appRouter,\n    createContext,\n  })\n);\n\n// Simple health check endpoint\napp.get(\"/\", (c) => {\n  return c.json({ status: \"ok\", message: \"API is running\" });\n});\n\nexport default app;",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +67 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { initTRPC } from '@trpc/server';\nimport superjson from 'superjson';\n\n// Create context for tRPC\nexport const createTRPCContext = async (opts: { req?: any; res?: any }) => {\n  // Log request for monitoring in production\n  if (opts.req && !process.env.NODE_ENV?.includes('development')) {\n    console.log('tRPC request:', {\n      method: opts.req.method,\n      url: opts.req.url,\n      userAgent: opts.req.headers?.['user-agent'],\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  return {\n    req: opts.req,\n    res: opts.res,\n    // Add any other context data here\n    environment: process.env.NODE_ENV || 'development',\n    isProduction: !process.env.NODE_ENV?.includes('development'),\n  };\n};\n\nexport type Context = Awaited<ReturnType<typeof createTRPCContext>>;\n\n// Initialize tRPC\nconst t = initTRPC.context<Context>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    // Enhanced error logging for production\n    if (!process.env.NODE_ENV?.includes('development')) {\n      console.error('tRPC error:', {\n        code: error.code,\n        message: error.message,\n        cause: error.cause,\n        timestamp: new Date().toISOString(),\n      });\n    }\n\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        // Don't expose internal errors in production\n        ...(process.env.NODE_ENV?.includes('development') && {\n          stack: error.stack,\n        }),\n      },\n    };\n  },\n});\n\n// Export reusable router and procedure helpers\nexport const createTRPCRouter = t.router;\nexport const publicProcedure = t.procedure;\n\n// Middleware for authentication (if needed)\nexport const protectedProcedure = t.procedure.use(async ({ ctx, next }) => {\n  // Add authentication logic here if needed\n  // For now, just pass through\n  return next({\n    ctx: {\n      ...ctx,\n      // Add user context if authenticated\n    },\n  });\n});"
            }
          }
        },
        {
          "display": "import { createTRPCRouter } from \"./create-context\";\nimport hiProcedure from \"./routes/example/hi/route\";\nimport { diagnosisProcedure } from \"./routes/diagnosis/route\";\n\nexport const appRouter = createTRPCRouter({\n  example: createTRPCRouter({\n    hi: hiProcedure\n  }),\n  diagnosis: createTRPCRouter({\n    diagnose: diagnosisProcedure\n  })\n});\n\nexport type AppRouter = typeof appRouter;",
          "pastedContents": {}
        },
        {
          "display": "import { publicProcedure } from \"../../../create-context\";\n\nconst hiProcedure = publicProcedure.query(() => {\n  return \"Hello from tRPC!\";\n});\n\nexport default hiProcedure;",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +280 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { z } from \"zod\";\nimport { publicProcedure } from \"../../create-context\";\nimport { DiagnosticResult, ServiceType } from \"@/types/service\";\n\nconst diagnosisInputSchema = z.object({\n  vehicleInfo: z.object({\n    make: z.string(),\n    model: z.string(),\n    year: z.number(),\n    mileage: z.number().optional(),\n    engine: z.string().optional(),\n    vin: z.string().optional(),\n  }),\n  symptoms: z.string(),\n  additionalContext: z.string().optional(),\n});\n\nexport const diagnosisProcedure = publicProcedure\n  .input(diagnosisInputSchema)\n  .mutation(async ({ input }): Promise<DiagnosticResult> => {\n    try {\n      // Production logging\n      console.log('AI diagnosis requested:', {\n        vehicleMake: input.vehicleInfo.make,\n        vehicleModel: input.vehicleInfo.model,\n        vehicleYear: input.vehicleInfo.year,\n        symptomsLength: input.symptoms.length,\n        timestamp: new Date().toISOString(),\n        environment: 'production'\n      });\n\n      // Prepare the AI prompt\n      const prompt = `You are an expert automotive diagnostic assistant. Analyze the following vehicle issue and provide a structured diagnosis.\n\nVehicle Information:\n- Make: ${input.vehicleInfo.make}\n- Model: ${input.vehicleInfo.model}\n- Year: ${input.vehicleInfo.year}\n- Mileage: ${input.vehicleInfo.mileage || 'Unknown'}\n- Engine: ${input.vehicleInfo.engine || 'Unknown'}\n- VIN: ${input.vehicleInfo.vin || 'Not provided'}\n\nSymptoms: ${input.symptoms}\n\n${input.additionalContext ? `Additional Context: ${input.additionalContext}` : ''}\n\nPlease provide a JSON response with the following structure:\n{\n  \"likelyCauses\": [\"cause1\", \"cause2\", \"cause3\"],\n  \"diagnosticSteps\": [\"step1\", \"step2\", \"step3\"],\n  \"matchedServices\": [\"service1\", \"service2\"],\n  \"confidence\": \"high|medium|low\",\n  \"estimatedCost\": {\"min\": 100, \"max\": 500},\n  \"urgencyLevel\": \"low|medium|high|emergency\",\n  \"recommendedServiceTypes\": [\"oil_change\", \"brake_service\", etc.]\n}\n\nFocus on practical, actionable advice. Be specific about likely causes and diagnostic steps.`;\n\n      // Production: Use OpenAI API directly if available, otherwise fallback to proxy\n      const useOpenAI = process.env.OPENAI_API_KEY;\n      const endpoint = useOpenAI \n        ? 'https://api.openai.com/v1/chat/completions'\n        : (process.env.EXPO_PUBLIC_OPENAI_ENDPOINT || 'https://toolkit.rork.com/text/llm/');\n      \n      console.log('Using AI endpoint:', { \n        endpoint: useOpenAI ? 'OpenAI Direct' : 'Toolkit Proxy',\n        hasApiKey: !!process.env.OPENAI_API_KEY,\n        environment: 'production'\n      });\n\n      // Call the AI API\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(useOpenAI && { 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` }),\n        },\n        body: JSON.stringify(\n          useOpenAI \n            ? {\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                  {\n                    role: 'system',\n                    content: 'You are an expert automotive diagnostic assistant. Always respond with valid JSON in the exact format requested. Focus on the top 3 most likely causes and provide practical diagnostic steps.'\n                  },\n                  {\n                    role: 'user',\n                    content: prompt\n                  }\n                ],\n                temperature: 0.7,\n                max_tokens: 1000,\n              }\n            : {\n                messages: [\n                  {\n                    role: 'system',\n                    content: 'You are an expert automotive diagnostic assistant. Always respond with valid JSON in the exact format requested. Focus on the top 3 most likely causes and provide practical diagnostic steps.'\n                  },\n                  {\n                    role: 'user',\n                    content: prompt\n                  }\n                ]\n              }\n        ),\n      });\n\n      if (!response.ok) {\n        console.error(`AI API request failed: ${response.status} ${response.statusText}`);\n        throw new Error(`AI service unavailable (${response.status})`);\n      }\n\n      const aiResponse = await response.json();\n      \n      // Handle different response formats based on the API used\n      let aiContent = '';\n      if (useOpenAI) {\n        // OpenAI API response format\n        aiContent = aiResponse.choices?.[0]?.message?.content || '';\n      } else {\n        // Toolkit response format\n        aiContent = aiResponse.completion || '';\n      }\n\n      if (!aiContent) {\n        console.error('Invalid AI response format:', aiResponse);\n        throw new Error('Invalid AI response format');\n      }\n\n      // Parse the AI response\n      let parsedResponse;\n      try {\n        // Try to extract JSON from the response\n        const jsonMatch = aiContent.match(/\\{[\\s\\S]*\\}/);\n        if (jsonMatch) {\n          parsedResponse = JSON.parse(jsonMatch[0]);\n        } else {\n          throw new Error('No JSON found in AI response');\n        }\n      } catch (parseError) {\n        console.error('Failed to parse AI response:', parseError);\n        // Fallback to a structured response based on symptoms\n        parsedResponse = generateFallbackDiagnosis(input);\n      }\n\n      // Validate and structure the response\n      const diagnosis: DiagnosticResult = {\n        id: Date.now().toString(),\n        likelyCauses: Array.isArray(parsedResponse.likelyCauses) \n          ? parsedResponse.likelyCauses.slice(0, 3) \n          : ['General automotive issue requiring professional diagnosis'],\n        diagnosticSteps: Array.isArray(parsedResponse.diagnosticSteps) \n          ? parsedResponse.diagnosticSteps.slice(0, 5) \n          : ['Visual inspection', 'Diagnostic scan', 'Component testing'],\n        matchedServices: Array.isArray(parsedResponse.matchedServices) \n          ? parsedResponse.matchedServices.slice(0, 3) \n          : ['General repair'],\n        confidence: ['high', 'medium', 'low'].includes(parsedResponse.confidence) \n          ? parsedResponse.confidence \n          : 'medium',\n        estimatedCost: parsedResponse.estimatedCost && \n          typeof parsedResponse.estimatedCost.min === 'number' && \n          typeof parsedResponse.estimatedCost.max === 'number'\n          ? parsedResponse.estimatedCost\n          : { min: 100, max: 500 },\n        urgencyLevel: ['emergency', 'high', 'medium', 'low'].includes(parsedResponse.urgencyLevel) \n          ? parsedResponse.urgencyLevel \n          : 'medium',\n        recommendedServiceTypes: Array.isArray(parsedResponse.recommendedServiceTypes) \n          ? parsedResponse.recommendedServiceTypes\n              .filter((type: string) => \n                ['oil_change', 'brake_service', 'tire_service', 'battery_service', \n                 'engine_diagnostic', 'transmission', 'ac_service', 'general_repair', \n                 'emergency_roadside'].includes(type)\n              )\n              .slice(0, 3) as ServiceType[]\n          : ['general_repair'] as ServiceType[],\n        createdAt: new Date(),\n      };\n\n      // Production logging\n      console.log('AI diagnosis completed:', {\n        diagnosisId: diagnosis.id,\n        confidence: diagnosis.confidence,\n        urgencyLevel: diagnosis.urgencyLevel,\n        causesCount: diagnosis.likelyCauses.length,\n        servicesCount: diagnosis.recommendedServiceTypes?.length || 0,\n        timestamp: new Date().toISOString()\n      });\n\n      return diagnosis;\n\n    } catch (error) {\n      console.error('Diagnosis error:', error);\n      \n      // Production error logging\n      console.error('AI diagnosis failed:', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        vehicleMake: input.vehicleInfo.make,\n        vehicleModel: input.vehicleInfo.model,\n        timestamp: new Date().toISOString(),\n        environment: 'production'\n      });\n      \n      // Return a fallback diagnosis with user-friendly error message\n      const fallback = generateFallbackDiagnosis(input);\n      fallback.likelyCauses = [\n        'AI diagnostic service temporarily unavailable',\n        'Manual inspection recommended',\n        'Contact professional mechanic for assessment'\n      ];\n      fallback.confidence = 'low';\n      \n      return fallback;\n    }\n  });\n\nfunction generateFallbackDiagnosis(input: any): DiagnosticResult {\n  // Generate a basic diagnosis based on common symptoms\n  const symptoms = input.symptoms.toLowerCase();\n  \n  let likelyCauses = ['General automotive issue requiring professional diagnosis'];\n  let urgencyLevel: 'low' | 'medium' | 'high' | 'emergency' = 'medium';\n  let recommendedServiceTypes: ServiceType[] = ['general_repair'];\n  let estimatedCost = { min: 100, max: 500 };\n\n  // Basic symptom matching\n  if (symptoms.includes('noise') || symptoms.includes('grinding') || symptoms.includes('squealing')) {\n    likelyCauses = ['Worn brake pads', 'Belt issues', 'Bearing problems'];\n    recommendedServiceTypes = ['brake_service', 'general_repair'];\n    urgencyLevel = 'high';\n    estimatedCost = { min: 150, max: 800 };\n  } else if (symptoms.includes('oil') || symptoms.includes('leak')) {\n    likelyCauses = ['Oil leak', 'Worn seals', 'Drain plug issues'];\n    recommendedServiceTypes = ['oil_change', 'general_repair'];\n    urgencyLevel = 'medium';\n    estimatedCost = { min: 50, max: 300 };\n  } else if (symptoms.includes('battery') || symptoms.includes('start') || symptoms.includes('electrical')) {\n    likelyCauses = ['Weak battery', 'Alternator issues', 'Starter problems'];\n    recommendedServiceTypes = ['battery_service', 'engine_diagnostic'];\n    urgencyLevel = 'high';\n    estimatedCost = { min: 100, max: 600 };\n  } else if (symptoms.includes('tire') || symptoms.includes('vibration')) {\n    likelyCauses = ['Tire wear', 'Wheel alignment', 'Suspension issues'];\n    recommendedServiceTypes = ['tire_service', 'general_repair'];\n    urgencyLevel = 'medium';\n    estimatedCost = { min: 80, max: 400 };\n  } else if (symptoms.includes('engine') || symptoms.includes('performance')) {\n    likelyCauses = ['Engine performance issue', 'Fuel system problem', 'Ignition system fault'];\n    recommendedServiceTypes = ['engine_diagnostic', 'general_repair'];\n    urgencyLevel = 'high';\n    estimatedCost = { min: 200, max: 1000 };\n  }\n\n  console.log('Generated fallback diagnosis:', {\n    symptoms: symptoms.substring(0, 50),\n    urgencyLevel,\n    serviceTypes: recommendedServiceTypes,\n    timestamp: new Date().toISOString()\n  });\n\n  return {\n    id: Date.now().toString(),\n    likelyCauses,\n    diagnosticSteps: [\n      'Visual inspection of the affected area',\n      'Diagnostic scan for error codes',\n      'Component testing and measurement',\n      'Road test if safe to do so'\n    ],\n    matchedServices: ['Professional diagnostic', 'Repair service'],\n    confidence: 'low',\n    estimatedCost,\n    urgencyLevel,\n    recommendedServiceTypes: recommendedServiceTypes || ['general_repair'],\n    createdAt: new Date(),\n  };\n}"
            }
          }
        },
        {
          "display": "hold off on the github push, we'll go a bit more before the next push",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +93 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport * as Icons from 'lucide-react-native';\n\nexport default function DevSwitcherScreen() {\n  // Always redirect to auth in production\n  React.useEffect(() => {\n    router.replace('/auth');\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.productionBanner}>\n        <Icons.Shield size={24} color={Colors.success} />\n        <Text style={styles.productionText}>PRODUCTION MODE</Text>\n      </View>\n      \n      <View style={styles.content}>\n        <Text style={styles.title}>Redirecting to Login</Text>\n        <Text style={styles.subtitle}>\n          Please use the main authentication screen to access the app.\n        </Text>\n        \n        <View style={styles.infoCard}>\n          <Icons.Info size={20} color={Colors.primary} />\n          <Text style={styles.infoText}>\n            Development features are disabled in production mode.\n          </Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n    padding: 20,\n    justifyContent: 'center',\n  },\n  productionBanner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.success + '20',\n    borderWidth: 1,\n    borderColor: Colors.success,\n    borderRadius: 8,\n    padding: 16,\n    marginBottom: 40,\n    gap: 8,\n  },\n  productionText: {\n    color: Colors.success,\n    fontWeight: '600',\n    fontSize: 16,\n  },\n  content: {\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 12,\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n    marginBottom: 32,\n  },\n  infoCard: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    gap: 12,\n  },\n  infoText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n    lineHeight: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "import { Link, Stack } from \"expo-router\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: \"Oops!\" }} />\n      <View style={styles.container}>\n        <Text style={styles.title}>This screen doesn't exist.</Text>\n\n        <Link href=\"/\" style={styles.link}>\n          <Text style={styles.linkText}>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: \"#2e78b7\",\n  },\n});",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +60 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import { useFonts } from 'expo-font';\nimport { Stack } from 'expo-router';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { Colors } from '@/constants/colors';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { trpc, trpcClient } from '@/lib/trpc';\n\nexport const unstable_settings = {\n  initialRouteName: 'auth',\n};\n\nSplashScreen.preventAutoHideAsync();\n\nconst queryClient = new QueryClient();\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({});\n\n  useEffect(() => {\n    if (error) {\n      console.error('Font loading error:', error);\n      throw error;\n    }\n  }, [error]);\n\n  useEffect(() => {\n    if (loaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded]);\n\n  if (!loaded) {\n    return null;\n  }\n\n  return (\n    <trpc.Provider client={trpcClient} queryClient={queryClient}>\n      <QueryClientProvider client={queryClient}>\n        <StatusBar style=\"light\" backgroundColor={Colors.background} />\n        <Stack\n          screenOptions={{\n            headerStyle: {\n              backgroundColor: Colors.background,\n            },\n            headerTintColor: Colors.text,\n            headerTitleStyle: {\n              fontWeight: '600',\n            },\n            headerBackTitle: 'Back',\n          }}\n        >\n          <Stack.Screen name=\"auth\" options={{ headerShown: false }} />\n          <Stack.Screen name=\"(customer)\" options={{ headerShown: false }} />\n          <Stack.Screen name=\"(mechanic)\" options={{ headerShown: false }} />\n        </Stack>\n      </QueryClientProvider>\n    </trpc.Provider>\n  );\n}"
            }
          }
        },
        {
          "display": "[Pasted text #1 +384 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, TextInput, Alert, TouchableOpacity, ScrollView } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { validateEmail, validatePassword, PRODUCTION_CONFIG } from '@/utils/firebase-config';\nimport * as Icons from 'lucide-react-native';\n\nexport default function AuthScreen() {\n  const { login, signup, isLoading, isAuthenticated, user } = useAuthStore();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Production logging\n      console.log('User authenticated:', { userId: user.id, role: user.role, timestamp: new Date() });\n      \n      // Redirect based on role\n      if (user.role === 'customer') {\n        router.replace('/(customer)');\n      } else if (user.role === 'mechanic' && user.id === 'mechanic-cody') {\n        router.replace('/(mechanic)');\n      } else {\n        // Invalid role or unauthorized mechanic\n        console.warn('Invalid role or unauthorized access:', { userId: user.id, role: user.role });\n        Alert.alert('Access Denied', 'You do not have permission to access this application.');\n      }\n    }\n  }, [isAuthenticated, user]);\n\n  const handleAuth = async () => {\n    if (!email.trim() || !password.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields');\n      return;\n    }\n\n    if (!isLoginMode) {\n      // Sign up validation\n      if (!firstName.trim() || !lastName.trim()) {\n        Alert.alert('Error', 'Please enter your first and last name');\n        return;\n      }\n\n      // Email validation\n      if (!validateEmail(email.trim())) {\n        Alert.alert('Error', 'Please enter a valid email address');\n        return;\n      }\n\n      // Password validation\n      const passwordValidation = validatePassword(password);\n      if (!passwordValidation.isValid) {\n        Alert.alert('Error', passwordValidation.errors.join('\\n'));\n        return;\n      }\n    }\n\n    // Production logging\n    console.log('Authentication attempt:', { \n      email: email.trim(), \n      mode: isLoginMode ? 'login' : 'signup',\n      timestamp: new Date() \n    });\n\n    let success = false;\n    \n    if (isLoginMode) {\n      success = await login(email.trim(), password);\n      if (!success) {\n        Alert.alert('Login Failed', 'Invalid email or password. Please try again.');\n      }\n    } else {\n      success = await signup(email.trim(), password, firstName.trim(), lastName.trim(), phone.trim() || undefined);\n      if (!success) {\n        Alert.alert('Sign Up Failed', 'An account with this email already exists. Please try logging in instead.');\n      }\n    }\n\n    if (!success) {\n      console.log('Authentication failed:', { \n        email: email.trim(), \n        mode: isLoginMode ? 'login' : 'signup',\n        timestamp: new Date() \n      });\n    }\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  };\n\n  const switchMode = () => {\n    setIsLoginMode(!isLoginMode);\n    resetForm();\n  };\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <View style={styles.header}>\n        <View style={styles.logoContainer}>\n          <Text style={styles.logoText}>Heinicus</Text>\n          <Text style={styles.logoSubtext}>Mobile Mechanic</Text>\n        </View>\n        <Text style={styles.subtitle}>\n          Professional automotive service at your location\n        </Text>\n      </View>\n\n      <View style={styles.form}>\n        <Text style={styles.formTitle}>\n          {isLoginMode ? 'Welcome Back' : 'Create Your Account'}\n        </Text>\n        <Text style={styles.formSubtitle}>\n          {isLoginMode \n            ? 'Sign in to access your account' \n            : 'Join thousands of satisfied customers'\n          }\n        </Text>\n\n        {!isLoginMode && (\n          <>\n            <View style={styles.nameRow}>\n              <View style={[styles.inputGroup, styles.nameInput]}>\n                <Text style={styles.inputLabel}>First Name *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={firstName}\n                  onChangeText={setFirstName}\n                  placeholder=\"John\"\n                  placeholderTextColor={Colors.textMuted}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                />\n              </View>\n              <View style={[styles.inputGroup, styles.nameInput]}>\n                <Text style={styles.inputLabel}>Last Name *</Text>\n                <TextInput\n                  style={styles.input}\n                  value={lastName}\n                  onChangeText={setLastName}\n                  placeholder=\"Doe\"\n                  placeholderTextColor={Colors.textMuted}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                />\n              </View>\n            </View>\n          </>\n        )}\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.inputLabel}>Email Address *</Text>\n          <TextInput\n            style={styles.input}\n            value={email}\n            onChangeText={setEmail}\n            placeholder=\"john@example.com\"\n            placeholderTextColor={Colors.textMuted}\n            keyboardType=\"email-address\"\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n          />\n        </View>\n\n        <View style={styles.inputGroup}>\n          <Text style={styles.inputLabel}>Password *</Text>\n          <TextInput\n            style={styles.input}\n            value={password}\n            onChangeText={setPassword}\n            placeholder={isLoginMode ? \"Enter your password\" : \"Create a password (min 6 characters)\"}\n            placeholderTextColor={Colors.textMuted}\n            secureTextEntry\n          />\n        </View>\n\n        {!isLoginMode && (\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Phone Number (Optional)</Text>\n            <TextInput\n              style={styles.input}\n              value={phone}\n              onChangeText={setPhone}\n              placeholder=\"(555) 123-4567\"\n              placeholderTextColor={Colors.textMuted}\n              keyboardType=\"phone-pad\"\n            />\n          </View>\n        )}\n\n        <Button\n          title={\n            isLoading \n              ? (isLoginMode ? 'Signing In...' : 'Creating Account...') \n              : (isLoginMode ? 'Sign In' : 'Create Account')\n          }\n          onPress={handleAuth}\n          disabled={isLoading}\n          style={styles.authButton}\n        />\n\n        <TouchableOpacity\n          style={styles.switchModeButton}\n          onPress={switchMode}\n          disabled={isLoading}\n        >\n          <Text style={styles.switchModeText}>\n            {isLoginMode \n              ? \"Don't have an account? Create one\" \n              : 'Already have an account? Sign in'\n            }\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Production Info */}\n      <View style={styles.productionInfo}>\n        <View style={styles.productionBadge}>\n          <Icons.Shield size={16} color={Colors.success} />\n          <Text style={styles.productionText}>SECURE & TRUSTED</Text>\n        </View>\n        <Text style={styles.productionSubtext}>\n          Licensed mechanic • Secure payments • Professional service\n        </Text>\n        \n        {!isLoginMode && (\n          <View style={styles.signupBenefits}>\n            <View style={styles.benefitItem}>\n              <Icons.Check size={16} color={Colors.success} />\n              <Text style={styles.benefitText}>Free quotes and estimates</Text>\n            </View>\n            <View style={styles.benefitItem}>\n              <Icons.Check size={16} color={Colors.success} />\n              <Text style={styles.benefitText}>Service at your location</Text>\n            </View>\n            <View style={styles.benefitItem}>\n              <Icons.Check size={16} color={Colors.success} />\n              <Text style={styles.benefitText}>Professional certified mechanic</Text>\n            </View>\n          </View>\n        )}\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  contentContainer: {\n    padding: 20,\n    paddingBottom: 40,\n  },\n  header: {\n    alignItems: 'center',\n    marginTop: 60,\n    marginBottom: 40,\n  },\n  logoContainer: {\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  logoText: {\n    fontSize: 36,\n    fontWeight: '700',\n    color: Colors.primary,\n    letterSpacing: 1,\n  },\n  logoSubtext: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  form: {\n    marginBottom: 40,\n  },\n  formTitle: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  formSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  nameRow: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  nameInput: {\n    flex: 1,\n  },\n  inputGroup: {\n    marginBottom: 20,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 16,\n    color: Colors.text,\n    fontSize: 16,\n  },\n  authButton: {\n    marginTop: 8,\n    marginBottom: 16,\n  },\n  switchModeButton: {\n    alignItems: 'center',\n    padding: 8,\n  },\n  switchModeText: {\n    color: Colors.primary,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  productionInfo: {\n    alignItems: 'center',\n    marginTop: 'auto',\n  },\n  productionBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.success + '20',\n    borderWidth: 1,\n    borderColor: Colors.success,\n    borderRadius: 6,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginBottom: 8,\n  },\n  productionText: {\n    fontSize: 12,\n    color: Colors.success,\n    fontWeight: '600',\n  },\n  productionSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  signupBenefits: {\n    gap: 8,\n  },\n  benefitItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  benefitText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +449 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { useAppStore } from '@/stores/app-store';\nimport * as Icons from 'lucide-react-native';\nimport { NotificationSettings } from '@/components/NotificationSettings';\nimport { AvailabilitySettings } from '@/components/AvailabilitySettings';\nimport { ServicePricingSettings } from '@/components/ServicePricingSettings';\nimport { ToolsEquipmentSettings } from '@/components/ToolsEquipmentSettings';\nimport { ReportsAnalytics } from '@/components/ReportsAnalytics';\n\ntype SettingsScreen = 'main' | 'availability' | 'notifications' | 'pricing' | 'tools' | 'reports';\n\nexport default function MechanicProfileScreen() {\n  const { user, logout } = useAuthStore();\n  const { serviceRequests, quotes } = useAppStore();\n  const [currentScreen, setCurrentScreen] = useState<SettingsScreen>('main');\n\n  const completedJobs = serviceRequests.filter(r => r.status === 'completed').length;\n  const totalRevenue = quotes\n    .filter(q => q.status === 'accepted' && q.paidAt)\n    .reduce((sum, q) => sum + q.totalCost, 0);\n  const averageRating = 4.8; // Mock rating\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Sign Out', style: 'destructive', onPress: logout },\n      ]\n    );\n  };\n\n  const handleSettingsChange = (settingsType: string, settings: any) => {\n    console.log(`${settingsType} settings updated:`, settings);\n    // Here you would typically save to your store or backend\n  };\n\n  const settingsOptions = [\n    {\n      id: 'availability',\n      title: 'Availability Settings',\n      subtitle: 'Set your working hours and availability',\n      icon: 'Clock',\n      onPress: () => setCurrentScreen('availability'),\n    },\n    {\n      id: 'notifications',\n      title: 'Notifications',\n      subtitle: 'Manage your notification preferences',\n      icon: 'Bell',\n      onPress: () => setCurrentScreen('notifications'),\n    },\n    {\n      id: 'pricing',\n      title: 'Service Pricing',\n      subtitle: 'Update your service rates and pricing',\n      icon: 'DollarSign',\n      onPress: () => setCurrentScreen('pricing'),\n    },\n    {\n      id: 'tools',\n      title: 'Tools & Equipment',\n      subtitle: 'Manage your available tools and equipment',\n      icon: 'Wrench',\n      onPress: () => setCurrentScreen('tools'),\n    },\n    {\n      id: 'reports',\n      title: 'Reports & Analytics',\n      subtitle: 'View your performance and earnings reports',\n      icon: 'BarChart3',\n      onPress: () => setCurrentScreen('reports'),\n    },\n  ];\n\n  const renderSettingsScreen = () => {\n    switch (currentScreen) {\n      case 'availability':\n        return (\n          <AvailabilitySettings \n            onSettingsChange={(settings) => handleSettingsChange('availability', settings)}\n          />\n        );\n      case 'notifications':\n        return (\n          <NotificationSettings \n            onSettingsChange={(settings) => handleSettingsChange('notifications', settings)}\n          />\n        );\n      case 'pricing':\n        return (\n          <ServicePricingSettings \n            onSettingsChange={(settings) => handleSettingsChange('pricing', settings)}\n          />\n        );\n      case 'tools':\n        return (\n          <ToolsEquipmentSettings \n            onSettingsChange={(settings) => handleSettingsChange('tools', settings)}\n          />\n        );\n      case 'reports':\n        return (\n          <ReportsAnalytics \n            mechanicId={user?.id || 'mechanic-cody'}\n          />\n        );\n      default:\n        return renderMainProfile();\n    }\n  };\n\n  const renderMainProfile = () => (\n    <>\n      {/* Profile Header */}\n      <View style={styles.profileHeader}>\n        <View style={styles.avatarContainer}>\n          <View style={styles.avatar}>\n            <Text style={styles.avatarText}>\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </Text>\n          </View>\n          <View style={styles.statusIndicator} />\n        </View>\n        \n        <View style={styles.profileInfo}>\n          <Text style={styles.profileName}>{user?.firstName} {user?.lastName}</Text>\n          <Text style={styles.profileEmail}>{user?.email}</Text>\n          <View style={styles.roleBadge}>\n            <Icons.Wrench size={12} color={Colors.mechanic} />\n            <Text style={styles.roleText}>Certified Mechanic</Text>\n          </View>\n        </View>\n        \n        <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n          <Icons.LogOut size={20} color={Colors.error} />\n        </TouchableOpacity>\n      </View>\n\n      {/* Stats Cards */}\n      <View style={styles.statsSection}>\n        <Text style={styles.sectionTitle}>Performance Overview</Text>\n        <View style={styles.statsGrid}>\n          <View style={styles.statCard}>\n            <Icons.CheckCircle size={24} color={Colors.success} />\n            <Text style={styles.statNumber}>{completedJobs}</Text>\n            <Text style={styles.statLabel}>Jobs Completed</Text>\n          </View>\n          \n          <View style={styles.statCard}>\n            <Icons.DollarSign size={24} color={Colors.primary} />\n            <Text style={styles.statNumber}>${totalRevenue}</Text>\n            <Text style={styles.statLabel}>Total Earnings</Text>\n          </View>\n          \n          <View style={styles.statCard}>\n            <Icons.Star size={24} color={Colors.warning} />\n            <Text style={styles.statNumber}>{averageRating}</Text>\n            <Text style={styles.statLabel}>Average Rating</Text>\n          </View>\n        </View>\n      </View>\n\n      {/* Settings */}\n      <View style={styles.settingsSection}>\n        <Text style={styles.sectionTitle}>Settings</Text>\n        <View style={styles.settingsList}>\n          {settingsOptions.map((option) => {\n            const IconComponent = Icons[option.icon as keyof typeof Icons] as any;\n            return (\n              <TouchableOpacity\n                key={option.id}\n                style={styles.settingItem}\n                onPress={option.onPress}\n              >\n                <View style={styles.settingIcon}>\n                  {IconComponent && <IconComponent size={20} color={Colors.mechanic} />}\n                </View>\n                \n                <View style={styles.settingContent}>\n                  <Text style={styles.settingTitle}>{option.title}</Text>\n                  <Text style={styles.settingSubtitle}>{option.subtitle}</Text>\n                </View>\n                \n                <Icons.ChevronRight size={20} color={Colors.textMuted} />\n              </TouchableOpacity>\n            );\n          })}\n        </View>\n      </View>\n\n      {/* Support Section */}\n      <View style={styles.supportSection}>\n        <Text style={styles.sectionTitle}>Support</Text>\n        <View style={styles.supportList}>\n          <TouchableOpacity style={styles.supportItem}>\n            <Icons.HelpCircle size={20} color={Colors.primary} />\n            <Text style={styles.supportText}>Help & FAQ</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.supportItem}>\n            <Icons.MessageCircle size={20} color={Colors.primary} />\n            <Text style={styles.supportText}>Contact Support</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity style={styles.supportItem}>\n            <Icons.FileText size={20} color={Colors.primary} />\n            <Text style={styles.supportText}>Terms & Privacy</Text>\n            <Icons.ChevronRight size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </>\n  );\n\n  return (\n    <View style={styles.container}>\n      {/* Header with Back Button */}\n      {currentScreen !== 'main' && (\n        <View style={styles.header}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setCurrentScreen('main')}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.headerTitle}>\n            {settingsOptions.find(opt => opt.id === currentScreen)?.title || 'Settings'}\n          </Text>\n          <View style={styles.headerSpacer} />\n        </View>\n      )}\n\n      <ScrollView \n        style={styles.scrollView} \n        contentContainerStyle={styles.content}\n        showsVerticalScrollIndicator={false}\n      >\n        {renderSettingsScreen()}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n    paddingVertical: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  backButton: {\n    padding: 4,\n  },\n  headerTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  headerSpacer: {\n    width: 32,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  content: {\n    padding: 20,\n  },\n  profileHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 20,\n    borderRadius: 12,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  avatarContainer: {\n    position: 'relative',\n    marginRight: 16,\n  },\n  avatar: {\n    width: 60,\n    height: 60,\n    borderRadius: 30,\n    backgroundColor: Colors.mechanic + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  avatarText: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.mechanic,\n  },\n  statusIndicator: {\n    position: 'absolute',\n    bottom: 2,\n    right: 2,\n    width: 16,\n    height: 16,\n    borderRadius: 8,\n    backgroundColor: Colors.success,\n    borderWidth: 2,\n    borderColor: Colors.card,\n  },\n  profileInfo: {\n    flex: 1,\n  },\n  profileName: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  profileEmail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  roleBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    alignSelf: 'flex-start',\n    gap: 4,\n  },\n  roleText: {\n    fontSize: 12,\n    color: Colors.mechanic,\n    fontWeight: '600',\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  statsSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  statNumber: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text,\n    marginTop: 8,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n  },\n  settingsSection: {\n    marginBottom: 24,\n  },\n  settingsList: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  settingItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  settingIcon: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: Colors.mechanic + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  settingContent: {\n    flex: 1,\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  settingSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  supportSection: {\n    marginBottom: 20,\n  },\n  supportList: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  supportItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n    gap: 12,\n  },\n  supportText: {\n    flex: 1,\n    fontSize: 16,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +368 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, StyleSheet, ScrollView, TouchableOpacity, Dimensions } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\nimport { Platform } from 'react-native';\n\nconst { width } = Dimensions.get('window');\n\nexport default function MechanicMapScreen() {\n  const { serviceRequests, currentLocation } = useAppStore();\n  const [selectedRequest, setSelectedRequest] = useState<string | null>(null);\n\n  const activeRequests = serviceRequests.filter(r => \n    ['pending', 'quoted', 'accepted', 'in_progress'].includes(r.status) && r.location\n  );\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return Colors.warning;\n      case 'quoted': return Colors.primary;\n      case 'accepted': return Colors.success;\n      case 'in_progress': return Colors.mechanic;\n      default: return Colors.textMuted;\n    }\n  };\n\n  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n    const R = 3959; // Earth's radius in miles\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  };\n\n  const openInMaps = (latitude: number, longitude: number, address?: string) => {\n    const label = address || 'Service Location';\n    \n    if (Platform.OS === 'web') {\n      const url = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n      window.open(url, '_blank');\n    } else {\n      // For mobile, you would use Linking.openURL with platform-specific map URLs\n      console.log('Open maps:', { latitude, longitude, label });\n    }\n  };\n\n  if (activeRequests.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.MapPin size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Active Service Locations</Text>\n        <Text style={styles.emptyText}>\n          Service requests with locations will appear here once submitted.\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Mock Map Area */}\n      <View style={styles.mapContainer}>\n        <View style={styles.mapPlaceholder}>\n          <Icons.Map size={48} color={Colors.textMuted} />\n          <Text style={styles.mapPlaceholderText}>Interactive Map</Text>\n          <Text style={styles.mapPlaceholderSubtext}>\n            In production, this would show Google Maps with service location pins\n          </Text>\n        </View>\n\n        {/* Current Location Indicator */}\n        {currentLocation && (\n          <View style={styles.currentLocationCard}>\n            <Icons.Navigation size={16} color={Colors.mechanic} />\n            <Text style={styles.currentLocationText}>\n              Your Location: {currentLocation.address || 'Current Position'}\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {/* Service Requests List */}\n      <ScrollView style={styles.requestsList} showsVerticalScrollIndicator={false}>\n        <Text style={styles.listTitle}>Service Locations ({activeRequests.length})</Text>\n        \n        {activeRequests.map((request) => {\n          const distance = currentLocation && request.location ? \n            calculateDistance(\n              currentLocation.latitude, \n              currentLocation.longitude,\n              request.location.latitude,\n              request.location.longitude\n            ) : null;\n\n          return (\n            <TouchableOpacity\n              key={request.id}\n              style={[\n                styles.requestCard,\n                selectedRequest === request.id && styles.requestCardSelected\n              ]}\n              onPress={() => setSelectedRequest(selectedRequest === request.id ? null : request.id)}\n            >\n              <View style={styles.requestHeader}>\n                <View style={styles.requestInfo}>\n                  <Text style={styles.requestTitle}>\n                    {getServiceTitle(request.type)}\n                  </Text>\n                  <View style={styles.requestMeta}>\n                    <View style={[styles.statusDot, { backgroundColor: getStatusColor(request.status) }]} />\n                    <Text style={styles.requestStatus}>{request.status.replace('_', ' ')}</Text>\n                    {distance && (\n                      <>\n                        <Text style={styles.metaDivider}>•</Text>\n                        <Text style={styles.requestDistance}>{distance.toFixed(1)} mi</Text>\n                      </>\n                    )}\n                    {request.urgency === 'emergency' && (\n                      <>\n                        <Text style={styles.metaDivider}>•</Text>\n                        <Icons.AlertTriangle size={12} color={Colors.error} />\n                        <Text style={styles.emergencyText}>Emergency</Text>\n                      </>\n                    )}\n                  </View>\n                </View>\n                <TouchableOpacity\n                  style={styles.directionsButton}\n                  onPress={() => request.location && openInMaps(\n                    request.location.latitude,\n                    request.location.longitude,\n                    request.location.address\n                  )}\n                >\n                  <Icons.Navigation size={20} color={Colors.mechanic} />\n                </TouchableOpacity>\n              </View>\n\n              <View style={styles.locationInfo}>\n                <Icons.MapPin size={14} color={Colors.textMuted} />\n                <Text style={styles.locationText}>\n                  {request.location?.address || `${request.location?.latitude.toFixed(4)}, ${request.location?.longitude.toFixed(4)}`}\n                </Text>\n              </View>\n\n              {selectedRequest === request.id && (\n                <View style={styles.requestDetails}>\n                  <Text style={styles.requestDescription} numberOfLines={3}>\n                    {request.description}\n                  </Text>\n                  \n                  <View style={styles.requestActions}>\n                    <TouchableOpacity style={styles.actionButton}>\n                      <Icons.Phone size={16} color={Colors.mechanic} />\n                      <Text style={styles.actionButtonText}>Call Customer</Text>\n                    </TouchableOpacity>\n                    \n                    <TouchableOpacity style={styles.actionButton}>\n                      <Icons.MessageCircle size={16} color={Colors.mechanic} />\n                      <Text style={styles.actionButtonText}>Chat</Text>\n                    </TouchableOpacity>\n                  </View>\n                </View>\n              )}\n            </TouchableOpacity>\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  mapContainer: {\n    height: 250,\n    backgroundColor: Colors.card,\n    position: 'relative',\n  },\n  mapPlaceholder: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.surface,\n  },\n  mapPlaceholderText: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 12,\n  },\n  mapPlaceholderSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    marginTop: 4,\n    paddingHorizontal: 20,\n  },\n  currentLocationCard: {\n    position: 'absolute',\n    top: 16,\n    left: 16,\n    right: 16,\n    backgroundColor: Colors.background,\n    borderRadius: 8,\n    padding: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    shadowColor: Colors.black,\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  currentLocationText: {\n    fontSize: 14,\n    color: Colors.text,\n    flex: 1,\n  },\n  requestsList: {\n    flex: 1,\n    padding: 16,\n  },\n  listTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  requestCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  requestCardSelected: {\n    borderColor: Colors.mechanic,\n    backgroundColor: Colors.mechanic + '10',\n  },\n  requestHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  requestInfo: {\n    flex: 1,\n  },\n  requestTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  requestMeta: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  statusDot: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n  requestStatus: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textTransform: 'capitalize',\n  },\n  metaDivider: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  requestDistance: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  emergencyText: {\n    fontSize: 12,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  directionsButton: {\n    padding: 8,\n    backgroundColor: Colors.mechanic + '20',\n    borderRadius: 8,\n  },\n  locationInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    marginBottom: 8,\n  },\n  locationText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    flex: 1,\n  },\n  requestDetails: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    paddingTop: 12,\n    marginTop: 8,\n  },\n  requestDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    lineHeight: 20,\n    marginBottom: 12,\n  },\n  requestActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  actionButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +1194 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SERVICE_CATEGORIES, SERVICE_TOOLS } from '@/constants/services';\nimport { ServiceRequest } from '@/types/service';\nimport { ChatComponent } from '@/components/ChatComponent';\nimport { WorkTimer } from '@/components/WorkTimer';\nimport { SignatureCapture } from '@/components/SignatureCapture';\nimport * as Icons from 'lucide-react-native';\n\nexport default function MechanicJobsScreen() {\n  const { \n    serviceRequests, \n    updateServiceRequest, \n    addJobLog, \n    getJobLogs, \n    getActiveJobTimer,\n    updateJobTools,\n    completeToolsCheck,\n    getJobToolsStatus,\n    logEvent\n  } = useAppStore();\n  const { user } = useAuthStore();\n  const [selectedTab, setSelectedTab] = useState<'pending' | 'active' | 'completed'>('pending');\n  const [selectedRequestForChat, setSelectedRequestForChat] = useState<string | null>(null);\n  const [selectedRequestForTimer, setSelectedRequestForTimer] = useState<string | null>(null);\n  const [selectedRequestForSignature, setSelectedRequestForSignature] = useState<string | null>(null);\n  const [selectedRequestForTools, setSelectedRequestForTools] = useState<string | null>(null);\n\n  // Production: Filter jobs for Cody only\n  const mechanicId = 'mechanic-cody';\n  const mechanicJobs = serviceRequests.filter(job => {\n    // In production, only show jobs assigned to Cody or unassigned jobs\n    return !job.assignedMechanicId || job.assignedMechanicId === mechanicId;\n  });\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return Colors.warning;\n      case 'quoted': return Colors.primary;\n      case 'accepted': return Colors.success;\n      case 'in_progress': return Colors.mechanic;\n      case 'completed': return Colors.success;\n      default: return Colors.textMuted;\n    }\n  };\n\n  const filteredJobs = mechanicJobs.filter(job => {\n    switch (selectedTab) {\n      case 'pending':\n        return job.status === 'pending' || job.status === 'quoted';\n      case 'active':\n        return job.status === 'accepted' || job.status === 'in_progress';\n      case 'completed':\n        return job.status === 'completed';\n      default:\n        return false;\n    }\n  });\n\n  const handleClaimJob = (jobId: string) => {\n    Alert.alert(\n      'Claim Job',\n      'Do you want to claim this job?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Claim',\n          onPress: () => {\n            logEvent('job_claimed', { jobId, mechanicId });\n            \n            // Set up required tools for this job\n            const job = serviceRequests.find(j => j.id === jobId);\n            if (job) {\n              const serviceCategory = SERVICE_CATEGORIES.find(s => s.id === job.type);\n              const requiredTools = serviceCategory?.requiredTools.map(tool => tool.id) || [];\n              \n              updateServiceRequest(jobId, { \n                status: 'in_progress',\n                assignedMechanicId: mechanicId,\n                claimedAt: new Date(),\n                requiredTools\n              });\n            }\n            \n            Alert.alert('Job Claimed', 'You have successfully claimed this job. Check your tools before starting work.');\n          }\n        }\n      ]\n    );\n  };\n\n  const handleCompleteJob = (jobId: string) => {\n    const jobLogs = getJobLogs(jobId);\n    const activeTimer = getActiveJobTimer(jobId);\n    const job = serviceRequests.find(j => j.id === jobId);\n    const toolsStatus = getJobToolsStatus(jobId);\n    \n    // Check if there are work logs\n    if (jobLogs.length === 0) {\n      Alert.alert(\n        'Work Timer Required',\n        'Please log work time using the timer before completing this job.',\n        [{ text: 'OK' }]\n      );\n      return;\n    }\n\n    // Check if timer is still running\n    if (activeTimer) {\n      Alert.alert(\n        'Timer Still Running',\n        'Please stop the work timer before completing this job.',\n        [{ text: 'OK' }]\n      );\n      return;\n    }\n\n    // Check if signature is required and present\n    if (!job?.signatureData) {\n      Alert.alert(\n        'Signature Required',\n        'Customer signature is required to complete this job.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { text: 'Get Signature', onPress: () => setSelectedRequestForSignature(jobId) }\n        ]\n      );\n      return;\n    }\n\n    // Check if tools check is completed\n    if (!job?.toolsCheckCompletedAt) {\n      Alert.alert(\n        'Tools Check Required',\n        'Please complete the tools check before finishing this job.',\n        [\n          { text: 'Cancel', style: 'cancel' },\n          { text: 'Check Tools', onPress: () => setSelectedRequestForTools(jobId) }\n        ]\n      );\n      return;\n    }\n\n    // All requirements met, complete the job\n    Alert.alert(\n      'Complete Job',\n      'Mark this job as completed?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Complete',\n          onPress: () => {\n            logEvent('job_completed', { \n              jobId, \n              mechanicId, \n              totalWorkTime: jobLogs.reduce((total, log) => {\n                if (log.endTime) {\n                  return total + (log.endTime.getTime() - log.startTime.getTime()) / (1000 * 60);\n                }\n                return total;\n              }, 0)\n            });\n            \n            updateServiceRequest(jobId, { \n              status: 'completed',\n              completedAt: new Date(),\n              completedBy: mechanicId\n            });\n            Alert.alert('Job Completed', 'Job has been marked as completed.');\n          }\n        }\n      ]\n    );\n  };\n\n  const handleWorkComplete = (jobId: string, workLog: any) => {\n    logEvent('work_timer_stopped', { \n      jobId, \n      mechanicId, \n      duration: workLog.endTime ? (workLog.endTime.getTime() - workLog.startTime.getTime()) / (1000 * 60) : 0\n    });\n    \n    addJobLog(workLog);\n    setSelectedRequestForTimer(null);\n    \n    // Check if signature is still needed\n    const job = serviceRequests.find(j => j.id === jobId);\n    if (!job?.signatureData) {\n      Alert.alert(\n        'Work Logged',\n        'Work time has been logged. Customer signature is required to complete the job.',\n        [\n          { text: 'Later', style: 'cancel' },\n          { text: 'Get Signature', onPress: () => setSelectedRequestForSignature(jobId) }\n        ]\n      );\n    } else {\n      Alert.alert('Work Logged', 'Work time has been logged successfully.');\n    }\n  };\n\n  const handleSignatureComplete = (jobId: string, signatureData: string) => {\n    logEvent('signature_captured', { jobId, mechanicId });\n    \n    updateServiceRequest(jobId, { \n      signatureData,\n      signatureCapturedAt: new Date(),\n      signatureCapturedBy: mechanicId\n    });\n    setSelectedRequestForSignature(null);\n    \n    // Check if we can auto-complete the job\n    const jobLogs = getJobLogs(jobId);\n    const job = serviceRequests.find(j => j.id === jobId);\n    if (jobLogs.length > 0 && job?.toolsCheckCompletedAt) {\n      Alert.alert(\n        'Signature Captured',\n        'Customer signature has been captured. Complete the job now?',\n        [\n          { text: 'Later', style: 'cancel' },\n          { \n            text: 'Complete Job', \n            onPress: () => {\n              updateServiceRequest(jobId, { \n                status: 'completed',\n                completedAt: new Date(),\n                completedBy: mechanicId\n              });\n              Alert.alert('Job Completed', 'Job has been completed successfully.');\n            }\n          }\n        ]\n      );\n    } else {\n      Alert.alert('Signature Captured', 'Customer signature has been captured.');\n    }\n  };\n\n  const openChat = (requestId: string) => {\n    logEvent('chat_opened', { jobId: requestId, mechanicId });\n    setSelectedRequestForChat(requestId);\n  };\n\n  const openTimer = (requestId: string) => {\n    logEvent('work_timer_opened', { jobId: requestId, mechanicId });\n    setSelectedRequestForTimer(requestId);\n  };\n\n  const openToolsCheck = (requestId: string) => {\n    logEvent('tools_check_opened', { jobId: requestId, mechanicId });\n    setSelectedRequestForTools(requestId);\n  };\n\n  // Chat View\n  if (selectedRequestForChat) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.chatHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForChat(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.chatHeaderTitle}>Customer Chat</Text>\n        </View>\n        <ChatComponent\n          serviceRequestId={selectedRequestForChat}\n          currentUserId={mechanicId}\n          currentUserName=\"Cody Owner\"\n          currentUserType=\"mechanic\"\n        />\n      </View>\n    );\n  }\n\n  // Work Timer View\n  if (selectedRequestForTimer) {\n    const job = serviceRequests.find(j => j.id === selectedRequestForTimer);\n    return (\n      <View style={styles.container}>\n        <View style={styles.timerHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForTimer(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.timerHeaderTitle}>Work Timer</Text>\n        </View>\n        <WorkTimer\n          jobId={selectedRequestForTimer}\n          jobTitle={job ? getServiceTitle(job.type) : 'Service'}\n          onWorkComplete={handleWorkComplete}\n        />\n      </View>\n    );\n  }\n\n  // Signature Capture View\n  if (selectedRequestForSignature) {\n    const job = serviceRequests.find(j => j.id === selectedRequestForSignature);\n    return (\n      <View style={styles.container}>\n        <View style={styles.signatureHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForSignature(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.signatureHeaderTitle}>Customer Signature</Text>\n        </View>\n        <SignatureCapture\n          jobId={selectedRequestForSignature}\n          jobTitle={job ? getServiceTitle(job.type) : 'Service'}\n          onSignatureComplete={handleSignatureComplete}\n          onCancel={() => setSelectedRequestForSignature(null)}\n        />\n      </View>\n    );\n  }\n\n  // Tools Check View\n  if (selectedRequestForTools) {\n    const job = serviceRequests.find(j => j.id === selectedRequestForTools);\n    const serviceCategory = SERVICE_CATEGORIES.find(s => s.id === job?.type);\n    const requiredTools = serviceCategory?.requiredTools || [];\n    \n    return (\n      <View style={styles.container}>\n        <View style={styles.toolsHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForTools(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.toolsHeaderTitle}>Tools Check</Text>\n        </View>\n        \n        <ScrollView style={styles.toolsContent}>\n          <View style={styles.toolsSection}>\n            <Text style={styles.toolsSectionTitle}>\n              Required Tools for {getServiceTitle(job?.type || '')}\n            </Text>\n            \n            {requiredTools.map((tool) => (\n              <TouchableOpacity\n                key={tool.id}\n                style={[\n                  styles.toolItem,\n                  job?.toolsChecked?.[tool.id] && styles.toolItemChecked\n                ]}\n                onPress={() => {\n                  const currentChecked = job?.toolsChecked || {};\n                  const newChecked = {\n                    ...currentChecked,\n                    [tool.id]: !currentChecked[tool.id]\n                  };\n                  updateJobTools(selectedRequestForTools, newChecked);\n                }}\n              >\n                <View style={styles.toolItemLeft}>\n                  <View style={[\n                    styles.toolCheckbox,\n                    job?.toolsChecked?.[tool.id] && styles.toolCheckboxChecked\n                  ]}>\n                    {job?.toolsChecked?.[tool.id] && (\n                      <Icons.Check size={16} color={Colors.white} />\n                    )}\n                  </View>\n                  <View style={styles.toolInfo}>\n                    <Text style={styles.toolName}>{tool.name}</Text>\n                    {tool.description && (\n                      <Text style={styles.toolDescription}>{tool.description}</Text>\n                    )}\n                  </View>\n                </View>\n                <View style={[\n                  styles.toolBadge,\n                  { backgroundColor: tool.required ? Colors.error + '20' : Colors.textMuted + '20' }\n                ]}>\n                  <Text style={[\n                    styles.toolBadgeText,\n                    { color: tool.required ? Colors.error : Colors.textMuted }\n                  ]}>\n                    {tool.required ? 'Required' : 'Optional'}\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            ))}\n          </View>\n          \n          <TouchableOpacity\n            style={[\n              styles.completeToolsButton,\n              !requiredTools.every(tool => tool.required ? job?.toolsChecked?.[tool.id] : true) && styles.disabledButton\n            ]}\n            onPress={() => {\n              const allRequiredChecked = requiredTools.every(tool => \n                tool.required ? job?.toolsChecked?.[tool.id] : true\n              );\n              \n              if (!allRequiredChecked) {\n                Alert.alert('Missing Tools', 'Please check all required tools before proceeding.');\n                return;\n              }\n              \n              completeToolsCheck(selectedRequestForTools);\n              setSelectedRequestForTools(null);\n              Alert.alert('Tools Check Complete', 'All required tools have been verified.');\n            }}\n            disabled={!requiredTools.every(tool => tool.required ? job?.toolsChecked?.[tool.id] : true)}\n          >\n            <Text style={[\n              styles.completeToolsButtonText,\n              !requiredTools.every(tool => tool.required ? job?.toolsChecked?.[tool.id] : true) && styles.disabledButtonText\n            ]}>\n              Complete Tools Check\n            </Text>\n          </TouchableOpacity>\n        </ScrollView>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Mechanic Info Header */}\n      <View style={styles.mechanicHeader}>\n        <Text style={styles.mechanicName}>\n          Cody Owner - Mobile Mechanic\n        </Text>\n        <Text style={styles.mechanicSubtext}>\n          Production Environment - Cody Only Access\n        </Text>\n      </View>\n\n      {/* Tab Navigation */}\n      <View style={styles.tabContainer}>\n        {[\n          { key: 'pending', label: 'Pending', count: mechanicJobs.filter(j => j.status === 'pending' || j.status === 'quoted').length },\n          { key: 'active', label: 'Active', count: mechanicJobs.filter(j => j.status === 'accepted' || j.status === 'in_progress').length },\n          { key: 'completed', label: 'Completed', count: mechanicJobs.filter(j => j.status === 'completed').length },\n        ].map((tab) => (\n          <TouchableOpacity\n            key={tab.key}\n            style={[styles.tab, selectedTab === tab.key && styles.activeTab]}\n            onPress={() => setSelectedTab(tab.key as any)}\n          >\n            <Text style={[styles.tabText, selectedTab === tab.key && styles.activeTabText]}>\n              {tab.label} ({tab.count})\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n\n      {/* Jobs List */}\n      <ScrollView style={styles.jobsList} showsVerticalScrollIndicator={false}>\n        {filteredJobs.length === 0 ? (\n          <View style={styles.emptyContainer}>\n            <Icons.Briefcase size={64} color={Colors.textMuted} />\n            <Text style={styles.emptyTitle}>No {selectedTab} jobs</Text>\n            <Text style={styles.emptyText}>\n              {selectedTab === 'pending' && 'New job requests will appear here'}\n              {selectedTab === 'active' && 'Jobs you are working on will appear here'}\n              {selectedTab === 'completed' && 'Completed jobs will appear here'}\n            </Text>\n          </View>\n        ) : (\n          <View style={styles.content}>\n            {filteredJobs.map((job) => (\n              <JobCard\n                key={job.id}\n                job={job}\n                onClaimJob={handleClaimJob}\n                onCompleteJob={handleCompleteJob}\n                onOpenChat={openChat}\n                onOpenTimer={openTimer}\n                onOpenToolsCheck={openToolsCheck}\n                getServiceTitle={getServiceTitle}\n                getStatusColor={getStatusColor}\n                getJobLogs={getJobLogs}\n                getActiveJobTimer={getActiveJobTimer}\n                getJobToolsStatus={getJobToolsStatus}\n              />\n            ))}\n          </View>\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\ninterface JobCardProps {\n  job: ServiceRequest;\n  onClaimJob: (jobId: string) => void;\n  onCompleteJob: (jobId: string) => void;\n  onOpenChat: (jobId: string) => void;\n  onOpenTimer: (jobId: string) => void;\n  onOpenToolsCheck: (jobId: string) => void;\n  getServiceTitle: (type: string) => string;\n  getStatusColor: (status: string) => string;\n  getJobLogs: (jobId: string) => any[];\n  getActiveJobTimer: (jobId: string) => any;\n  getJobToolsStatus: (jobId: string) => { total: number; checked: number; allRequired: boolean };\n}\n\nfunction JobCard({ \n  job, \n  onClaimJob, \n  onCompleteJob, \n  onOpenChat, \n  onOpenTimer, \n  onOpenToolsCheck,\n  getServiceTitle, \n  getStatusColor,\n  getJobLogs,\n  getActiveJobTimer,\n  getJobToolsStatus\n}: JobCardProps) {\n  const jobLogs = getJobLogs(job.id);\n  const activeTimer = getActiveJobTimer(job.id);\n  const toolsStatus = getJobToolsStatus(job.id);\n  const hasWorkLogs = jobLogs.length > 0;\n  const hasSignature = !!job.signatureData;\n  const hasToolsCheck = !!job.toolsCheckCompletedAt;\n  const canComplete = hasWorkLogs && hasSignature && hasToolsCheck && !activeTimer;\n\n  return (\n    <View style={styles.jobCard}>\n      <View style={styles.jobHeader}>\n        <View style={styles.jobTitleRow}>\n          <Text style={styles.jobTitle}>{getServiceTitle(job.type)}</Text>\n          {job.urgency === 'emergency' && (\n            <Icons.AlertTriangle size={16} color={Colors.error} />\n          )}\n        </View>\n        \n        <View style={[styles.statusBadge, { backgroundColor: getStatusColor(job.status) + '20' }]}>\n          <Text style={[styles.statusText, { color: getStatusColor(job.status) }]}>\n            {job.status.replace('_', ' ')}\n          </Text>\n        </View>\n      </View>\n\n      <Text style={styles.jobDescription} numberOfLines={3}>\n        {job.description}\n      </Text>\n\n      {/* AI Diagnosis Preview */}\n      {job.aiDiagnosis && (\n        <View style={styles.aiDiagnosisPreview}>\n          <Icons.Brain size={14} color={Colors.primary} />\n          <Text style={styles.aiDiagnosisText}>\n            AI suggests: {job.aiDiagnosis.likelyCauses[0]}\n          </Text>\n        </View>\n      )}\n\n      {/* Job Progress Indicators */}\n      {(job.status === 'accepted' || job.status === 'in_progress' || job.status === 'completed') && (\n        <View style={styles.progressSection}>\n          <Text style={styles.progressTitle}>Job Progress</Text>\n          <View style={styles.progressIndicators}>\n            <View style={styles.progressItem}>\n              <View style={[\n                styles.progressIcon,\n                { backgroundColor: hasToolsCheck ? Colors.success + '20' : Colors.textMuted + '20' }\n              ]}>\n                {hasToolsCheck ? (\n                  <Icons.CheckCircle size={16} color={Colors.success} />\n                ) : (\n                  <Icons.Wrench size={16} color={Colors.textMuted} />\n                )}\n              </View>\n              <Text style={[\n                styles.progressText,\n                { color: hasToolsCheck ? Colors.success : Colors.textMuted }\n              ]}>\n                Tools ({toolsStatus.checked}/{toolsStatus.total})\n              </Text>\n            </View>\n\n            <View style={styles.progressItem}>\n              <View style={[\n                styles.progressIcon,\n                { backgroundColor: hasWorkLogs ? Colors.success + '20' : Colors.textMuted + '20' }\n              ]}>\n                {hasWorkLogs ? (\n                  <Icons.CheckCircle size={16} color={Colors.success} />\n                ) : (\n                  <Icons.Clock size={16} color={Colors.textMuted} />\n                )}\n              </View>\n              <Text style={[\n                styles.progressText,\n                { color: hasWorkLogs ? Colors.success : Colors.textMuted }\n              ]}>\n                Work Logged\n              </Text>\n              {activeTimer && (\n                <View style={styles.activeIndicator}>\n                  <Text style={styles.activeText}>ACTIVE</Text>\n                </View>\n              )}\n            </View>\n\n            <View style={styles.progressItem}>\n              <View style={[\n                styles.progressIcon,\n                { backgroundColor: hasSignature ? Colors.success + '20' : Colors.textMuted + '20' }\n              ]}>\n                {hasSignature ? (\n                  <Icons.CheckCircle size={16} color={Colors.success} />\n                ) : (\n                  <Icons.PenTool size={16} color={Colors.textMuted} />\n                )}\n              </View>\n              <Text style={[\n                styles.progressText,\n                { color: hasSignature ? Colors.success : Colors.textMuted }\n              ]}>\n                Signature\n              </Text>\n            </View>\n          </View>\n        </View>\n      )}\n\n      {/* Job Details */}\n      <View style={styles.jobDetails}>\n        <View style={styles.detailRow}>\n          <Icons.Calendar size={14} color={Colors.textMuted} />\n          <Text style={styles.detailText}>\n            {new Date(job.createdAt).toLocaleDateString()}\n          </Text>\n        </View>\n        \n        {job.location && (\n          <View style={styles.detailRow}>\n            <Icons.MapPin size={14} color={Colors.textMuted} />\n            <Text style={styles.detailText}>\n              {job.location.address || 'Location provided'}\n            </Text>\n          </View>\n        )}\n        \n        <View style={styles.detailRow}>\n          <Icons.Clock size={14} color={Colors.textMuted} />\n          <Text style={styles.detailText}>\n            Urgency: {job.urgency}\n          </Text>\n        </View>\n\n        {/* Work Time Summary */}\n        {hasWorkLogs && (\n          <View style={styles.detailRow}>\n            <Icons.Timer size={14} color={Colors.mechanic} />\n            <Text style={styles.detailText}>\n              Total time: {Math.round(jobLogs.reduce((total, log) => {\n                if (log.endTime) {\n                  return total + (log.endTime.getTime() - log.startTime.getTime()) / (1000 * 60);\n                }\n                return total;\n              }, 0))} minutes\n            </Text>\n          </View>\n        )}\n      </View>\n\n      {/* Action Buttons */}\n      <View style={styles.jobActions}>\n        <TouchableOpacity \n          style={styles.chatButton}\n          onPress={() => onOpenChat(job.id)}\n        >\n          <Icons.MessageCircle size={16} color={Colors.primary} />\n          <Text style={styles.chatButtonText}>Chat</Text>\n        </TouchableOpacity>\n\n        {job.status === 'pending' || job.status === 'quoted' ? (\n          <TouchableOpacity \n            style={styles.claimButton}\n            onPress={() => onClaimJob(job.id)}\n          >\n            <Text style={styles.claimButtonText}>Claim Job</Text>\n          </TouchableOpacity>\n        ) : job.status === 'accepted' || job.status === 'in_progress' ? (\n          <>\n            {!hasToolsCheck && (\n              <TouchableOpacity \n                style={styles.toolsButton}\n                onPress={() => onOpenToolsCheck(job.id)}\n              >\n                <Icons.Wrench size={16} color={Colors.mechanic} />\n                <Text style={styles.toolsButtonText}>Tools</Text>\n              </TouchableOpacity>\n            )}\n            \n            <TouchableOpacity \n              style={[\n                styles.timerButton,\n                activeTimer && styles.activeTimerButton\n              ]}\n              onPress={() => onOpenTimer(job.id)}\n            >\n              <Icons.Timer size={16} color={activeTimer ? Colors.white : Colors.mechanic} />\n              <Text style={[\n                styles.timerButtonText,\n                activeTimer && styles.activeTimerButtonText\n              ]}>\n                {activeTimer ? 'Timer Active' : 'Timer'}\n              </Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={[\n                styles.completeButton,\n                !canComplete && styles.disabledButton\n              ]}\n              onPress={() => onCompleteJob(job.id)}\n              disabled={!canComplete}\n            >\n              <Text style={[\n                styles.completeButtonText,\n                !canComplete && styles.disabledButtonText\n              ]}>\n                Complete\n              </Text>\n            </TouchableOpacity>\n          </>\n        ) : null}\n      </View>\n\n      {/* Completion Requirements */}\n      {(job.status === 'accepted' || job.status === 'in_progress') && !canComplete && (\n        <View style={styles.requirementsSection}>\n          <Text style={styles.requirementsTitle}>To complete this job:</Text>\n          <View style={styles.requirements}>\n            {!hasToolsCheck && (\n              <Text style={styles.requirementText}>• Complete tools check</Text>\n            )}\n            {!hasWorkLogs && (\n              <Text style={styles.requirementText}>• Log work time using timer</Text>\n            )}\n            {!hasSignature && (\n              <Text style={styles.requirementText}>• Get customer signature</Text>\n            )}\n            {activeTimer && (\n              <Text style={styles.requirementText}>• Stop active timer</Text>\n            )}\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  mechanicHeader: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  mechanicName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  mechanicSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  tabContainer: {\n    flexDirection: 'row',\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  tab: {\n    flex: 1,\n    paddingVertical: 16,\n    paddingHorizontal: 12,\n    alignItems: 'center',\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: Colors.mechanic,\n  },\n  tabText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  activeTabText: {\n    color: Colors.mechanic,\n    fontWeight: '600',\n  },\n  jobsList: {\n    flex: 1,\n  },\n  content: {\n    padding: 16,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n    marginTop: 100,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  chatHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  timerHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  signatureHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  toolsHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  backButton: {\n    marginRight: 12,\n  },\n  chatHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  timerHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  signatureHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  toolsHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  toolsContent: {\n    flex: 1,\n    padding: 16,\n  },\n  toolsSection: {\n    marginBottom: 24,\n  },\n  toolsSectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  toolItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 8,\n    marginBottom: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  toolItemChecked: {\n    borderColor: Colors.success,\n    backgroundColor: Colors.success + '10',\n  },\n  toolItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  toolCheckbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: Colors.border,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  toolCheckboxChecked: {\n    backgroundColor: Colors.success,\n    borderColor: Colors.success,\n  },\n  toolInfo: {\n    flex: 1,\n  },\n  toolName: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  toolDescription: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  toolBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  toolBadgeText: {\n    fontSize: 10,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n  },\n  completeToolsButton: {\n    backgroundColor: Colors.success,\n    padding: 16,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  completeToolsButtonText: {\n    color: Colors.white,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  jobCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  jobTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    gap: 8,\n  },\n  jobTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'capitalize',\n  },\n  jobDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  aiDiagnosisPreview: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n    backgroundColor: Colors.primary + '10',\n    padding: 8,\n    borderRadius: 6,\n    marginBottom: 12,\n  },\n  aiDiagnosisText: {\n    flex: 1,\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '500',\n  },\n  progressSection: {\n    marginBottom: 12,\n  },\n  progressTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  progressIndicators: {\n    flexDirection: 'row',\n    gap: 16,\n  },\n  progressItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  progressIcon: {\n    padding: 4,\n    borderRadius: 4,\n  },\n  progressText: {\n    fontSize: 11,\n    fontWeight: '500',\n  },\n  activeIndicator: {\n    backgroundColor: Colors.mechanic,\n    paddingHorizontal: 4,\n    paddingVertical: 1,\n    borderRadius: 3,\n    marginLeft: 4,\n  },\n  activeText: {\n    fontSize: 8,\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  jobDetails: {\n    gap: 6,\n    marginBottom: 16,\n  },\n  detailRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 6,\n  },\n  detailText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  jobActions: {\n    flexDirection: 'row',\n    gap: 8,\n    flexWrap: 'wrap',\n  },\n  chatButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  chatButtonText: {\n    color: Colors.primary,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  toolsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  toolsButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  timerButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  activeTimerButton: {\n    backgroundColor: Colors.mechanic,\n    borderColor: Colors.mechanic,\n  },\n  timerButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  activeTimerButtonText: {\n    color: Colors.white,\n  },\n  claimButton: {\n    flex: 1,\n    backgroundColor: Colors.mechanic,\n    paddingVertical: 10,\n    borderRadius: 6,\n    alignItems: 'center',\n  },\n  claimButtonText: {\n    color: Colors.white,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  completeButton: {\n    flex: 1,\n    backgroundColor: Colors.success,\n    paddingVertical: 10,\n    borderRadius: 6,\n    alignItems: 'center',\n  },\n  completeButtonText: {\n    color: Colors.white,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n  disabledButton: {\n    backgroundColor: Colors.textMuted,\n  },\n  disabledButtonText: {\n    color: Colors.white,\n    opacity: 0.7,\n  },\n  requirementsSection: {\n    marginTop: 12,\n    padding: 8,\n    backgroundColor: Colors.warning + '10',\n    borderRadius: 6,\n    borderWidth: 1,\n    borderColor: Colors.warning + '30',\n  },\n  requirementsTitle: {\n    fontSize: 11,\n    fontWeight: '600',\n    color: Colors.warning,\n    marginBottom: 4,\n  },\n  requirements: {\n    gap: 2,\n  },\n  requirementText: {\n    fontSize: 10,\n    color: Colors.warning,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +519 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport { MaintenanceReminders } from '@/components/MaintenanceReminders';\nimport * as Icons from 'lucide-react-native';\n\nexport default function MechanicDashboardScreen() {\n  const { serviceRequests, quotes, getTotalRevenue, getQuotesByStatus, logEvent } = useAppStore();\n  const { user, logout } = useAuthStore();\n\n  // Production: Filter jobs for Cody only\n  const mechanicId = 'mechanic-cody';\n  const mechanicJobs = serviceRequests.filter(job => {\n    // Only show jobs assigned to Cody or unassigned jobs\n    return !job.assignedMechanicId || job.assignedMechanicId === mechanicId;\n  });\n\n  const pendingJobs = mechanicJobs.filter(r => r.status === 'pending').length;\n  const activeJobs = mechanicJobs.filter(r => ['quoted', 'accepted', 'in_progress'].includes(r.status)).length;\n  const completedToday = mechanicJobs.filter(r => \n    r.status === 'completed' && \n    new Date(r.createdAt).toDateString() === new Date().toDateString()\n  ).length;\n\n  // Calculate today's revenue\n  const today = new Date();\n  const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n  const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n  const todayRevenue = getTotalRevenue(startOfDay, endOfDay);\n\n  // Calculate weekly stats\n  const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n  const weeklyRevenue = getTotalRevenue(weekAgo);\n  const weeklyJobs = mechanicJobs.filter(r => \n    r.status === 'completed' && \n    new Date(r.createdAt) >= weekAgo\n  ).length;\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const recentJobs = mechanicJobs\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5);\n\n  const handleQuickAction = (action: string) => {\n    logEvent('dashboard_action', { action, mechanicId });\n    \n    switch (action) {\n      case 'jobs':\n        router.push('/jobs');\n        break;\n      case 'map':\n        router.push('/map');\n        break;\n      case 'customers':\n        router.push('/customers');\n        break;\n    }\n  };\n\n  const handleLogout = () => {\n    logEvent('mechanic_logout', { mechanicId });\n    logout();\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View>\n            <Text style={styles.welcomeText}>Welcome back, Cody!</Text>\n            <Text style={styles.subtitle}>\n              Mobile Mechanic Dashboard - Production\n            </Text>\n            <View style={styles.productionBadge}>\n              <Text style={styles.productionBadgeText}>LIVE MODE</Text>\n            </View>\n          </View>\n          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n            <Icons.LogOut size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n\n        {/* Stats Grid */}\n        <View style={styles.statsSection}>\n          <View style={styles.statsGrid}>\n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>{pendingJobs}</Text>\n              <Text style={styles.statLabel}>Pending Jobs</Text>\n              <Icons.Clock size={16} color={Colors.warning} />\n            </View>\n            \n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>{activeJobs}</Text>\n              <Text style={styles.statLabel}>Active Jobs</Text>\n              <Icons.Wrench size={16} color={Colors.mechanic} />\n            </View>\n            \n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>{completedToday}</Text>\n              <Text style={styles.statLabel}>Completed Today</Text>\n              <Icons.CheckCircle size={16} color={Colors.success} />\n            </View>\n            \n            <View style={styles.statCard}>\n              <Text style={styles.statNumber}>${todayRevenue}</Text>\n              <Text style={styles.statLabel}>Today's Revenue</Text>\n              <Icons.DollarSign size={16} color={Colors.primary} />\n            </View>\n          </View>\n        </View>\n\n        {/* Weekly Performance */}\n        <View style={styles.performanceSection}>\n          <Text style={styles.sectionTitle}>Weekly Performance</Text>\n          <View style={styles.performanceGrid}>\n            <View style={styles.performanceCard}>\n              <View style={styles.performanceHeader}>\n                <Icons.TrendingUp size={20} color={Colors.success} />\n                <Text style={styles.performanceTitle}>Revenue</Text>\n              </View>\n              <Text style={styles.performanceValue}>${weeklyRevenue}</Text>\n              <Text style={styles.performanceSubtext}>Last 7 days</Text>\n            </View>\n            \n            <View style={styles.performanceCard}>\n              <View style={styles.performanceHeader}>\n                <Icons.CheckSquare size={20} color={Colors.primary} />\n                <Text style={styles.performanceTitle}>Jobs Completed</Text>\n              </View>\n              <Text style={styles.performanceValue}>{weeklyJobs}</Text>\n              <Text style={styles.performanceSubtext}>Last 7 days</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Maintenance Reminders */}\n        <MaintenanceReminders />\n\n        {/* Quick Actions */}\n        <View style={styles.quickActionsSection}>\n          <Text style={styles.sectionTitle}>Quick Actions</Text>\n          <View style={styles.quickActionsGrid}>\n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => handleQuickAction('jobs')}\n            >\n              <Icons.Briefcase size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>Manage Jobs</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => handleQuickAction('map')}\n            >\n              <Icons.Map size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>View Map</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => handleQuickAction('customers')}\n            >\n              <Icons.Users size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>Customers</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity \n              style={styles.quickActionCard}\n              onPress={() => router.push('/profile')}\n            >\n              <Icons.Settings size={24} color={Colors.mechanic} />\n              <Text style={styles.quickActionText}>Settings</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Recent Jobs */}\n        <View style={styles.recentJobsSection}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Recent Jobs</Text>\n            <TouchableOpacity onPress={() => handleQuickAction('jobs')}>\n              <Text style={styles.viewAllText}>View All</Text>\n            </TouchableOpacity>\n          </View>\n          \n          {recentJobs.length === 0 ? (\n            <View style={styles.emptyJobs}>\n              <Icons.Briefcase size={48} color={Colors.textMuted} />\n              <Text style={styles.emptyText}>No recent jobs</Text>\n              <Text style={styles.emptySubtext}>\n                Jobs will appear here when customers request services\n              </Text>\n            </View>\n          ) : (\n            <View style={styles.jobsList}>\n              {recentJobs.map((job) => (\n                <TouchableOpacity \n                  key={job.id} \n                  style={styles.jobCard}\n                  onPress={() => router.push('/jobs')}\n                >\n                  <View style={styles.jobHeader}>\n                    <Text style={styles.jobTitle}>{getServiceTitle(job.type)}</Text>\n                    <View style={[styles.jobStatus, { backgroundColor: getStatusColor(job.status) + '20' }]}>\n                      <Text style={[styles.jobStatusText, { color: getStatusColor(job.status) }]}>\n                        {job.status.replace('_', ' ')}\n                      </Text>\n                    </View>\n                  </View>\n                  \n                  <Text style={styles.jobDescription} numberOfLines={2}>\n                    {job.description}\n                  </Text>\n                  \n                  <View style={styles.jobMeta}>\n                    <Text style={styles.jobDate}>\n                      {new Date(job.createdAt).toLocaleDateString()}\n                    </Text>\n                    {job.urgency === 'emergency' && (\n                      <View style={styles.urgencyBadge}>\n                        <Icons.AlertTriangle size={12} color={Colors.error} />\n                        <Text style={styles.urgencyText}>Emergency</Text>\n                      </View>\n                    )}\n                  </View>\n                </TouchableOpacity>\n              ))}\n            </View>\n          )}\n        </View>\n\n        {/* Production Info */}\n        <View style={styles.productionInfo}>\n          <Text style={styles.productionInfoTitle}>Production Environment</Text>\n          <Text style={styles.productionInfoText}>\n            Mechanic: Cody Owner (Owner Operator)\n          </Text>\n          <Text style={styles.productionInfoText}>\n            Total Jobs: {mechanicJobs.length}\n          </Text>\n          <Text style={styles.productionInfoText}>\n            System Status: Live\n          </Text>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case 'pending': return Colors.warning;\n    case 'quoted': return Colors.primary;\n    case 'accepted': return Colors.success;\n    case 'in_progress': return Colors.mechanic;\n    case 'completed': return Colors.success;\n    default: return Colors.textMuted;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 24,\n  },\n  welcomeText: {\n    fontSize: 28,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  productionBadge: {\n    backgroundColor: Colors.success,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n    alignSelf: 'flex-start',\n  },\n  productionBadgeText: {\n    fontSize: 12,\n    color: Colors.white,\n    fontWeight: '600',\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  statsSection: {\n    marginBottom: 24,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    minWidth: '48%',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  performanceSection: {\n    marginBottom: 24,\n  },\n  performanceGrid: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  performanceCard: {\n    flex: 1,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  performanceHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  performanceTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  performanceValue: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  performanceSubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  quickActionsSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  quickActionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  quickActionCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    width: '48%',\n    minHeight: 80,\n    justifyContent: 'center',\n  },\n  quickActionText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  recentJobsSection: {\n    marginBottom: 24,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  viewAllText: {\n    fontSize: 14,\n    color: Colors.mechanic,\n    fontWeight: '500',\n  },\n  emptyJobs: {\n    alignItems: 'center',\n    padding: 32,\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginTop: 12,\n    marginBottom: 4,\n  },\n  emptySubtext: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n  },\n  jobsList: {\n    gap: 12,\n  },\n  jobCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  jobHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  jobTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    flex: 1,\n  },\n  jobStatus: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  jobStatusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'capitalize',\n  },\n  jobDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  jobMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  jobDate: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  urgencyBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n    backgroundColor: Colors.error + '20',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  urgencyText: {\n    fontSize: 10,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  productionInfo: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    marginTop: 20,\n  },\n  productionInfoTitle: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  productionInfoText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginBottom: 4,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +409 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, TextInput } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport * as Icons from 'lucide-react-native';\n\nexport default function MechanicCustomersScreen() {\n  const { serviceRequests, quotes } = useAppStore();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Group requests by customer (using a simple approach for demo)\n  const customerData = serviceRequests.reduce((acc, request) => {\n    const customerId = `customer-${request.id.slice(0, 3)}`; // Mock customer grouping\n    const customerName = `Customer ${request.id.slice(0, 3)}`;\n    \n    if (!acc[customerId]) {\n      acc[customerId] = {\n        id: customerId,\n        name: customerName,\n        email: `${customerName.toLowerCase().replace(' ', '')}@example.com`,\n        phone: '(555) 123-4567',\n        requests: [],\n        totalSpent: 0,\n        lastService: new Date(request.createdAt),\n      };\n    }\n    \n    acc[customerId].requests.push(request);\n    \n    // Calculate total spent\n    const customerQuotes = quotes.filter(q => q.serviceRequestId === request.id && q.status === 'accepted');\n    acc[customerId].totalSpent += customerQuotes.reduce((sum, q) => sum + q.totalCost, 0);\n    \n    // Update last service date\n    if (new Date(request.createdAt) > acc[customerId].lastService) {\n      acc[customerId].lastService = new Date(request.createdAt);\n    }\n    \n    return acc;\n  }, {} as Record<string, any>);\n\n  const customers = Object.values(customerData).filter(customer =>\n    customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  if (customers.length === 0 && searchQuery === '') {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.Users size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Customers Yet</Text>\n        <Text style={styles.emptyText}>\n          Customer information will appear here once you start serving clients.\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      {/* Search Bar */}\n      <View style={styles.searchContainer}>\n        <Icons.Search size={20} color={Colors.textMuted} />\n        <TextInput\n          style={styles.searchInput}\n          value={searchQuery}\n          onChangeText={setSearchQuery}\n          placeholder=\"Search customers...\"\n          placeholderTextColor={Colors.textMuted}\n        />\n      </View>\n\n      {/* Customers List */}\n      <ScrollView style={styles.customersList} showsVerticalScrollIndicator={false}>\n        {customers.length === 0 ? (\n          <View style={styles.noResultsContainer}>\n            <Text style={styles.noResultsText}>No customers found</Text>\n          </View>\n        ) : (\n          customers.map((customer) => (\n            <CustomerCard key={customer.id} customer={customer} getServiceTitle={getServiceTitle} />\n          ))\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\ninterface CustomerCardProps {\n  customer: any;\n  getServiceTitle: (type: string) => string;\n}\n\nfunction CustomerCard({ customer, getServiceTitle }: CustomerCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <View style={styles.customerCard}>\n      <TouchableOpacity \n        style={styles.customerHeader}\n        onPress={() => setIsExpanded(!isExpanded)}\n      >\n        <View style={styles.customerInfo}>\n          <View style={styles.customerAvatar}>\n            <Text style={styles.customerInitials}>\n              {customer.name.split(' ').map((n: string) => n[0]).join('')}\n            </Text>\n          </View>\n          \n          <View style={styles.customerDetails}>\n            <Text style={styles.customerName}>{customer.name}</Text>\n            <Text style={styles.customerEmail}>{customer.email}</Text>\n            <Text style={styles.customerPhone}>{customer.phone}</Text>\n          </View>\n        </View>\n        \n        <View style={styles.customerStats}>\n          <Text style={styles.statValue}>${customer.totalSpent}</Text>\n          <Text style={styles.statLabel}>Total Spent</Text>\n          <Text style={styles.serviceCount}>{customer.requests.length} services</Text>\n        </View>\n        \n        <Icons.ChevronDown \n          size={20} \n          color={Colors.textMuted}\n          style={[styles.expandIcon, isExpanded && styles.expandIconRotated]}\n        />\n      </TouchableOpacity>\n\n      {isExpanded && (\n        <View style={styles.customerExpanded}>\n          <View style={styles.expandedHeader}>\n            <Text style={styles.expandedTitle}>Service History</Text>\n            <Text style={styles.lastService}>\n              Last service: {customer.lastService.toLocaleDateString()}\n            </Text>\n          </View>\n          \n          <View style={styles.serviceHistory}>\n            {customer.requests.slice(0, 3).map((request: any) => (\n              <View key={request.id} style={styles.serviceItem}>\n                <View style={styles.serviceInfo}>\n                  <Text style={styles.serviceName}>{getServiceTitle(request.type)}</Text>\n                  <Text style={styles.serviceDate}>\n                    {new Date(request.createdAt).toLocaleDateString()}\n                  </Text>\n                </View>\n                <View style={[styles.serviceStatus, { backgroundColor: getStatusColor(request.status) + '20' }]}>\n                  <Text style={[styles.serviceStatusText, { color: getStatusColor(request.status) }]}>\n                    {request.status.replace('_', ' ')}\n                  </Text>\n                </View>\n              </View>\n            ))}\n            \n            {customer.requests.length > 3 && (\n              <Text style={styles.moreServices}>\n                +{customer.requests.length - 3} more services\n              </Text>\n            )}\n          </View>\n          \n          <View style={styles.customerActions}>\n            <TouchableOpacity style={styles.actionButton}>\n              <Icons.Phone size={16} color={Colors.mechanic} />\n              <Text style={styles.actionButtonText}>Call</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity style={styles.actionButton}>\n              <Icons.MessageCircle size={16} color={Colors.mechanic} />\n              <Text style={styles.actionButtonText}>Message</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity style={styles.actionButton}>\n              <Icons.Mail size={16} color={Colors.mechanic} />\n              <Text style={styles.actionButtonText}>Email</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n    </View>\n  );\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case 'pending': return Colors.warning;\n    case 'quoted': return Colors.primary;\n    case 'accepted': return Colors.success;\n    case 'in_progress': return Colors.mechanic;\n    case 'completed': return Colors.success;\n    default: return Colors.textMuted;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    margin: 16,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    gap: 12,\n  },\n  searchInput: {\n    flex: 1,\n    color: Colors.text,\n    fontSize: 16,\n  },\n  customersList: {\n    flex: 1,\n    paddingHorizontal: 16,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  noResultsContainer: {\n    alignItems: 'center',\n    padding: 40,\n  },\n  noResultsText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n  },\n  customerCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    marginBottom: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  customerHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n  },\n  customerInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n  customerAvatar: {\n    width: 48,\n    height: 48,\n    borderRadius: 24,\n    backgroundColor: Colors.mechanic + '20',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  customerInitials: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.mechanic,\n  },\n  customerDetails: {\n    flex: 1,\n  },\n  customerName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  customerEmail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 2,\n  },\n  customerPhone: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  customerStats: {\n    alignItems: 'flex-end',\n    marginRight: 12,\n  },\n  statValue: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: Colors.text,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n  },\n  serviceCount: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginTop: 2,\n  },\n  expandIcon: {\n    transform: [{ rotate: '0deg' }],\n  },\n  expandIconRotated: {\n    transform: [{ rotate: '180deg' }],\n  },\n  customerExpanded: {\n    borderTopWidth: 1,\n    borderTopColor: Colors.border,\n    padding: 16,\n  },\n  expandedHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  expandedTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  lastService: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  serviceHistory: {\n    marginBottom: 16,\n  },\n  serviceItem: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  serviceInfo: {\n    flex: 1,\n  },\n  serviceName: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 2,\n  },\n  serviceDate: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  serviceStatus: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  serviceStatusText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'capitalize',\n  },\n  moreServices: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    textAlign: 'center',\n    marginTop: 8,\n    fontStyle: 'italic',\n  },\n  customerActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.mechanic + '20',\n    borderWidth: 1,\n    borderColor: Colors.mechanic,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  actionButtonText: {\n    color: Colors.mechanic,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +82 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { Tabs, Redirect } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { useAuthStore } from '@/stores/auth-store';\nimport * as Icons from 'lucide-react-native';\n\nfunction TabBarIcon({ name, color }: { name: keyof typeof Icons; color: string }) {\n  const IconComponent = Icons[name] as any;\n  return IconComponent ? <IconComponent size={24} color={color} /> : null;\n}\n\nexport default function MechanicTabLayout() {\n  const { user, isAuthenticated } = useAuthStore();\n\n  // Production security: Only allow Cody as mechanic\n  if (!isAuthenticated || !user || user.role !== 'mechanic' || user.id !== 'mechanic-cody') {\n    console.warn('Unauthorized mechanic access attempt:', { \n      isAuthenticated, \n      userId: user?.id, \n      role: user?.role,\n      timestamp: new Date().toISOString() \n    });\n    return <Redirect href=\"/auth\" />;\n  }\n\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: Colors.mechanic,\n        tabBarInactiveTintColor: Colors.textMuted,\n        tabBarStyle: {\n          backgroundColor: Colors.surface,\n          borderTopColor: Colors.border,\n          borderTopWidth: 1,\n        },\n        headerStyle: {\n          backgroundColor: Colors.background,\n        },\n        headerTintColor: Colors.text,\n        headerTitleStyle: {\n          fontWeight: '600',\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Dashboard',\n          headerTitle: 'Mechanic Dashboard',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"LayoutDashboard\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"jobs\"\n        options={{\n          title: 'Jobs',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Briefcase\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"map\"\n        options={{\n          title: 'Map',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Map\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"customers\"\n        options={{\n          title: 'Customers',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Users\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Settings\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}"
            }
          }
        },
        {
          "display": "https://github.com/GrizzlyRooster34/mobile-mechanic-app",
          "pastedContents": {}
        },
        {
          "display": "CAN YOU PUSH THIS CODE SO FAR TO MY GITHUB REPO",
          "pastedContents": {}
        },
        {
          "display": "none, can you still see the code ive added from pasting it in?",
          "pastedContents": {}
        },
        {
          "display": "mobile mechanic app",
          "pastedContents": {}
        },
        {
          "display": "can you access my github repo",
          "pastedContents": {}
        },
        {
          "display": "“Open a PR with this fix and reference issue #23”",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +253 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { AvailabilityCalendar } from '@/components/AvailabilityCalendar';\nimport { useAppStore } from '@/stores/app-store';\nimport { router } from 'expo-router';\nimport * as Icons from 'lucide-react-native';\n\nexport default function ScheduleScreen() {\n  const { serviceRequests, updateServiceRequest } = useAppStore();\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [selectedTime, setSelectedTime] = useState<string>('');\n\n  const pendingRequests = serviceRequests.filter(r => \n    r.status === 'accepted' && !r.scheduledAt\n  );\n\n  const handleDateTimeSelect = (date: Date, timeSlot: string) => {\n    setSelectedDate(date);\n    setSelectedTime(timeSlot);\n  };\n\n  const handleScheduleConfirm = () => {\n    if (!selectedDate || !selectedTime || pendingRequests.length === 0) {\n      Alert.alert('Error', 'Please select a date and time for scheduling.');\n      return;\n    }\n\n    const scheduledDateTime = new Date(selectedDate);\n    const [time, period] = selectedTime.split(' ');\n    const [hours, minutes] = time.split(':').map(Number);\n    \n    let adjustedHours = hours;\n    if (period === 'PM' && hours !== 12) {\n      adjustedHours += 12;\n    } else if (period === 'AM' && hours === 12) {\n      adjustedHours = 0;\n    }\n    \n    scheduledDateTime.setHours(adjustedHours, minutes || 0, 0, 0);\n\n    // Schedule the first pending request\n    const requestToSchedule = pendingRequests[0];\n    updateServiceRequest(requestToSchedule.id, {\n      scheduledAt: scheduledDateTime,\n      status: 'in_progress'\n    });\n\n    Alert.alert(\n      'Service Scheduled',\n      `Your service has been scheduled for ${selectedDate.toLocaleDateString()} at ${selectedTime}`,\n      [\n        { text: 'OK', onPress: () => router.back() }\n      ]\n    );\n  };\n\n  if (pendingRequests.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.Calendar size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Services to Schedule</Text>\n        <Text style={styles.emptyText}>\n          You don't have any accepted services that need scheduling.\n        </Text>\n        <Button\n          title=\"View My Quotes\"\n          onPress={() => router.push('/quotes')}\n          style={styles.emptyButton}\n        />\n      </View>\n    );\n  }\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* Service Info */}\n        <View style={styles.serviceInfo}>\n          <Text style={styles.serviceTitle}>Schedule Your Service</Text>\n          <Text style={styles.serviceDescription}>\n            Select your preferred date and time for the service appointment.\n          </Text>\n          \n          <View style={styles.serviceCard}>\n            <Text style={styles.serviceName}>\n              {pendingRequests[0].type.replace('_', ' ').toUpperCase()}\n            </Text>\n            <Text style={styles.serviceDetails}>\n              {pendingRequests[0].description}\n            </Text>\n          </View>\n        </View>\n\n        {/* Calendar */}\n        <View style={styles.calendarSection}>\n          <Text style={styles.sectionTitle}>Select Date & Time</Text>\n          <AvailabilityCalendar\n            onDateSelect={handleDateTimeSelect}\n            selectedDate={selectedDate || undefined}\n            selectedTime={selectedTime}\n          />\n        </View>\n\n        {/* Selected DateTime Display */}\n        {selectedDate && selectedTime && (\n          <View style={styles.selectedDateTime}>\n            <Icons.Calendar size={20} color={Colors.success} />\n            <Text style={styles.selectedDateTimeText}>\n              {selectedDate.toLocaleDateString()} at {selectedTime}\n            </Text>\n          </View>\n        )}\n\n        {/* Confirm Button */}\n        <Button\n          title=\"Confirm Appointment\"\n          onPress={handleScheduleConfirm}\n          disabled={!selectedDate || !selectedTime}\n          style={styles.confirmButton}\n        />\n\n        {/* Service Notes */}\n        <View style={styles.serviceNotes}>\n          <Text style={styles.notesTitle}>Service Notes</Text>\n          <Text style={styles.notesText}>\n            • Our mechanic will arrive at your location at the scheduled time\n          </Text>\n          <Text style={styles.notesText}>\n            • Please ensure your vehicle is accessible\n          </Text>\n          <Text style={styles.notesText}>\n            • You'll receive a confirmation and reminder notifications\n          </Text>\n          <Text style={styles.notesText}>\n            • Contact us if you need to reschedule\n          </Text>\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n    marginBottom: 24,\n  },\n  emptyButton: {\n    minWidth: 200,\n  },\n  serviceInfo: {\n    marginBottom: 24,\n  },\n  serviceTitle: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  serviceDescription: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 16,\n    lineHeight: 22,\n  },\n  serviceCard: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  serviceName: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  serviceDetails: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    lineHeight: 20,\n  },\n  calendarSection: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  selectedDateTime: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.success + '20',\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 24,\n    gap: 8,\n  },\n  selectedDateTimeText: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.success,\n  },\n  confirmButton: {\n    marginBottom: 24,\n  },\n  serviceNotes: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  notesTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  notesText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 6,\n    lineHeight: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +882 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TextInput, Alert, Modal } from 'react-native';\nimport { useLocalSearchParams, router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { SERVICE_CATEGORIES, getToolsForService, getRequiredToolsForService } from '@/constants/services';\nimport { SERVICE_PRICING } from '@/constants/pricing';\nimport { Button } from '@/components/Button';\nimport { PhotoUpload } from '@/components/PhotoUpload';\nimport { VinScanner } from '@/components/VinScanner';\nimport { AIAssistant } from '@/components/AIAssistant';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { ServiceRequest, ServiceType, DiagnosticResult, Vehicle } from '@/types/service';\nimport { generateSmartQuote } from '@/utils/quote-generator';\nimport { ENV_CONFIG, logProductionEvent } from '@/utils/firebase-config';\nimport * as Location from 'expo-location';\nimport { Platform } from 'react-native';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerRequestScreen() {\n  const params = useLocalSearchParams();\n  const { addServiceRequest, addQuote, vehicles, currentLocation, setCurrentLocation, updateServiceRequest, addVehicle, logEvent } = useAppStore();\n  const { user } = useAuthStore();\n  \n  const [selectedService, setSelectedService] = useState<ServiceType | null>(\n    params.serviceType as ServiceType || null\n  );\n  const [description, setDescription] = useState(params.symptoms as string || '');\n  const [photos, setPhotos] = useState<string[]>([]);\n  const [urgency, setUrgency] = useState<'low' | 'medium' | 'high' | 'emergency'>(\n    params.urgent === 'true' ? 'emergency' : 'medium'\n  );\n  const [selectedParts, setSelectedParts] = useState<string[]>([]);\n  const [showVinScanner, setShowVinScanner] = useState(false);\n  const [vinNumber, setVinNumber] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiDiagnosis, setAiDiagnosis] = useState<DiagnosticResult | undefined>(\n    params.aiDiagnosis ? JSON.parse(params.aiDiagnosis as string) : undefined\n  );\n  const [showAIAssistant, setShowAIAssistant] = useState(false);\n  const [selectedVehicle, setSelectedVehicle] = useState<Vehicle | null>(null);\n\n  useEffect(() => {\n    getCurrentLocation();\n  }, []);\n\n  useEffect(() => {\n    // Set selected vehicle from params or default to first vehicle\n    if (params.vehicleId) {\n      const vehicle = vehicles.find(v => v.id === params.vehicleId);\n      if (vehicle) {\n        setSelectedVehicle(vehicle);\n      }\n    } else if (vehicles.length > 0 && !selectedVehicle) {\n      setSelectedVehicle(vehicles[0]);\n    }\n  }, [vehicles, params.vehicleId]);\n\n  useEffect(() => {\n    // Auto-generate quote if requested\n    if (params.autoQuote === 'true' && selectedService && description && selectedVehicle) {\n      // Small delay to ensure UI is ready\n      setTimeout(() => {\n        handleSubmit();\n      }, 500);\n    }\n  }, [params.autoQuote, selectedService, description, selectedVehicle]);\n\n  const getCurrentLocation = async () => {\n    if (Platform.OS === 'web') {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            setCurrentLocation({\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n            });\n          },\n          (error) => console.log('Location error:', error)\n        );\n      }\n      return;\n    }\n\n    try {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') {\n        Alert.alert('Permission denied', 'Location permission is required to provide service at your location.');\n        return;\n      }\n\n      const location = await Location.getCurrentPositionAsync({});\n      const address = await Location.reverseGeocodeAsync({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n      });\n\n      setCurrentLocation({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        address: address[0] ? `${address[0].street}, ${address[0].city}` : undefined,\n      });\n    } catch (error) {\n      console.log('Location error:', error);\n    }\n  };\n\n  const handleVinScanned = (vinData: any) => {\n    setVinNumber(vinData.vin);\n    setShowVinScanner(false);\n    \n    // Production logging\n    logProductionEvent('vin_scanned', {\n      vin: vinData.vin,\n      make: vinData.make,\n      model: vinData.model,\n      year: vinData.year\n    });\n    \n    // Auto-create vehicle if it doesn't exist\n    const existingVehicle = vehicles.find(v => v.vin === vinData.vin);\n    if (!existingVehicle) {\n      Alert.alert(\n        'Vehicle Decoded',\n        `${vinData.year} ${vinData.make} ${vinData.model}\nVIN: ${vinData.vin}\n\nWould you like to add this vehicle to your profile?`,\n        [\n          { text: 'Skip', style: 'cancel' },\n          { \n            text: 'Add Vehicle', \n            onPress: () => {\n              const newVehicle: Vehicle = {\n                id: Date.now().toString(),\n                make: vinData.make,\n                model: vinData.model,\n                year: vinData.year,\n                vin: vinData.vin,\n                trim: vinData.trim,\n                engine: vinData.engine,\n                mileage: 0, // User can update this later\n              };\n              addVehicle(newVehicle);\n              setSelectedVehicle(newVehicle);\n              Alert.alert('Vehicle Added', 'Vehicle has been added to your profile.');\n            }\n          }\n        ]\n      );\n    } else {\n      setSelectedVehicle(existingVehicle);\n      Alert.alert('Vehicle Found', 'This vehicle is already in your profile.');\n    }\n  };\n\n  const handleAIDiagnosis = (diagnosis: DiagnosticResult) => {\n    setAiDiagnosis(diagnosis);\n    \n    // Production logging\n    logProductionEvent('ai_diagnosis_completed', {\n      diagnosisId: diagnosis.id,\n      confidence: diagnosis.confidence,\n      urgencyLevel: diagnosis.urgencyLevel,\n      vehicleMake: selectedVehicle?.make,\n      vehicleModel: selectedVehicle?.model\n    });\n    \n    // Auto-fill description if empty\n    if (!description.trim() && diagnosis.likelyCauses.length > 0) {\n      setDescription(`AI Analysis suggests: ${diagnosis.likelyCauses[0]}. ${diagnosis.diagnosticSteps[0] || ''}`);\n    }\n    \n    // Set urgency based on AI recommendation\n    setUrgency(diagnosis.urgencyLevel);\n    \n    // Try to match AI services to our service types\n    const matchedService = matchAIServiceToType(diagnosis.matchedServices);\n    if (matchedService && !selectedService) {\n      setSelectedService(matchedService);\n    }\n  };\n\n  const matchAIServiceToType = (aiServices: string[]): ServiceType | null => {\n    const serviceMap: Record<string, ServiceType> = {\n      'oil': 'oil_change',\n      'brake': 'brake_service',\n      'tire': 'tire_service',\n      'battery': 'battery_service',\n      'engine': 'engine_diagnostic',\n      'transmission': 'transmission',\n      'air conditioning': 'ac_service',\n      'a/c': 'ac_service',\n      'diagnostic': 'engine_diagnostic',\n    };\n\n    for (const aiService of aiServices) {\n      const lowerService = aiService.toLowerCase();\n      for (const [keyword, serviceType] of Object.entries(serviceMap)) {\n        if (lowerService.includes(keyword)) {\n          return serviceType;\n        }\n      }\n    }\n    \n    return 'general_repair';\n  };\n\n  const handleSubmit = async () => {\n    if (!selectedService) {\n      Alert.alert('Error', 'Please select a service type.');\n      return;\n    }\n\n    if (!description.trim()) {\n      Alert.alert('Error', 'Please provide a description of the issue.');\n      return;\n    }\n\n    if (!user) {\n      Alert.alert('Error', 'Please log in to submit a request.');\n      return;\n    }\n\n    if (!selectedVehicle) {\n      Alert.alert('Vehicle Required', 'Please select or add a vehicle first.', [\n        { text: 'Add Vehicle', onPress: () => setShowVinScanner(true) },\n        { text: 'Cancel', style: 'cancel' }\n      ]);\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // Get required tools for this service\n      const requiredTools = getRequiredToolsForService(selectedService).map(tool => tool.id);\n      \n      const request: ServiceRequest = {\n        id: Date.now().toString(),\n        type: selectedService,\n        description: description.trim(),\n        urgency,\n        status: 'pending',\n        createdAt: new Date(),\n        photos: photos.length > 0 ? photos : undefined,\n        location: currentLocation ? {\n          latitude: currentLocation.latitude,\n          longitude: currentLocation.longitude,\n          address: currentLocation.address\n        } : undefined,\n        vehicleId: selectedVehicle.id,\n        vinNumber: vinNumber || selectedVehicle.vin || undefined,\n        aiDiagnosis: aiDiagnosis || undefined,\n        requiredTools, // Set required tools for this service\n        toolsChecked: {}, // Initialize empty tools check\n      };\n\n      addServiceRequest(request);\n\n      // Production logging\n      logProductionEvent('service_request_created', {\n        requestId: request.id,\n        serviceType: selectedService,\n        urgency,\n        hasAIDiagnosis: !!aiDiagnosis,\n        vehicleId: selectedVehicle.id,\n        toolsCount: requiredTools.length\n      });\n\n      // Generate smart quote automatically\n      const quote = generateSmartQuote(request.id, {\n        serviceType: selectedService,\n        urgency,\n        description: description.trim(),\n        selectedParts: selectedParts.length > 0 ? selectedParts : undefined,\n        aiDiagnosis,\n        vehicle: selectedVehicle,\n      });\n\n      addQuote(quote);\n      updateServiceRequest(request.id, { status: 'quoted' });\n\n      // Production logging\n      logProductionEvent('quote_generated', {\n        quoteId: quote.id,\n        requestId: request.id,\n        totalCost: quote.totalCost,\n        laborCost: quote.laborCost,\n        partsCost: quote.partsCost\n      });\n\n      Alert.alert(\n        'Request Submitted',\n        'Your service request has been submitted and a quote has been generated automatically.',\n        [\n          { text: 'View Quote', onPress: () => router.push('/quotes') }\n        ]\n      );\n\n      // Reset form\n      setDescription('');\n      setPhotos([]);\n      setUrgency('medium');\n      setSelectedService(null);\n      setSelectedParts([]);\n      setVinNumber('');\n      setAiDiagnosis(undefined);\n    } catch (error) {\n      Alert.alert('Error', 'Failed to submit request. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const selectedServiceData = selectedService ? \n    SERVICE_CATEGORIES.find(s => s.id === selectedService) : null;\n\n  const selectedServicePricing = selectedService ? \n    SERVICE_PRICING[selectedService] : null;\n\n  const togglePart = (partName: string) => {\n    setSelectedParts(prev => \n      prev.includes(partName) \n        ? prev.filter(p => p !== partName)\n        : [...prev, partName]\n    );\n  };\n\n  // Get tools for selected service\n  const serviceTools = selectedService ? getToolsForService(selectedService) : [];\n  const requiredServiceTools = selectedService ? getRequiredToolsForService(selectedService) : [];\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* Production Environment Indicator */}\n        {ENV_CONFIG.isProduction && (\n          <View style={styles.productionBanner}>\n            <Icons.Shield size={16} color={Colors.success} />\n            <Text style={styles.productionText}>Production Environment - Live Service</Text>\n          </View>\n        )}\n\n        {/* Vehicle Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Select Vehicle</Text>\n          {vehicles.length > 0 ? (\n            <View style={styles.vehicleSelector}>\n              {vehicles.map((vehicle) => (\n                <Button\n                  key={vehicle.id}\n                  title={`${vehicle.year} ${vehicle.make} ${vehicle.model}${vehicle.vin ? ` (VIN: ${vehicle.vin.slice(-4)})` : ''}`}\n                  variant={selectedVehicle?.id === vehicle.id ? 'primary' : 'outline'}\n                  onPress={() => setSelectedVehicle(vehicle)}\n                  style={styles.vehicleButton}\n                />\n              ))}\n              <Button\n                title=\"Add New Vehicle\"\n                variant=\"outline\"\n                onPress={() => setShowVinScanner(true)}\n                style={styles.addVehicleButton}\n              />\n            </View>\n          ) : (\n            <View style={styles.noVehicleCard}>\n              <Text style={styles.noVehicleText}>No vehicles found</Text>\n              <Button\n                title=\"Add Vehicle\"\n                variant=\"outline\"\n                onPress={() => setShowVinScanner(true)}\n                style={styles.addVehicleButton}\n              />\n            </View>\n          )}\n        </View>\n\n        {/* AI Assistant */}\n        <View style={styles.section}>\n          <View style={styles.aiHeader}>\n            <Text style={styles.sectionTitle}>Get AI-Powered Diagnosis</Text>\n            <Button\n              title={showAIAssistant ? 'Hide AI Assistant' : 'Use AI Assistant'}\n              variant=\"outline\"\n              size=\"small\"\n              onPress={() => setShowAIAssistant(!showAIAssistant)}\n              style={styles.toggleButton}\n            />\n          </View>\n          \n          {showAIAssistant && (\n            <AIAssistant\n              vehicle={selectedVehicle || undefined}\n              onDiagnosisComplete={handleAIDiagnosis}\n              initialSymptoms={description}\n            />\n          )}\n\n          {aiDiagnosis && !showAIAssistant && (\n            <View style={styles.diagnosisPreview}>\n              <View style={styles.diagnosisHeader}>\n                <Icons.Brain size={16} color={Colors.primary} />\n                <Text style={styles.diagnosisTitle}>AI Diagnosis Complete</Text>\n                <Button\n                  title=\"View Details\"\n                  variant=\"outline\"\n                  size=\"small\"\n                  onPress={() => setShowAIAssistant(true)}\n                />\n              </View>\n              <Text style={styles.diagnosisPreviewText}>\n                {aiDiagnosis.likelyCauses[0]} • {aiDiagnosis.urgencyLevel.toUpperCase()} priority\n              </Text>\n              {aiDiagnosis.estimatedCost && (\n                <Text style={styles.diagnosisCostText}>\n                  Estimated cost: ${aiDiagnosis.estimatedCost.min} - ${aiDiagnosis.estimatedCost.max}\n                </Text>\n              )}\n            </View>\n          )}\n        </View>\n\n        {/* Service Selection */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Service Type</Text>\n          {selectedServiceData ? (\n            <View style={styles.selectedService}>\n              <Text style={styles.selectedServiceTitle}>{selectedServiceData.title}</Text>\n              <Text style={styles.selectedServiceDesc}>{selectedServiceData.description}</Text>\n              {selectedServicePricing && (\n                <Text style={styles.priceRange}>\n                  Estimated: ${selectedServicePricing.priceRange.min} - ${selectedServicePricing.priceRange.max}\n                </Text>\n              )}\n              <Button\n                title=\"Change Service\"\n                variant=\"outline\"\n                size=\"small\"\n                onPress={() => setSelectedService(null)}\n                style={styles.changeButton}\n              />\n            </View>\n          ) : (\n            <View style={styles.serviceGrid}>\n              {SERVICE_CATEGORIES.map((service) => (\n                <Button\n                  key={service.id}\n                  title={service.title}\n                  variant=\"outline\"\n                  onPress={() => setSelectedService(service.id)}\n                  style={styles.serviceButton}\n                />\n              ))}\n            </View>\n          )}\n        </View>\n\n        {/* Tools Required Preview */}\n        {selectedService && serviceTools.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Required Tools for This Service</Text>\n            <Text style={styles.sectionSubtitle}>\n              Mechanic will verify these tools before starting work\n            </Text>\n            <View style={styles.toolsPreview}>\n              <View style={styles.toolsStats}>\n                <Text style={styles.toolsStatsText}>\n                  {requiredServiceTools.length} required tools • {serviceTools.length - requiredServiceTools.length} optional\n                </Text>\n              </View>\n              <View style={styles.toolsList}>\n                {requiredServiceTools.slice(0, 5).map((tool) => (\n                  <View key={tool.id} style={styles.toolItem}>\n                    <Icons.CheckCircle size={14} color={Colors.success} />\n                    <Text style={styles.toolName}>{tool.name}</Text>\n                    <View style={styles.requiredBadge}>\n                      <Text style={styles.requiredBadgeText}>Required</Text>\n                    </View>\n                  </View>\n                ))}\n                {requiredServiceTools.length > 5 && (\n                  <Text style={styles.moreToolsText}>\n                    +{requiredServiceTools.length - 5} more required tools\n                  </Text>\n                )}\n              </View>\n            </View>\n          </View>\n        )}\n\n        {/* Parts Selection */}\n        {selectedServicePricing && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Common Parts (Optional)</Text>\n            <Text style={styles.sectionSubtitle}>\n              Select parts that may be needed for this service\n            </Text>\n            <View style={styles.partsGrid}>\n              {selectedServicePricing.commonParts.map((part) => (\n                <Button\n                  key={part.name}\n                  title={`${part.name} - $${part.price}`}\n                  variant={selectedParts.includes(part.name) ? 'primary' : 'outline'}\n                  size=\"small\"\n                  onPress={() => togglePart(part.name)}\n                  style={styles.partButton}\n                />\n              ))}\n            </View>\n          </View>\n        )}\n\n        {/* VIN Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Vehicle Information</Text>\n          <View style={styles.vinSection}>\n            {vinNumber || selectedVehicle?.vin ? (\n              <View style={styles.vinDisplay}>\n                <Icons.CheckCircle size={20} color={Colors.success} />\n                <Text style={styles.vinText}>\n                  VIN: {vinNumber || selectedVehicle?.vin}\n                </Text>\n                <Button\n                  title=\"Change\"\n                  variant=\"outline\"\n                  size=\"small\"\n                  onPress={() => setShowVinScanner(true)}\n                />\n              </View>\n            ) : (\n              <Button\n                title=\"Scan/Enter VIN\"\n                variant=\"outline\"\n                onPress={() => setShowVinScanner(true)}\n                style={styles.vinButton}\n              />\n            )}\n          </View>\n        </View>\n\n        {/* Description */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Describe the Issue</Text>\n          <TextInput\n            style={styles.textArea}\n            value={description}\n            onChangeText={setDescription}\n            placeholder=\"Please describe the problem, symptoms, or service needed...\"\n            placeholderTextColor={Colors.textMuted}\n            multiline\n            numberOfLines={4}\n            textAlignVertical=\"top\"\n          />\n        </View>\n\n        {/* Photo Upload */}\n        <View style={styles.section}>\n          <PhotoUpload\n            photos={photos}\n            onPhotosChange={setPhotos}\n            maxPhotos={5}\n          />\n        </View>\n\n        {/* Urgency */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Urgency Level</Text>\n          <View style={styles.urgencyGrid}>\n            {[\n              { key: 'low', label: 'Low', desc: 'Can wait a few days' },\n              { key: 'medium', label: 'Medium', desc: 'Within 24-48 hours' },\n              { key: 'high', label: 'High', desc: 'Same day service' },\n              { key: 'emergency', label: 'Emergency', desc: 'Immediate assistance' },\n            ].map((option) => (\n              <Button\n                key={option.key}\n                title={`${option.label}\n${option.desc}`}\n                variant={urgency === option.key ? 'primary' : 'outline'}\n                onPress={() => setUrgency(option.key as any)}\n                style={styles.urgencyButton}\n                textStyle={styles.urgencyButtonText}\n              />\n            ))}\n          </View>\n        </View>\n\n        {/* Location */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Service Location</Text>\n          <View style={styles.locationCard}>\n            {currentLocation ? (\n              <>\n                <Text style={styles.locationText}>\n                  {currentLocation.address || 'Current Location'}\n                </Text>\n                <Text style={styles.locationCoords}>\n                  {currentLocation.latitude.toFixed(4)}, {currentLocation.longitude.toFixed(4)}\n                </Text>\n              </>\n            ) : (\n              <Text style={styles.locationText}>Getting your location...</Text>\n            )}\n            <Button\n              title=\"Update Location\"\n              variant=\"outline\"\n              size=\"small\"\n              onPress={getCurrentLocation}\n              style={styles.locationButton}\n            />\n          </View>\n        </View>\n\n        {/* Submit */}\n        <Button\n          title={isSubmitting ? 'Submitting...' : 'Request Service & Get Quote'}\n          onPress={handleSubmit}\n          disabled={isSubmitting || !selectedService || !description.trim() || !selectedVehicle}\n          style={styles.submitButton}\n        />\n      </View>\n\n      {/* VIN Scanner Modal */}\n      <Modal\n        visible={showVinScanner}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <VinScanner\n          onVinScanned={handleVinScanned}\n          onClose={() => setShowVinScanner(false)}\n        />\n      </Modal>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  productionBanner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.success + '10',\n    borderWidth: 1,\n    borderColor: Colors.success + '30',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 20,\n  },\n  productionText: {\n    fontSize: 12,\n    color: Colors.success,\n    fontWeight: '600',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 12,\n  },\n  sectionSubtitle: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n  },\n  vehicleSelector: {\n    gap: 8,\n  },\n  vehicleButton: {\n    alignSelf: 'flex-start',\n  },\n  addVehicleButton: {\n    alignSelf: 'flex-start',\n    marginTop: 8,\n  },\n  noVehicleCard: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n  noVehicleText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n  },\n  aiHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  toggleButton: {\n    alignSelf: 'flex-end',\n  },\n  diagnosisPreview: {\n    backgroundColor: Colors.primary + '10',\n    borderWidth: 1,\n    borderColor: Colors.primary + '40',\n    borderRadius: 12,\n    padding: 12,\n  },\n  diagnosisHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    marginBottom: 8,\n  },\n  diagnosisTitle: {\n    flex: 1,\n    fontSize: 14,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  diagnosisPreviewText: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    marginBottom: 4,\n  },\n  diagnosisCostText: {\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  selectedService: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.primary,\n  },\n  selectedServiceTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  selectedServiceDesc: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  priceRange: {\n    fontSize: 14,\n    color: Colors.primary,\n    fontWeight: '600',\n    marginBottom: 12,\n  },\n  changeButton: {\n    alignSelf: 'flex-start',\n  },\n  serviceGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  serviceButton: {\n    minWidth: '48%',\n    marginBottom: 8,\n  },\n  toolsPreview: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n  },\n  toolsStats: {\n    marginBottom: 12,\n  },\n  toolsStatsText: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    fontWeight: '500',\n  },\n  toolsList: {\n    gap: 8,\n  },\n  toolItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  toolName: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n  },\n  requiredBadge: {\n    backgroundColor: Colors.error + '20',\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 4,\n  },\n  requiredBadgeText: {\n    fontSize: 10,\n    color: Colors.error,\n    fontWeight: '600',\n  },\n  moreToolsText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    fontStyle: 'italic',\n  },\n  partsGrid: {\n    gap: 8,\n  },\n  partButton: {\n    alignSelf: 'flex-start',\n  },\n  vinSection: {\n    marginBottom: 8,\n  },\n  vinDisplay: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.card,\n    padding: 12,\n    borderRadius: 8,\n    gap: 8,\n  },\n  vinText: {\n    flex: 1,\n    fontSize: 14,\n    color: Colors.text,\n    fontFamily: Platform.OS === 'ios' ? 'Courier' : 'monospace',\n  },\n  vinButton: {\n    alignSelf: 'flex-start',\n  },\n  textArea: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 16,\n    minHeight: 100,\n  },\n  urgencyGrid: {\n    gap: 8,\n  },\n  urgencyButton: {\n    paddingVertical: 16,\n  },\n  urgencyButtonText: {\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  locationCard: {\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  locationText: {\n    fontSize: 16,\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  locationCoords: {\n    fontSize: 12,\n    color: Colors.textMuted,\n    marginBottom: 12,\n  },\n  locationButton: {\n    alignSelf: 'flex-start',\n  },\n  submitButton: {\n    marginTop: 12,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +512 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity, Alert } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport { Quote } from '@/types/service';\nimport { ChatComponent } from '@/components/ChatComponent';\nimport { PaymentModal } from '@/components/PaymentModal';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerQuotesScreen() {\n  const { serviceRequests, quotes, updateServiceRequest, updateQuote, addQuote } = useAppStore();\n  const { user } = useAuthStore();\n  const [selectedRequestForChat, setSelectedRequestForChat] = React.useState<string | null>(null);\n  const [selectedQuoteForPayment, setSelectedQuoteForPayment] = React.useState<Quote | null>(null);\n\n  const getServiceTitle = (type: string) => {\n    return SERVICE_CATEGORIES.find(s => s.id === type)?.title || type;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return Colors.warning;\n      case 'quoted': return Colors.primary;\n      case 'accepted': return Colors.success;\n      case 'in_progress': return Colors.primary;\n      case 'completed': return Colors.success;\n      default: return Colors.textMuted;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'pending': return 'Awaiting Quote';\n      case 'quoted': return 'Quote Ready';\n      case 'accepted': return 'Accepted';\n      case 'in_progress': return 'In Progress';\n      case 'completed': return 'Completed';\n      default: return status;\n    }\n  };\n\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'emergency': return <Icons.AlertTriangle size={16} color={Colors.error} />;\n      case 'high': return <Icons.Clock size={16} color={Colors.warning} />;\n      default: return null;\n    }\n  };\n\n  const handleAcceptQuote = (quoteId: string) => {\n    const quote = quotes.find(q => q.id === quoteId);\n    if (!quote) return;\n\n    Alert.alert(\n      'Accept Quote',\n      `Accept quote for $${quote.totalCost}?`,\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Accept & Pay',\n          onPress: () => {\n            setSelectedQuoteForPayment(quote);\n          }\n        }\n      ]\n    );\n  };\n\n  const handlePaymentSuccess = (quoteId: string) => {\n    const quote = quotes.find(q => q.id === quoteId);\n    if (!quote) return;\n\n    updateQuote(quoteId, { \n      status: 'accepted',\n      paidAt: new Date(),\n    });\n    updateServiceRequest(quote.serviceRequestId, { status: 'accepted' });\n    setSelectedQuoteForPayment(null);\n    \n    Alert.alert('Payment Successful', 'Your quote has been accepted and payment processed. We will contact you to schedule the service.');\n  };\n\n  const handleDeclineQuote = (quoteId: string) => {\n    const quote = quotes.find(q => q.id === quoteId);\n    if (!quote) return;\n\n    Alert.alert(\n      'Decline Quote',\n      'Are you sure you want to decline this quote?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        {\n          text: 'Decline',\n          style: 'destructive',\n          onPress: () => {\n            updateQuote(quoteId, { status: 'declined' });\n            updateServiceRequest(quote.serviceRequestId, { status: 'pending' });\n          }\n        }\n      ]\n    );\n  };\n\n  const openChat = (requestId: string) => {\n    setSelectedRequestForChat(requestId);\n  };\n\n  if (selectedRequestForChat) {\n    return (\n      <View style={styles.container}>\n        <View style={styles.chatHeader}>\n          <TouchableOpacity \n            style={styles.backButton}\n            onPress={() => setSelectedRequestForChat(null)}\n          >\n            <Icons.ArrowLeft size={24} color={Colors.text} />\n          </TouchableOpacity>\n          <Text style={styles.chatHeaderTitle}>Service Chat</Text>\n        </View>\n        <ChatComponent\n          serviceRequestId={selectedRequestForChat}\n          currentUserId={user?.id || 'customer-1'}\n          currentUserName={user ? `${user.firstName} ${user.lastName}` : 'Customer'}\n          currentUserType=\"customer\"\n        />\n      </View>\n    );\n  }\n\n  if (serviceRequests.length === 0) {\n    return (\n      <View style={styles.emptyContainer}>\n        <Icons.FileText size={64} color={Colors.textMuted} />\n        <Text style={styles.emptyTitle}>No Service Requests</Text>\n        <Text style={styles.emptyText}>\n          Your service requests and quotes will appear here once you submit a request.\n        </Text>\n      </View>\n    );\n  }\n\n  return (\n    <>\n      <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n        <View style={styles.content}>\n          {serviceRequests.map((request) => {\n            const requestQuote = quotes.find(q => q.serviceRequestId === request.id);\n            \n            return (\n              <View key={request.id} style={styles.requestCard}>\n                <View style={styles.requestHeader}>\n                  <View style={styles.requestTitleRow}>\n                    <Text style={styles.requestTitle}>\n                      {getServiceTitle(request.type)}\n                    </Text>\n                    {getUrgencyIcon(request.urgency)}\n                  </View>\n                  \n                  <View style={[styles.statusBadge, { backgroundColor: getStatusColor(request.status) + '20' }]}>\n                    <Text style={[styles.statusText, { color: getStatusColor(request.status) }]}>\n                      {getStatusText(request.status)}\n                    </Text>\n                  </View>\n                </View>\n\n                <Text style={styles.requestDescription} numberOfLines={2}>\n                  {request.description}\n                </Text>\n\n                {/* Photos */}\n                {request.photos && request.photos.length > 0 && (\n                  <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.photosContainer}>\n                    {request.photos.map((photo, index) => (\n                      <View key={index} style={styles.photoWrapper}>\n                        <Text style={styles.photoPlaceholder}>📷 Photo {index + 1}</Text>\n                      </View>\n                    ))}\n                  </ScrollView>\n                )}\n\n                <View style={styles.requestMeta}>\n                  <Text style={styles.requestDate}>\n                    {new Date(request.createdAt).toLocaleDateString()}\n                  </Text>\n                  {request.location && (\n                    <View style={styles.locationRow}>\n                      <Icons.MapPin size={12} color={Colors.textMuted} />\n                      <Text style={styles.locationText}>\n                        {request.location.address || 'Location provided'}\n                      </Text>\n                    </View>\n                  )}\n                </View>\n\n                {/* Action Buttons */}\n                <View style={styles.actionButtons}>\n                  <TouchableOpacity \n                    style={styles.chatButton}\n                    onPress={() => openChat(request.id)}\n                  >\n                    <Icons.MessageCircle size={16} color={Colors.primary} />\n                    <Text style={styles.chatButtonText}>Chat</Text>\n                  </TouchableOpacity>\n                </View>\n\n                {requestQuote && (\n                  <View style={styles.quoteSection}>\n                    <View style={styles.quoteDivider} />\n                    \n                    <View style={styles.quoteHeader}>\n                      <Text style={styles.quoteTitle}>Quote Details</Text>\n                      <Text style={styles.quoteTotal}>${requestQuote.totalCost}</Text>\n                    </View>\n\n                    <Text style={styles.quoteDescription}>{requestQuote.description}</Text>\n\n                    <View style={styles.quoteBreakdown}>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Labor</Text>\n                        <Text style={styles.quoteValue}>${requestQuote.laborCost}</Text>\n                      </View>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Parts</Text>\n                        <Text style={styles.quoteValue}>${requestQuote.partsCost}</Text>\n                      </View>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Estimated Time</Text>\n                        <Text style={styles.quoteValue}>{requestQuote.estimatedDuration}h</Text>\n                      </View>\n                      <View style={styles.quoteRow}>\n                        <Text style={styles.quoteLabel}>Valid Until</Text>\n                        <Text style={styles.quoteValue}>\n                          {new Date(requestQuote.validUntil).toLocaleDateString()}\n                        </Text>\n                      </View>\n                    </View>\n\n                    {request.status === 'quoted' && requestQuote.status === 'pending' && (\n                      <View style={styles.quoteActions}>\n                        <TouchableOpacity \n                          style={styles.acceptButton}\n                          onPress={() => handleAcceptQuote(requestQuote.id)}\n                        >\n                          <Text style={styles.acceptButtonText}>Accept & Pay</Text>\n                        </TouchableOpacity>\n                        <TouchableOpacity \n                          style={styles.declineButton}\n                          onPress={() => handleDeclineQuote(requestQuote.id)}\n                        >\n                          <Text style={styles.declineButtonText}>Decline</Text>\n                        </TouchableOpacity>\n                      </View>\n                    )}\n\n                    {requestQuote.paidAt && (\n                      <View style={styles.paidIndicator}>\n                        <Icons.CheckCircle size={16} color={Colors.success} />\n                        <Text style={styles.paidText}>\n                          Paid on {new Date(requestQuote.paidAt).toLocaleDateString()}\n                        </Text>\n                      </View>\n                    )}\n                  </View>\n                )}\n              </View>\n            );\n          })}\n        </View>\n      </ScrollView>\n\n      {/* Payment Modal */}\n      {selectedQuoteForPayment && (\n        <PaymentModal\n          quote={selectedQuoteForPayment}\n          onSuccess={() => handlePaymentSuccess(selectedQuoteForPayment.id)}\n          onCancel={() => setSelectedQuoteForPayment(null)}\n        />\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  emptyContainer: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 40,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyText: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    lineHeight: 22,\n  },\n  chatHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: Colors.card,\n    borderBottomWidth: 1,\n    borderBottomColor: Colors.border,\n  },\n  backButton: {\n    marginRight: 12,\n  },\n  chatHeaderTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  requestCard: {\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  requestHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 8,\n  },\n  requestTitleRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n    gap: 8,\n  },\n  requestTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  statusBadge: {\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  requestDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  photosContainer: {\n    marginBottom: 12,\n  },\n  photoWrapper: {\n    marginRight: 8,\n    backgroundColor: Colors.surface,\n    borderRadius: 8,\n    padding: 8,\n  },\n  photoPlaceholder: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  requestMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 12,\n  },\n  requestDate: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  locationRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 4,\n  },\n  locationText: {\n    fontSize: 12,\n    color: Colors.textMuted,\n  },\n  actionButtons: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 8,\n  },\n  chatButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingVertical: 8,\n    paddingHorizontal: 12,\n    borderRadius: 6,\n    gap: 6,\n  },\n  chatButtonText: {\n    color: Colors.primary,\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  quoteSection: {\n    marginTop: 16,\n  },\n  quoteDivider: {\n    height: 1,\n    backgroundColor: Colors.border,\n    marginBottom: 16,\n  },\n  quoteHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  quoteTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  quoteTotal: {\n    fontSize: 20,\n    fontWeight: '700',\n    color: Colors.primary,\n  },\n  quoteDescription: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 12,\n    lineHeight: 20,\n  },\n  quoteBreakdown: {\n    gap: 8,\n    marginBottom: 16,\n  },\n  quoteRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  quoteLabel: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  quoteValue: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n  },\n  quoteActions: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  acceptButton: {\n    flex: 1,\n    backgroundColor: Colors.primary,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  acceptButtonText: {\n    color: Colors.black,\n    fontWeight: '600',\n    fontSize: 16,\n  },\n  declineButton: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    borderWidth: 1,\n    borderColor: Colors.border,\n    paddingVertical: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n  declineButtonText: {\n    color: Colors.text,\n    fontWeight: '600',\n    fontSize: 16,\n  },\n  paidIndicator: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n    backgroundColor: Colors.success + '20',\n    padding: 12,\n    borderRadius: 8,\n    marginTop: 12,\n  },\n  paidText: {\n    color: Colors.success,\n    fontWeight: '600',\n    fontSize: 14,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +487 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React, { useState } from 'react';\nimport { View, Text, ScrollView, StyleSheet, TextInput, Alert, TouchableOpacity } from 'react-native';\nimport { Colors } from '@/constants/colors';\nimport { Button } from '@/components/Button';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport { Contact, Vehicle } from '@/types/service';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerProfileScreen() {\n  const { contact, vehicles, setContact, addVehicle, removeVehicle } = useAppStore();\n  const { user, logout } = useAuthStore();\n  \n  // Contact form state\n  const [firstName, setFirstName] = useState(contact?.firstName || user?.firstName || '');\n  const [lastName, setLastName] = useState(contact?.lastName || user?.lastName || '');\n  const [phone, setPhone] = useState(contact?.phone || user?.phone || '');\n  const [email, setEmail] = useState(contact?.email || user?.email || '');\n  const [address, setAddress] = useState(contact?.address || '');\n  \n  // Vehicle form state\n  const [showVehicleForm, setShowVehicleForm] = useState(false);\n  const [vehicleMake, setVehicleMake] = useState('');\n  const [vehicleModel, setVehicleModel] = useState('');\n  const [vehicleYear, setVehicleYear] = useState('');\n  const [vehicleColor, setVehicleColor] = useState('');\n  const [vehicleMileage, setVehicleMileage] = useState('');\n\n  const handleSaveContact = () => {\n    if (!firstName.trim() || !lastName.trim() || !phone.trim() || !email.trim()) {\n      Alert.alert('Error', 'Please fill in all required fields.');\n      return;\n    }\n\n    const contactData: Contact = {\n      id: contact?.id || Date.now().toString(),\n      firstName: firstName.trim(),\n      lastName: lastName.trim(),\n      phone: phone.trim(),\n      email: email.trim(),\n      address: address.trim() || undefined,\n    };\n\n    setContact(contactData);\n    Alert.alert('Success', 'Contact information saved.');\n  };\n\n  const handleAddVehicle = () => {\n    if (!vehicleMake.trim() || !vehicleModel.trim() || !vehicleYear.trim()) {\n      Alert.alert('Error', 'Please fill in make, model, and year.');\n      return;\n    }\n\n    const year = parseInt(vehicleYear);\n    if (isNaN(year) || year < 1900 || year > new Date().getFullYear() + 1) {\n      Alert.alert('Error', 'Please enter a valid year.');\n      return;\n    }\n\n    const vehicle: Vehicle = {\n      id: Date.now().toString(),\n      make: vehicleMake.trim(),\n      model: vehicleModel.trim(),\n      year,\n      color: vehicleColor.trim() || undefined,\n      mileage: vehicleMileage.trim() ? parseInt(vehicleMileage) : undefined,\n    };\n\n    addVehicle(vehicle);\n    \n    // Reset form\n    setVehicleMake('');\n    setVehicleModel('');\n    setVehicleYear('');\n    setVehicleColor('');\n    setVehicleMileage('');\n    setShowVehicleForm(false);\n    \n    Alert.alert('Success', 'Vehicle added to your profile.');\n  };\n\n  const handleRemoveVehicle = (vehicleId: string) => {\n    Alert.alert(\n      'Remove Vehicle',\n      'Are you sure you want to remove this vehicle?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Remove', style: 'destructive', onPress: () => removeVehicle(vehicleId) },\n      ]\n    );\n  };\n\n  const handleLogout = () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { text: 'Sign Out', style: 'destructive', onPress: logout },\n      ]\n    );\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      <View style={styles.content}>\n        {/* User Info Header */}\n        <View style={styles.userHeader}>\n          <View style={styles.userInfo}>\n            <Text style={styles.userName}>{user?.firstName} {user?.lastName}</Text>\n            <Text style={styles.userEmail}>{user?.email}</Text>\n            <View style={styles.roleBadge}>\n              <Icons.User size={12} color={Colors.primary} />\n              <Text style={styles.roleText}>Customer</Text>\n            </View>\n          </View>\n          <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>\n            <Icons.LogOut size={20} color={Colors.error} />\n          </TouchableOpacity>\n        </View>\n\n        {/* Contact Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Contact Information</Text>\n          \n          <View style={styles.inputRow}>\n            <View style={styles.inputHalf}>\n              <Text style={styles.inputLabel}>First Name *</Text>\n              <TextInput\n                style={styles.input}\n                value={firstName}\n                onChangeText={setFirstName}\n                placeholder=\"John\"\n                placeholderTextColor={Colors.textMuted}\n              />\n            </View>\n            <View style={styles.inputHalf}>\n              <Text style={styles.inputLabel}>Last Name *</Text>\n              <TextInput\n                style={styles.input}\n                value={lastName}\n                onChangeText={setLastName}\n                placeholder=\"Doe\"\n                placeholderTextColor={Colors.textMuted}\n              />\n            </View>\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Phone Number *</Text>\n            <TextInput\n              style={styles.input}\n              value={phone}\n              onChangeText={setPhone}\n              placeholder=\"(555) 123-4567\"\n              placeholderTextColor={Colors.textMuted}\n              keyboardType=\"phone-pad\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Email Address *</Text>\n            <TextInput\n              style={styles.input}\n              value={email}\n              onChangeText={setEmail}\n              placeholder=\"john@example.com\"\n              placeholderTextColor={Colors.textMuted}\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n            />\n          </View>\n\n          <View style={styles.inputGroup}>\n            <Text style={styles.inputLabel}>Address</Text>\n            <TextInput\n              style={styles.input}\n              value={address}\n              onChangeText={setAddress}\n              placeholder=\"123 Main St, City, State\"\n              placeholderTextColor={Colors.textMuted}\n            />\n          </View>\n\n          <Button\n            title=\"Save Contact Info\"\n            onPress={handleSaveContact}\n            style={styles.saveButton}\n          />\n        </View>\n\n        {/* Vehicles */}\n        <View style={styles.section}>\n          <View style={styles.sectionHeader}>\n            <Text style={styles.sectionTitle}>Your Vehicles</Text>\n            <Button\n              title=\"Add Vehicle\"\n              variant=\"outline\"\n              size=\"small\"\n              onPress={() => setShowVehicleForm(true)}\n            />\n          </View>\n\n          {vehicles.length === 0 ? (\n            <View style={styles.emptyVehicles}>\n              <Icons.Car size={48} color={Colors.textMuted} />\n              <Text style={styles.emptyText}>No vehicles added yet</Text>\n              <Text style={styles.emptySubtext}>\n                Add your vehicle information to help us provide better service\n              </Text>\n            </View>\n          ) : (\n            <View style={styles.vehiclesList}>\n              {vehicles.map((vehicle) => (\n                <View key={vehicle.id} style={styles.vehicleCard}>\n                  <View style={styles.vehicleInfo}>\n                    <Text style={styles.vehicleTitle}>\n                      {vehicle.year} {vehicle.make} {vehicle.model}\n                    </Text>\n                    {vehicle.color && (\n                      <Text style={styles.vehicleDetail}>Color: {vehicle.color}</Text>\n                    )}\n                    {vehicle.mileage && (\n                      <Text style={styles.vehicleDetail}>Mileage: {vehicle.mileage.toLocaleString()}</Text>\n                    )}\n                  </View>\n                  <Button\n                    title=\"Remove\"\n                    variant=\"outline\"\n                    size=\"small\"\n                    onPress={() => handleRemoveVehicle(vehicle.id)}\n                    textStyle={{ color: Colors.error }}\n                    style={{ borderColor: Colors.error }}\n                  />\n                </View>\n              ))}\n            </View>\n          )}\n\n          {showVehicleForm && (\n            <View style={styles.vehicleForm}>\n              <Text style={styles.formTitle}>Add New Vehicle</Text>\n              \n              <View style={styles.inputRow}>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Make *</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleMake}\n                    onChangeText={setVehicleMake}\n                    placeholder=\"Toyota\"\n                    placeholderTextColor={Colors.textMuted}\n                  />\n                </View>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Model *</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleModel}\n                    onChangeText={setVehicleModel}\n                    placeholder=\"Camry\"\n                    placeholderTextColor={Colors.textMuted}\n                  />\n                </View>\n              </View>\n\n              <View style={styles.inputRow}>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Year *</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleYear}\n                    onChangeText={setVehicleYear}\n                    placeholder=\"2020\"\n                    placeholderTextColor={Colors.textMuted}\n                    keyboardType=\"numeric\"\n                  />\n                </View>\n                <View style={styles.inputHalf}>\n                  <Text style={styles.inputLabel}>Color</Text>\n                  <TextInput\n                    style={styles.input}\n                    value={vehicleColor}\n                    onChangeText={setVehicleColor}\n                    placeholder=\"Silver\"\n                    placeholderTextColor={Colors.textMuted}\n                  />\n                </View>\n              </View>\n\n              <View style={styles.inputGroup}>\n                <Text style={styles.inputLabel}>Mileage</Text>\n                <TextInput\n                  style={styles.input}\n                  value={vehicleMileage}\n                  onChangeText={setVehicleMileage}\n                  placeholder=\"50000\"\n                  placeholderTextColor={Colors.textMuted}\n                  keyboardType=\"numeric\"\n                />\n              </View>\n\n              <View style={styles.formActions}>\n                <Button\n                  title=\"Cancel\"\n                  variant=\"outline\"\n                  onPress={() => setShowVehicleForm(false)}\n                  style={styles.formButton}\n                />\n                <Button\n                  title=\"Add Vehicle\"\n                  onPress={handleAddVehicle}\n                  style={styles.formButton}\n                />\n              </View>\n            </View>\n          )}\n        </View>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  content: {\n    padding: 20,\n  },\n  userHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    marginBottom: 20,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  userInfo: {\n    flex: 1,\n  },\n  userName: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  userEmail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    marginBottom: 8,\n  },\n  roleBadge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: Colors.primary + '20',\n    borderWidth: 1,\n    borderColor: Colors.primary,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 6,\n    alignSelf: 'flex-start',\n    gap: 4,\n  },\n  roleText: {\n    fontSize: 12,\n    color: Colors.primary,\n    fontWeight: '600',\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  section: {\n    marginBottom: 32,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n  },\n  inputGroup: {\n    marginBottom: 16,\n  },\n  inputRow: {\n    flexDirection: 'row',\n    gap: 12,\n    marginBottom: 16,\n  },\n  inputHalf: {\n    flex: 1,\n  },\n  inputLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n    color: Colors.text,\n    marginBottom: 6,\n  },\n  input: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 8,\n    padding: 12,\n    color: Colors.text,\n    fontSize: 16,\n  },\n  saveButton: {\n    marginTop: 8,\n  },\n  emptyVehicles: {\n    alignItems: 'center',\n    padding: 32,\n    backgroundColor: Colors.card,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  emptyText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: Colors.text,\n    marginTop: 12,\n    marginBottom: 4,\n  },\n  emptySubtext: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n  },\n  vehiclesList: {\n    gap: 12,\n  },\n  vehicleCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  vehicleInfo: {\n    flex: 1,\n  },\n  vehicleTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  vehicleDetail: {\n    fontSize: 14,\n    color: Colors.textSecondary,\n  },\n  vehicleForm: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    marginTop: 16,\n  },\n  formTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  formActions: {\n    flexDirection: 'row',\n    gap: 12,\n    marginTop: 8,\n  },\n  formButton: {\n    flex: 1,\n  },\n});"
            }
          }
        },
        {
          "display": "[Pasted text #1 +278 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { View, Text, ScrollView, StyleSheet, TouchableOpacity } from 'react-native';\nimport { router } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { SERVICE_CATEGORIES } from '@/constants/services';\nimport { ServiceCard } from '@/components/ServiceCard';\nimport { MaintenanceReminders } from '@/components/MaintenanceReminders';\nimport { useAppStore } from '@/stores/app-store';\nimport { useAuthStore } from '@/stores/auth-store';\nimport * as Icons from 'lucide-react-native';\n\nexport default function CustomerHomeScreen() {\n  const { serviceRequests, vehicles } = useAppStore();\n  const { user, logout } = useAuthStore();\n  \n  const pendingRequests = serviceRequests.filter(r => r.status === 'pending').length;\n  const activeRequests = serviceRequests.filter(r => ['quoted', 'accepted', 'in_progress'].includes(r.status)).length;\n  const completedRequests = serviceRequests.filter(r => r.status === 'completed').length;\n\n  const handleServicePress = (serviceId: string) => {\n    router.push({\n      pathname: '/request',\n      params: { serviceType: serviceId }\n    });\n  };\n\n  const handleEmergencyPress = () => {\n    router.push({\n      pathname: '/request',\n      params: { serviceType: 'emergency_roadside', urgent: 'true' }\n    });\n  };\n\n  const handleQuickAction = (action: string) => {\n    switch (action) {\n      case 'quotes':\n        router.push('/quotes');\n        break;\n      case 'profile':\n        router.push('/profile');\n        break;\n    }\n  };\n\n  return (\n    <ScrollView style={styles.container} showsVerticalScrollIndicator={false}>\n      {/* Welcome Section */}\n      <View style={styles.welcomeSection}>\n        <View style={styles.welcomeHeader}>\n          <View>\n            <Text style={styles.welcomeText}>\n              Welcome back, {user?.firstName}!\n            </Text>\n            <Text style={styles.subtitle}>\n              Professional mobile mechanic services at your location\n            </Text>\n          </View>\n          <TouchableOpacity style={styles.logoutButton} onPress={logout}>\n            <Icons.LogOut size={20} color={Colors.textMuted} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Emergency Button */}\n      <TouchableOpacity style={styles.emergencyButton} onPress={handleEmergencyPress}>\n        <Icons.Phone size={24} color={Colors.white} />\n        <View style={styles.emergencyContent}>\n          <Text style={styles.emergencyTitle}>Emergency Roadside</Text>\n          <Text style={styles.emergencySubtitle}>24/7 immediate assistance</Text>\n        </View>\n        <Icons.ChevronRight size={20} color={Colors.white} />\n      </TouchableOpacity>\n\n      {/* Quick Stats */}\n      <View style={styles.statsSection}>\n        <View style={styles.statsGrid}>\n          <TouchableOpacity \n            style={styles.statCard}\n            onPress={() => handleQuickAction('quotes')}\n          >\n            <Text style={styles.statNumber}>{pendingRequests + activeRequests}</Text>\n            <Text style={styles.statLabel}>Active Requests</Text>\n            <Icons.Clock size={16} color={Colors.primary} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.statCard}\n            onPress={() => handleQuickAction('quotes')}\n          >\n            <Text style={styles.statNumber}>{completedRequests}</Text>\n            <Text style={styles.statLabel}>Completed</Text>\n            <Icons.CheckCircle size={16} color={Colors.success} />\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.statCard}\n            onPress={() => handleQuickAction('profile')}\n          >\n            <Text style={styles.statNumber}>{vehicles.length}</Text>\n            <Text style={styles.statLabel}>Vehicles</Text>\n            <Icons.Car size={16} color={Colors.primary} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Maintenance Reminders */}\n      <MaintenanceReminders />\n\n      {/* Quick Actions */}\n      <View style={styles.quickActionsSection}>\n        <Text style={styles.sectionTitle}>Quick Actions</Text>\n        <View style={styles.quickActionsGrid}>\n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => handleQuickAction('quotes')}\n          >\n            <Icons.FileText size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>View Quotes</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => handleQuickAction('profile')}\n          >\n            <Icons.User size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>My Profile</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => router.push('/request')}\n          >\n            <Icons.Plus size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>New Request</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity \n            style={styles.quickActionCard}\n            onPress={() => router.push('/quotes')}\n          >\n            <Icons.History size={24} color={Colors.primary} />\n            <Text style={styles.quickActionText}>Service History</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Services Section */}\n      <View style={styles.servicesSection}>\n        <Text style={styles.sectionTitle}>Our Services</Text>\n        {SERVICE_CATEGORIES.filter(s => s.id !== 'emergency_roadside').map((service) => (\n          <ServiceCard\n            key={service.id}\n            service={service}\n            onPress={() => handleServicePress(service.id)}\n          />\n        ))}\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: Colors.background,\n  },\n  welcomeSection: {\n    padding: 20,\n    paddingBottom: 16,\n  },\n  welcomeHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n  },\n  welcomeText: {\n    fontSize: 28,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: Colors.textSecondary,\n    lineHeight: 22,\n  },\n  logoutButton: {\n    padding: 8,\n  },\n  emergencyButton: {\n    backgroundColor: Colors.error,\n    marginHorizontal: 20,\n    marginBottom: 24,\n    padding: 16,\n    borderRadius: 12,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  emergencyContent: {\n    flex: 1,\n    marginLeft: 12,\n  },\n  emergencyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: Colors.white,\n  },\n  emergencySubtitle: {\n    fontSize: 14,\n    color: Colors.white,\n    opacity: 0.9,\n  },\n  statsSection: {\n    paddingHorizontal: 20,\n    marginBottom: 24,\n  },\n  statsGrid: {\n    flexDirection: 'row',\n    gap: 12,\n  },\n  statCard: {\n    flex: 1,\n    backgroundColor: Colors.card,\n    padding: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: Colors.border,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: Colors.text,\n    marginBottom: 4,\n  },\n  statLabel: {\n    fontSize: 12,\n    color: Colors.textSecondary,\n    textAlign: 'center',\n    marginBottom: 8,\n  },\n  quickActionsSection: {\n    paddingHorizontal: 20,\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    color: Colors.text,\n    marginBottom: 16,\n  },\n  quickActionsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 12,\n  },\n  quickActionCard: {\n    backgroundColor: Colors.card,\n    borderWidth: 1,\n    borderColor: Colors.border,\n    borderRadius: 12,\n    padding: 16,\n    alignItems: 'center',\n    width: '48%',\n    minHeight: 80,\n    justifyContent: 'center',\n  },\n  quickActionText: {\n    fontSize: 14,\n    color: Colors.text,\n    fontWeight: '500',\n    marginTop: 8,\n    textAlign: 'center',\n  },\n  servicesSection: {\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n  },\n});"
            }
          }
        },
        {
          "display": "yes that's correct",
          "pastedContents": {}
        },
        {
          "display": "[Pasted text #1 +76 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "import React from 'react';\nimport { Tabs, Redirect } from 'expo-router';\nimport { Colors } from '@/constants/colors';\nimport { useAuthStore } from '@/stores/auth-store';\nimport * as Icons from 'lucide-react-native';\n\nfunction TabBarIcon({ name, color }: { name: keyof typeof Icons; color: string }) {\n  const IconComponent = Icons[name] as any;\n  return IconComponent ? <IconComponent size={24} color={color} /> : null;\n}\n\nexport default function CustomerTabLayout() {\n  const { user, isAuthenticated } = useAuthStore();\n\n  // Redirect to auth if not authenticated or not a customer\n  if (!isAuthenticated || !user || user.role !== 'customer') {\n    return <Redirect href=\"/auth\" />;\n  }\n\n  return (\n    <Tabs\n      screenOptions={{\n        tabBarActiveTintColor: Colors.primary,\n        tabBarInactiveTintColor: Colors.textMuted,\n        tabBarStyle: {\n          backgroundColor: Colors.surface,\n          borderTopColor: Colors.border,\n          borderTopWidth: 1,\n        },\n        headerStyle: {\n          backgroundColor: Colors.background,\n        },\n        headerTintColor: Colors.text,\n        headerTitleStyle: {\n          fontWeight: '600',\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          headerTitle: 'Heinicus Mobile Mechanic',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Home\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"request\"\n        options={{\n          title: 'Request Service',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Wrench\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"quotes\"\n        options={{\n          title: 'My Quotes',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"FileText\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"schedule\"\n        options={{\n          title: 'Schedule',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"Calendar\" color={color} />,\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"User\" color={color} />,\n        }}\n      />\n    </Tabs>\n  );\n}"
            }
          }
        },
        {
          "display": "[Pasted text #2 +223 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "app\n\n(customer)\n\n_layout.tsx\n\n\nindex.tsx\n\n\nprofile.tsx\n\n\nquotes.tsx\n\n\nrequest.tsx\n\n\nschedule.tsx\n\n\n(mechanic)\n\n_layout.tsx\n\n\ncustomers.tsx\n\n\nindex.tsx\n\n\njobs.tsx\n\n\nmap.tsx\n\n\nprofile.tsx\n\n\n(tabs)\n\n\nauth\n\nindex.tsx\n\n\n_layout.tsx\n\n\n+not-found.tsx\n\n\ndev-switcher.tsx\n\n\nassets\n\nimages\n\nadaptive-icon.png\n\n\nfavicon.png\n\n\nicon.png\n\n\nsplash-icon.png\n\n\nbackend\n\ntrpc\n\nroutes\n\ndiagnosis\n\nroute.ts\n\n\nexample\n\nhi\n\napp-router.ts\n\n\ncreate-context.ts\n\n\nhono.ts\n\n\ncomponents\n\nAIAssistant.tsx\n\n\nAvailabilityCalendar.tsx\n\n\nAvailabilitySettings.tsx\n\n\nButton.tsx\n\n\nChatComponent.tsx\n\n\nLoadingSpinner.tsx\n\n\nMaintenanceReminders.tsx\n\n\nNotificationSettings.tsx\n\n\nOfflineIndicator.tsx\n\n\nPaymentModal.tsx\n\n\nPhotoUpload.tsx\n\n\nReportsAnalytics.tsx\n\n\nServiceCard.tsx\n\n\nServicePricingSettings.tsx\n\n\nSignatureCapture.tsx\n\n\nStripePayment.tsx\n\n\nToolsEquipmentSettings.tsx\n\n\nVinScanner.tsx\n\n\nWorkTimer.tsx\n\n\nconstants\n\ncolors.ts\n\n\npricing.ts\n\n\nservices.ts\n\n\nhooks\n\nuse-firebase.ts\n\n\nlib\n\ntrpc.ts\n\n\nservices\n\nfirebase-service.ts\n\n\nstores\n\napp-store.ts\n\n\nauth-store.ts\n\n\nsettings-store.ts\n\n\ntypes\n\nauth.ts\n\n\nservice.ts\n\n\nutils\n\nfirebase-config.ts\n\n\nquote-generator.ts\n\n\n.gitignore\n\n\napp.json\n\n\nbun.lock\n\n\npackage.json\n\n\ntsconfig.json"
            },
            "2": {
              "id": 2,
              "type": "text",
              "content": "app\n\n(customer)\n\n_layout.tsx\n\n\nindex.tsx\n\n\nprofile.tsx\n\n\nquotes.tsx\n\n\nrequest.tsx\n\n\nschedule.tsx\n\n\n(mechanic)\n\n_layout.tsx\n\n\ncustomers.tsx\n\n\nindex.tsx\n\n\njobs.tsx\n\n\nmap.tsx\n\n\nprofile.tsx\n\n\n(tabs)\n\n\nauth\n\nindex.tsx\n\n\n_layout.tsx\n\n\n+not-found.tsx\n\n\ndev-switcher.tsx\n\n\nassets\n\nimages\n\nadaptive-icon.png\n\n\nfavicon.png\n\n\nicon.png\n\n\nsplash-icon.png\n\n\nbackend\n\ntrpc\n\nroutes\n\ndiagnosis\n\nroute.ts\n\n\nexample\n\nhi\n\napp-router.ts\n\n\ncreate-context.ts\n\n\nhono.ts\n\n\ncomponents\n\nAIAssistant.tsx\n\n\nAvailabilityCalendar.tsx\n\n\nAvailabilitySettings.tsx\n\n\nButton.tsx\n\n\nChatComponent.tsx\n\n\nLoadingSpinner.tsx\n\n\nMaintenanceReminders.tsx\n\n\nNotificationSettings.tsx\n\n\nOfflineIndicator.tsx\n\n\nPaymentModal.tsx\n\n\nPhotoUpload.tsx\n\n\nReportsAnalytics.tsx\n\n\nServiceCard.tsx\n\n\nServicePricingSettings.tsx\n\n\nSignatureCapture.tsx\n\n\nStripePayment.tsx\n\n\nToolsEquipmentSettings.tsx\n\n\nVinScanner.tsx\n\n\nWorkTimer.tsx\n\n\nconstants\n\ncolors.ts\n\n\npricing.ts\n\n\nservices.ts\n\n\nhooks\n\nuse-firebase.ts\n\n\nlib\n\ntrpc.ts\n\n\nservices\n\nfirebase-service.ts\n\n\nstores\n\napp-store.ts\n\n\nauth-store.ts\n\n\nsettings-store.ts\n\n\ntypes\n\nauth.ts\n\n\nservice.ts\n\n\nutils\n\nfirebase-config.ts\n\n\nquote-generator.ts\n\n\n.gitignore\n\n\napp.json\n\n\nbun.lock\n\n\npackage.json\n\n\ntsconfig.json"
            }
          }
        },
        {
          "display": "do i need to give you the folder structure first",
          "pastedContents": {}
        },
        {
          "display": "i need to paste it here",
          "pastedContents": {}
        },
        {
          "display": "i have an app i need to finish coding",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 0,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "hasCompletedProjectOnboarding": true
    }
  },
  "oauthAccount": {
    "accountUuid": "f87055d4-2927-4a44-89b5-d576b4d412ca",
    "emailAddress": "matthew.heinen.2014@gmail.com",
    "organizationUuid": "e51c2afc-09b0-4ee0-a2ba-409ffa73886e",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "matthew.heinen.2014@gmail.com's Organization"
  },
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.33",
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1750777694165,
  "fallbackAvailableWarningThreshold": 0.5,
  "lastReleaseNotesSeen": "1.0.33"
}